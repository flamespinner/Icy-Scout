{/* ResponsiveContainer creates a chart that can scale to the full width of the parent container, in this case our card */}
                    <ResponsiveContainer width='100%' height={300}>
                    {/* Create a bar chart, pass it our data, and set some margins */}
                    {!topItem.singleUse ?
                    <BarChart
                    data={data}
                    margin={{
                    top: 0, right: 20, bottom: 20, left: 20,
                    }}
                    >
                    {/* Render a grid onto our chart using dashed lines */}
                    <CartesianGrid strokeDasharray="3 3" />
                    {/* Render an X-axis and use the key `name` from datapoints as the point names */}
                    <XAxis dataKey="name" />
                    <YAxis />
                    {/* Render a tooltip allowing the user to hover over a bar to get exact numbers */}
                    <Tooltip />
                    <Legend />
                    {/*
                    For each of the available child keys in the processed objects:
                    - Render a bar on the chart:
                    - `key` is required by map
                    - `dataKey` is a string specifying which value in the datapoint to use
                    - `name` sets the name of the datapoints/bars
                    If the element has display text use it, otherwise default to the underlying key
                    - `fill` sets the fill color of the bar
                    Set by converting the key to a hex color code

                    */}
                    {availableChildren.map(childKey => {
                    if (topItem.type === 'duration') {
                    return (
                    <Bar
                    key={'Duration-bar'}
                    dataKey={'Duration'}
                    name={'Duration'}
                    fill={'#' + string2color('Duration')}
                    />
                    )
                    } else {
                    return (
                    <Bar
                    key={childKey + '-bar'}
                    dataKey={childKey}
                    name={
                    template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display ?
                    template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display :
                    childKey
                    }
                    fill={'#' + string2color(childKey)}
                    />
                    )
                    }
                    })}
                    </BarChart>
                    :
                    <PieChart
                    margin={{
                    top: 0, right: 20, bottom: 20, left: 20,
                    }}
                    >
                    <Pie
                    dataKey="value"
                    isAnimationActive={false}
                    data={data}
                    labelLine={false}
                    label={renderCustomizedLabel}
                    >
                    {
                    data.map((entry, index) => <Cell key={`cell-${index}`} fill={entry.name === 'None' ? '#CCCCCC' : '#' + string2color(entry.name)} />)
                    }
                    </Pie>
                    <Legend />
                    </PieChart>
                    }
                    </ResponsiveContainer>
                    <div className={classes.listContainer}>
                    {topItem.type === 'duration' &&
                    <React.Fragment>
                    {/* Render a divider with some margin to help visually distinguish sections */}
                    <Divider style={{marginBottom: '15px'}} />
                    {/* Render a list with header set to the display name of the child of the top element that this list is for */}
                    <List className={classes.list}>
                    {/*
                    For each key of the processed objects under the child key
                    - sort them by a predetermined order
                    - then map by the keys to a switch case
                    */}
                    {Object.keys(processedObject.data[topKey]).sort((k1, k2) => {
                    let possibilities = ['average_total_duration'];
                    let k1i = possibilities.indexOf(k1);
                    let k2i = possibilities.indexOf(k2);
                    return k1i - k2i;
                    }).map(key => {
                    // switch/case through the key to render a list item for each processed data point
                    // default to blank to ignore unknown datapoints
                    switch (key) {
                    case 'average_total_duration':
                    return (
                    <ListItem key={key}>
                        <ListItemText primary={'Average Duration: ' + Math.round(processedObject.data[topKey][key]*100)/100 + ' seconds'} />
                    </ListItem>
                    )
                    default:
                    return <React.Fragment key={key} />
                    }
                    })}
                    </List>
                    </React.Fragment>
                    }
                    {/*
                    For each of the child keys under the element in the processed object:
                    - Map to a fragment to contain a data list
                    */}
                    {topItem.type !== 'duration' && Object.keys(processedObject.data[topKey]).map(key => (
                    <React.Fragment key={key}>
                    {/* Render a divider with some margin to help visually distinguish sections */}
                    <Divider style={{marginBottom: '15px'}} />
                    {/* Render a list with header set to the display name of the child of the top element that this list is for */}
                    <List className={classes.list} subheader={<Typography>{topItem.children.filter(child => child.key === key)[0].display}</Typography>}>
                    {/*
                    For each key of the processed objects under the child key
                    - sort them by a predetermined order
                    - then map by the keys to a switch case
                    */}
                    {Object.keys(processedObject.data[topKey][key]).sort((k1, k2) => {
                    let possibilities = ['average', 'average_duration', 'average_bestfit'];
                    let k1i = possibilities.indexOf(k1);
                    let k2i = possibilities.indexOf(k2);
                    return k1i - k2i;
                    }).map(l2key => {
                    // switch/case through the key to render a list item for each processed data point
                    // default to blank to ignore unknown datapoints
                    switch (l2key) {
                    case 'average':
                    if (!topItem.singleUse) {
                    return (
                        <ListItem key={l2key}>
                            <ListItemText primary={'Average Cycles: ' + Math.round(processedObject.data[topKey][key][l2key]*100)/100} />
                        </ListItem>
                    )
                    } else {
                    return (
                        <React.Fragment key={l2key} />
                    )
                    }
                    case 'average_duration':
                    return (
                    <ListItem key={l2key}>
                        <ListItemText primary={'Average Duration: ' + Math.round(processedObject.data[topKey][key][l2key]*100)/100 + ' seconds'} />
                    </ListItem>
                    )
                    case 'average_bestfit':
                    return (
                    <ListItem key={l2key}>
                        <ListItemText primary={'Event Trend Slope: ' + Math.round(processedObject.data[topKey][key][l2key].slope*100)/100} />
                    </ListItem>
                    )
                    default:
                    return <React.Fragment key={l2key} />
                    }
                    })}
                    </List>
                    </React.Fragment>
                    ))}
                    </div>