{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael Wilke\\\\Desktop\\\\Scout\\\\frontend\\\\src\\\\components\\\\graph.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction graph() {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: !topItem.singleUse ? /*#__PURE__*/_jsxDEV(BarChart, {\n          data: data,\n          margin: {\n            top: 0,\n            right: 20,\n            bottom: 20,\n            left: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 21\n          }, this), availableChildren.map(childKey => {\n            if (topItem.type === 'duration') {\n              return /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: 'Duration',\n                name: 'Duration',\n                fill: '#' + string2color('Duration')\n              }, 'Duration-bar', false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 21\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: childKey,\n                name: template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display ? template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display : childKey,\n                fill: '#' + string2color(childKey)\n              }, childKey + '-bar', false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 21\n              }, this);\n            }\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(PieChart, {\n          margin: {\n            top: 0,\n            right: 20,\n            bottom: 20,\n            left: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            dataKey: \"value\",\n            isAnimationActive: false,\n            data: data,\n            labelLine: false,\n            label: renderCustomizedLabel,\n            children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: entry.name === 'None' ? '#CCCCCC' : '#' + string2color(entry.name)\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 48\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.listContainer,\n        children: [topItem.type === 'duration' && /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              marginBottom: '15px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            className: classes.list,\n            children: Object.keys(processedObject.data[topKey]).sort((k1, k2) => {\n              let possibilities = ['average_total_duration'];\n              let k1i = possibilities.indexOf(k1);\n              let k2i = possibilities.indexOf(k2);\n              return k1i - k2i;\n            }).map(key => {\n              // switch/case through the key to render a list item for each processed data point\n              // default to blank to ignore unknown datapoints\n              switch (key) {\n                case 'average_total_duration':\n                  return /*#__PURE__*/_jsxDEV(ListItem, {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: 'Average Duration: ' + Math.round(processedObject.data[topKey][key] * 100) / 100 + ' seconds'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 25\n                    }, this)\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 21\n                  }, this);\n\n                default:\n                  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 28\n                  }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), topItem.type !== 'duration' && Object.keys(processedObject.data[topKey]).map(key => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              marginBottom: '15px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            className: classes.list,\n            subheader: /*#__PURE__*/_jsxDEV(Typography, {\n              children: topItem.children.filter(child => child.key === key)[0].display\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 63\n            }, this),\n            children: Object.keys(processedObject.data[topKey][key]).sort((k1, k2) => {\n              let possibilities = ['average', 'average_duration', 'average_bestfit'];\n              let k1i = possibilities.indexOf(k1);\n              let k2i = possibilities.indexOf(k2);\n              return k1i - k2i;\n            }).map(l2key => {\n              // switch/case through the key to render a list item for each processed data point\n              // default to blank to ignore unknown datapoints\n              switch (l2key) {\n                case 'average':\n                  if (!topItem.singleUse) {\n                    return /*#__PURE__*/_jsxDEV(ListItem, {\n                      children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                        primary: 'Average Cycles: ' + Math.round(processedObject.data[topKey][key][l2key] * 100) / 100\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 29\n                      }, this)\n                    }, l2key, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 25\n                    }, this);\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, l2key, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 25\n                    }, this);\n                  }\n\n                case 'average_duration':\n                  return /*#__PURE__*/_jsxDEV(ListItem, {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: 'Average Duration: ' + Math.round(processedObject.data[topKey][key][l2key] * 100) / 100 + ' seconds'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 25\n                    }, this)\n                  }, l2key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 21\n                  }, this);\n\n                case 'average_bestfit':\n                  return /*#__PURE__*/_jsxDEV(ListItem, {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: 'Event Trend Slope: ' + Math.round(processedObject.data[topKey][key][l2key].slope * 100) / 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 25\n                    }, this)\n                  }, l2key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 21\n                  }, this);\n\n                default:\n                  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, l2key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 28\n                  }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 13\n  }, this);\n}\n\nexport default graph;","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/src/components/graph.js"],"names":["React","Link","Card","CardContent","CardHeader","Typography","graph","classes","card","title","topItem","singleUse","data","top","right","bottom","left","availableChildren","map","childKey","type","string2color","template","scout","run","filter","r","key","topKey","children","c","display","renderCustomizedLabel","entry","index","name","listContainer","marginBottom","list","Object","keys","processedObject","sort","k1","k2","possibilities","k1i","indexOf","k2i","Math","round","child","l2key","slope"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Card, CardContent, CardHeader, Typography } from '@material-ui/core'; \r\n\r\nfunction graph() {\r\n        return(\r\n            <Card className={classes.card}>\r\n                <CardHeader title={title} />\r\n                <CardContent>\r\n                    {/* ResponsiveContainer creates a chart that can scale to the full width of the parent container, in this case our card */}\r\n                    <ResponsiveContainer width='100%' height={300}>\r\n                    {/* Create a bar chart, pass it our data, and set some margins */}\r\n                    {!topItem.singleUse ?\r\n                    <BarChart\r\n                    data={data}\r\n                    margin={{\r\n                    top: 0, right: 20, bottom: 20, left: 20,\r\n                    }}\r\n                    >\r\n                    {/* Render a grid onto our chart using dashed lines */}\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    {/* Render an X-axis and use the key `name` from datapoints as the point names */}\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    {/* Render a tooltip allowing the user to hover over a bar to get exact numbers */}\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {/*\r\n                    For each of the available child keys in the processed objects:\r\n                    - Render a bar on the chart:\r\n                    - `key` is required by map\r\n                    - `dataKey` is a string specifying which value in the datapoint to use\r\n                    - `name` sets the name of the datapoints/bars\r\n                    If the element has display text use it, otherwise default to the underlying key\r\n                    - `fill` sets the fill color of the bar\r\n                    Set by converting the key to a hex color code\r\n\r\n                    */}\r\n                    {availableChildren.map(childKey => {\r\n                    if (topItem.type === 'duration') {\r\n                    return (\r\n                    <Bar\r\n                    key={'Duration-bar'}\r\n                    dataKey={'Duration'}\r\n                    name={'Duration'}\r\n                    fill={'#' + string2color('Duration')}\r\n                    />\r\n                    )\r\n                    } else {\r\n                    return (\r\n                    <Bar\r\n                    key={childKey + '-bar'}\r\n                    dataKey={childKey}\r\n                    name={\r\n                    template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display ?\r\n                    template.scout.run.filter(r => r.key === topKey)[0].children.filter(c => c.key === childKey)[0].display :\r\n                    childKey\r\n                    }\r\n                    fill={'#' + string2color(childKey)}\r\n                    />\r\n                    )\r\n                    }\r\n                    })}\r\n                    </BarChart>\r\n                    :\r\n                    <PieChart\r\n                    margin={{\r\n                    top: 0, right: 20, bottom: 20, left: 20,\r\n                    }}\r\n                    >\r\n                    <Pie\r\n                    dataKey=\"value\"\r\n                    isAnimationActive={false}\r\n                    data={data}\r\n                    labelLine={false}\r\n                    label={renderCustomizedLabel}\r\n                    >\r\n                    {\r\n                    data.map((entry, index) => <Cell key={`cell-${index}`} fill={entry.name === 'None' ? '#CCCCCC' : '#' + string2color(entry.name)} />)\r\n                    }\r\n                    </Pie>\r\n                    <Legend />\r\n                    </PieChart>\r\n                    }\r\n                    </ResponsiveContainer>\r\n                    <div className={classes.listContainer}>\r\n                    {topItem.type === 'duration' &&\r\n                    <React.Fragment>\r\n                    {/* Render a divider with some margin to help visually distinguish sections */}\r\n                    <Divider style={{marginBottom: '15px'}} />\r\n                    {/* Render a list with header set to the display name of the child of the top element that this list is for */}\r\n                    <List className={classes.list}>\r\n                    {/*\r\n                    For each key of the processed objects under the child key\r\n                    - sort them by a predetermined order\r\n                    - then map by the keys to a switch case\r\n                    */}\r\n                    {Object.keys(processedObject.data[topKey]).sort((k1, k2) => {\r\n                    let possibilities = ['average_total_duration'];\r\n                    let k1i = possibilities.indexOf(k1);\r\n                    let k2i = possibilities.indexOf(k2);\r\n                    return k1i - k2i;\r\n                    }).map(key => {\r\n                    // switch/case through the key to render a list item for each processed data point\r\n                    // default to blank to ignore unknown datapoints\r\n                    switch (key) {\r\n                    case 'average_total_duration':\r\n                    return (\r\n                    <ListItem key={key}>\r\n                        <ListItemText primary={'Average Duration: ' + Math.round(processedObject.data[topKey][key]*100)/100 + ' seconds'} />\r\n                    </ListItem>\r\n                    )\r\n                    default:\r\n                    return <React.Fragment key={key} />\r\n                    }\r\n                    })}\r\n                    </List>\r\n                    </React.Fragment>\r\n                    }\r\n                    {/*\r\n                    For each of the child keys under the element in the processed object:\r\n                    - Map to a fragment to contain a data list\r\n                    */}\r\n                    {topItem.type !== 'duration' && Object.keys(processedObject.data[topKey]).map(key => (\r\n                    <React.Fragment key={key}>\r\n                    {/* Render a divider with some margin to help visually distinguish sections */}\r\n                    <Divider style={{marginBottom: '15px'}} />\r\n                    {/* Render a list with header set to the display name of the child of the top element that this list is for */}\r\n                    <List className={classes.list} subheader={<Typography>{topItem.children.filter(child => child.key === key)[0].display}</Typography>}>\r\n                    {/*\r\n                    For each key of the processed objects under the child key\r\n                    - sort them by a predetermined order\r\n                    - then map by the keys to a switch case\r\n                    */}\r\n                    {Object.keys(processedObject.data[topKey][key]).sort((k1, k2) => {\r\n                    let possibilities = ['average', 'average_duration', 'average_bestfit'];\r\n                    let k1i = possibilities.indexOf(k1);\r\n                    let k2i = possibilities.indexOf(k2);\r\n                    return k1i - k2i;\r\n                    }).map(l2key => {\r\n                    // switch/case through the key to render a list item for each processed data point\r\n                    // default to blank to ignore unknown datapoints\r\n                    switch (l2key) {\r\n                    case 'average':\r\n                    if (!topItem.singleUse) {\r\n                    return (\r\n                        <ListItem key={l2key}>\r\n                            <ListItemText primary={'Average Cycles: ' + Math.round(processedObject.data[topKey][key][l2key]*100)/100} />\r\n                        </ListItem>\r\n                    )\r\n                    } else {\r\n                    return (\r\n                        <React.Fragment key={l2key} />\r\n                    )\r\n                    }\r\n                    case 'average_duration':\r\n                    return (\r\n                    <ListItem key={l2key}>\r\n                        <ListItemText primary={'Average Duration: ' + Math.round(processedObject.data[topKey][key][l2key]*100)/100 + ' seconds'} />\r\n                    </ListItem>\r\n                    )\r\n                    case 'average_bestfit':\r\n                    return (\r\n                    <ListItem key={l2key}>\r\n                        <ListItemText primary={'Event Trend Slope: ' + Math.round(processedObject.data[topKey][key][l2key].slope*100)/100} />\r\n                    </ListItem>\r\n                    )\r\n                    default:\r\n                    return <React.Fragment key={l2key} />\r\n                    }\r\n                    })}\r\n                    </List>\r\n                    </React.Fragment>\r\n                    ))}\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n}\r\n\r\nexport default graph;"]},"metadata":{},"sourceType":"module"}