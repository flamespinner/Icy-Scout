{"ast":null,"code":"import * as d3 from \"d3\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Vertical Volume Slice Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myChart = d3.x3d.chart.volumeSliceChart();\n *    .dimensions({ x: 40, y: 40, z: 30 })\n *    .imageUrl(\"assets/scan2.png\")\n *    .numberOfSlices(35)\n *    .slicesOverX(7)\n *    .slicesOverY(5);\n *\n * chartHolder.call(myChart);\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let classed = \"d3X3dVolumeSliceChart\";\n  let debug = false;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let origin = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  /* Other Volume Properties */\n\n  let imageUrl;\n  let numberOfSlices;\n  let slicesOverX;\n  let slicesOverY;\n  let volumeStyle = \"OpacityMap\";\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.crosshair();\n  const volumeSlice = component.volumeSlice();\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias volumeSliceChart\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"volume\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      // Add Viewpoint\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.dimensions(dimensions).xScale(xScale).yScale(yScale).zScale(zScale);\n      scene.select(\".axis\").datum(origin).call(axis); // Add Volume Slice\n\n      volumeSlice.dimensions(dimensions).imageUrl(imageUrl).numberOfSlices(numberOfSlices).slicesOverX(slicesOverX).slicesOverY(slicesOverY).volumeStyle(volumeStyle);\n      scene.select(\".volume\").append(\"transform\").attr(\"translation\", () => {\n        const x = dimensions.x / 2;\n        const y = dimensions.y / 2;\n        const z = dimensions.z / 2;\n        return x + \" \" + y + \" \" + z;\n      }).datum(d => d).call(volumeSlice);\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * Image URL Getter / Setter\n   *\n   * @param {string} _v - Image URL path.\n   * @returns {*}\n   */\n\n\n  my.imageUrl = function (_v) {\n    if (!arguments.length) return imageUrl;\n    imageUrl = _v;\n    return this;\n  };\n  /**\n   * Number of Slices Getter / Setter\n   *\n   * @param {number} _v - Total number of slices.\n   * @returns {*}\n   */\n\n\n  my.numberOfSlices = function (_v) {\n    if (!arguments.length) return numberOfSlices;\n    numberOfSlices = _v;\n    return this;\n  };\n  /**\n   * X Slices Getter / Setter\n   *\n   * @param {number} _v - Number of slices over X axis.\n   * @returns {*}\n   */\n\n\n  my.slicesOverX = function (_v) {\n    if (!arguments.length) return slicesOverX;\n    slicesOverX = _v;\n    return this;\n  };\n  /**\n   * Y Slices Getter / Setter\n   *\n   * @param {number} _v - Number of slices over Y axis.\n   * @returns {*}\n   */\n\n\n  my.slicesOverY = function (_v) {\n    if (!arguments.length) return slicesOverY;\n    slicesOverY = _v;\n    return this;\n  };\n  /**\n   * Volume Style Getter / Setter\n   *\n   * @param {string} _v - Volume render style (either \"MPRVolume\" or \"OpacityMap\")\n   * @returns {*}\n   */\n\n\n  my.volumeStyle = function (_v) {\n    if (!arguments.length) return volumeStyle;\n    volumeStyle = _v;\n    return this;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/volumeSliceChart.js"],"names":["d3","component","createScene","width","height","dimensions","x","y","z","classed","debug","xScale","yScale","zScale","origin","imageUrl","numberOfSlices","slicesOverX","slicesOverY","volumeStyle","viewpoint","axis","crosshair","volumeSlice","my","selection","layers","scene","each","data","centerOfRotation","call","select","datum","append","attr","d","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Vertical Volume Slice Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myChart = d3.x3d.chart.volumeSliceChart();\n *    .dimensions({ x: 40, y: 40, z: 30 })\n *    .imageUrl(\"assets/scan2.png\")\n *    .numberOfSlices(35)\n *    .slicesOverX(7)\n *    .slicesOverY(5);\n *\n * chartHolder.call(myChart);\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet classed = \"d3X3dVolumeSliceChart\";\n\tlet debug = false;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet origin = { x: 0, y: 0, z: 0 };\n\n\t/* Other Volume Properties */\n\tlet imageUrl;\n\tlet numberOfSlices;\n\tlet slicesOverX;\n\tlet slicesOverY;\n\tlet volumeStyle = \"OpacityMap\";\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst axis = component.crosshair();\n\tconst volumeSlice = component.volumeSlice();\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias volumeSliceChart\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"axis\", \"volume\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\taxis.dimensions(dimensions)\n\t\t\t\t.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale);\n\n\t\t\tscene.select(\".axis\")\n\t\t\t\t.datum(origin)\n\t\t\t\t.call(axis);\n\n\t\t\t// Add Volume Slice\n\t\t\tvolumeSlice.dimensions(dimensions)\n\t\t\t\t.imageUrl(imageUrl)\n\t\t\t\t.numberOfSlices(numberOfSlices)\n\t\t\t\t.slicesOverX(slicesOverX)\n\t\t\t\t.slicesOverY(slicesOverY)\n\t\t\t\t.volumeStyle(volumeStyle);\n\n\t\t\tscene.select(\".volume\")\n\t\t\t\t.append(\"transform\")\n\t\t\t\t.attr(\"translation\", () => {\n\t\t\t\t\tconst x = dimensions.x / 2;\n\t\t\t\t\tconst y = dimensions.y / 2;\n\t\t\t\t\tconst z = dimensions.z / 2;\n\t\t\t\t\treturn x + \" \" + y + \" \" + z;\n\t\t\t\t})\n\t\t\t\t.datum((d) => d)\n\t\t\t\t.call(volumeSlice);\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Image URL Getter / Setter\n\t *\n\t * @param {string} _v - Image URL path.\n\t * @returns {*}\n\t */\n\tmy.imageUrl = function(_v) {\n\t\tif (!arguments.length) return imageUrl;\n\t\timageUrl = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Number of Slices Getter / Setter\n\t *\n\t * @param {number} _v - Total number of slices.\n\t * @returns {*}\n\t */\n\tmy.numberOfSlices = function(_v) {\n\t\tif (!arguments.length) return numberOfSlices;\n\t\tnumberOfSlices = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Slices Getter / Setter\n\t *\n\t * @param {number} _v - Number of slices over X axis.\n\t * @returns {*}\n\t */\n\tmy.slicesOverX = function(_v) {\n\t\tif (!arguments.length) return slicesOverX;\n\t\tslicesOverX = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Y Slices Getter / Setter\n\t *\n\t * @param {number} _v - Number of slices over Y axis.\n\t * @returns {*}\n\t */\n\tmy.slicesOverY = function(_v) {\n\t\tif (!arguments.length) return slicesOverY;\n\t\tslicesOverY = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Volume Style Getter / Setter\n\t *\n\t * @param {string} _v - Volume render style (either \"MPRVolume\" or \"OpacityMap\")\n\t * @returns {*}\n\t */\n\tmy.volumeStyle = function(_v) {\n\t\tif (!arguments.length) return volumeStyle;\n\t\tvolumeStyle = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}