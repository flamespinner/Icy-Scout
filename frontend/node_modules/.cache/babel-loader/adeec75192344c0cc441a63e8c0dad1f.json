{"ast":null,"code":"// Version: 2022-01-22\n//\n// o--------------------------------------------------------------------------------o\n// | This file is part of the RGraph package - you can learn more at:               |\n// |                                                                                |\n// |                         https://www.rgraph.net                                 |\n// |                                                                                |\n// | RGraph is licensed under the Open Source MIT license. That means that it's     |\n// | totally free to use and there are no restrictions on what you can do with it!  |\n// o--------------------------------------------------------------------------------o\nRGraph = window.RGraph || {\n  isrgraph: true,\n  isRGraph: true,\n  rgraph: true\n}; //\n// The bar chart constructor\n//\n\nRGraph.Bar = function (conf) {\n  var id = conf.id,\n      canvas = document.getElementById(id),\n      data = conf.data; // Get the canvas and context objects\n\n  this.id = id;\n  this.canvas = canvas;\n  this.context = this.canvas.getContext('2d');\n  this.canvas.__object__ = this;\n  this.type = 'bar';\n  this.max = 0;\n  this.stackedOrGrouped = false;\n  this.isRGraph = true;\n  this.isrgraph = true;\n  this.rgraph = true;\n  this.uid = RGraph.createUID();\n  this.canvas.uid = this.canvas.uid ? this.canvas.uid : RGraph.createUID();\n  this.colorsParsed = false;\n  this.original_colors = [];\n  this.cachedBackgroundCanvas = null;\n  this.firstDraw = true; // After the first draw this will be false\n  // Various config type stuff\n\n  this.properties = {\n    backgroundBarsCount: null,\n    backgroundBarsColor1: 'rgba(0,0,0,0)',\n    backgroundBarsColor2: 'rgba(0,0,0,0)',\n    backgroundGrid: true,\n    backgroundGridColor: '#ddd',\n    backgroundGridLinewidth: 1,\n    backgroundGridHsize: 20,\n    backgroundGridVsize: 20,\n    backgroundGridVlines: true,\n    backgroundGridHlines: true,\n    backgroundGridBorder: true,\n    backgroundGridAutofit: true,\n    backgroundGridAutofitAlign: true,\n    backgroundGridHlinesCount: 5,\n    backgroundGridDashed: false,\n    backgroundGridDotted: false,\n    backgroundImage: null,\n    backgroundImageStretch: true,\n    backgroundImageX: null,\n    backgroundImageY: null,\n    backgroundImageW: null,\n    backgroundImageH: null,\n    backgroundImageAlign: null,\n    backgroundColor: null,\n    backgroundHbars: null,\n    marginTop: 35,\n    marginBottom: 35,\n    marginLeft: 35,\n    marginRight: 35,\n    marginInner: 5,\n    marginInnerGrouped: 1,\n    labelsIngraph: null,\n    labelsIngraphFont: null,\n    labelsIngraphSize: null,\n    labelsIngraphColor: null,\n    labelsIngraphBold: null,\n    labelsIngraphItalic: null,\n    labelsIngraphOffsetx: 0,\n    labelsIngraphOffsety: 0,\n    labelsAbove: false,\n    labelsAboveDecimals: 0,\n    labelsAboveSize: null,\n    labelsAboveColor: null,\n    labelsAboveBold: null,\n    labelsAboveItalic: null,\n    labelsAboveFont: null,\n    labelsAbovePoint: '.',\n    labelsAboveThousand: ',',\n    labelsAboveBackground: 'rgba(0,0,0,0)',\n    labelsAboveAngle: null,\n    labelsAboveOffset: null,\n    labelsAboveOffsetx: 0,\n    labelsAboveOffsety: 0,\n    labelsAboveUnitsPre: '',\n    labelsAboveUnitsPost: '',\n    labelsAboveFormatter: null,\n    yaxis: true,\n    yaxisLinewidth: 1,\n    yaxisColor: 'black',\n    yaxisTickmarks: true,\n    yaxisTickmarksCount: null,\n    yaxisTickmarksLastTop: null,\n    yaxisTickmarksLastBottom: null,\n    yaxisTickmarksLength: 3,\n    yaxisScale: true,\n    yaxisScaleMin: 0,\n    yaxisScaleMax: null,\n    yaxisScaleUnitsPre: '',\n    yaxisScaleUnitsPost: '',\n    yaxisScaleDecimals: 0,\n    yaxisScalePoint: '.',\n    yaxisScaleThousand: ',',\n    yaxisScaleRound: false,\n    yaxisScaleFormatter: null,\n    yaxisLabelsSpecific: null,\n    yaxisLabelsCount: 5,\n    yaxisLabelsOffsetx: 0,\n    yaxisLabelsOffsety: 0,\n    yaxisLabelsHalign: null,\n    yaxisLabelsValign: null,\n    yaxisLabelsFont: null,\n    yaxisLabelsSize: null,\n    yaxisLabelsColor: null,\n    yaxisLabelsBold: null,\n    yaxisLabelsItalic: null,\n    yaxisLabelsPosition: 'edge',\n    yaxisPosition: 'left',\n    yaxisTitle: '',\n    yaxisTitleAccessible: null,\n    yaxisTitleBold: null,\n    yaxisTitleSize: null,\n    yaxisTitleFont: null,\n    yaxisTitleColor: null,\n    yaxisTitleItalic: null,\n    yaxisTitlePos: null,\n    yaxisTitleX: null,\n    yaxisTitleY: null,\n    yaxisTitleOffsetx: 0,\n    yaxisTitleOffsety: 0,\n    yaxisTitleHalign: null,\n    yaxisTitleValign: null,\n    yaxisTitleAccessible: null,\n    xaxis: true,\n    xaxisLinewidth: 1,\n    xaxisColor: 'black',\n    xaxisTickmarks: true,\n    xaxisTickmarksLength: 3,\n    xaxisTickmarksLastLeft: null,\n    xaxisTickmarksLastRight: null,\n    xaxisTickmarksCount: null,\n    xaxisLabels: null,\n    xaxisLabelsSize: null,\n    xaxisLabelsFont: null,\n    xaxisLabelsItalic: null,\n    xaxisLabelsBold: null,\n    xaxisLabelsColor: null,\n    xaxisLabelsFormattedDecimals: 0,\n    xaxisLabelsFormattedPoint: '.',\n    xaxisLabelsFormattedThousand: ',',\n    xaxisLabelsFormattedUnitsPre: '',\n    xaxisLabelsFormattedUnitsPost: '',\n    xaxisLabelsOffsetx: 0,\n    xaxisLabelsOffsety: 0,\n    xaxisLabelsHalign: null,\n    xaxisLabelsValign: null,\n    xaxisLabelsPosition: 'section',\n    xaxisLabelsSpecificAlign: 'left',\n    xaxisPosition: 'bottom',\n    xaxisLabelsAngle: 0,\n    xaxisTitle: '',\n    xaxisTitleBold: null,\n    xaxisTitleSize: null,\n    xaxisTitleFont: null,\n    xaxisTitleColor: null,\n    xaxisTitleItalic: null,\n    xaxisTitlePos: null,\n    xaxisTitleOffsetx: 0,\n    xaxisTitleOffsety: 0,\n    xaxisTitleX: null,\n    xaxisTitleY: null,\n    xaxisTitleHalign: null,\n    xaxisTitleValign: null,\n    textItalic: false,\n    textBold: false,\n    textColor: 'black',\n    textSize: 12,\n    textFont: 'Arial, Verdana, sans-serif',\n    textAccessible: true,\n    textAccessibleOverflow: 'visible',\n    textAccessiblePointerevents: false,\n    text: null,\n    title: '',\n    titleX: null,\n    titleY: null,\n    titleHalign: null,\n    titleValign: null,\n    titleBackground: null,\n    titleHpos: null,\n    titleVpos: null,\n    titleFont: null,\n    titleSize: null,\n    titleColor: null,\n    titleBold: null,\n    titleItalic: null,\n    titleOffsetx: 0,\n    titleOffsety: 0,\n    colorsStroke: 'rgba(0,0,0,0)',\n    colors: ['red', '#0f0', 'blue', 'pink', 'orange', 'cyan', 'black', 'white', 'green', 'magenta'],\n    colorsSequential: false,\n    colorsReverse: false,\n    grouping: 'grouped',\n    variant: 'bar',\n    variantSketchVerticals: true,\n    variantThreedXaxis: true,\n    variantThreedYaxis: true,\n    variantThreedAngle: 0.1,\n    variantThreedOffsetx: 10,\n    variantThreedOffsety: 5,\n    shadow: false,\n    shadowColor: '#aaa',\n    shadowOffsetx: 0,\n    shadowOffsety: 0,\n    shadowBlur: 15,\n    tooltips: null,\n    tooltipsEffect: 'slide',\n    tooltipsCssClass: 'RGraph_tooltip',\n    tooltipsCss: null,\n    tooltipsEvent: 'onclick',\n    tooltipsHighlight: true,\n    tooltipsHotspotXonly: false,\n    tooltipsFormattedThousand: ',',\n    tooltipsFormattedPoint: '.',\n    tooltipsFormattedDecimals: 0,\n    tooltipsFormattedUnitsPre: '',\n    tooltipsFormattedUnitsPost: '',\n    tooltipsFormattedKeyColors: null,\n    tooltipsFormattedKeyColorsShape: 'square',\n    tooltipsFormattedKeyLabels: [],\n    tooltipsFormattedListType: 'ul',\n    tooltipsFormattedListItems: null,\n    tooltipsFormattedTableHeaders: null,\n    tooltipsFormattedTableData: null,\n    tooltipsPointer: true,\n    tooltipsPositionStatic: true,\n    highlightStroke: 'rgba(0,0,0,0)',\n    highlightFill: 'rgba(255,255,255,0.7)',\n    key: null,\n    keyBackground: 'white',\n    keyPosition: 'graph',\n    keyShadow: false,\n    keyShadowColor: '#666',\n    keyShadowBlur: 3,\n    keyShadowOffsetx: 2,\n    keyShadowOffsety: 2,\n    keyPositionMarginBoxed: false,\n    keyPositionX: null,\n    keyPositionY: null,\n    keyInteractive: false,\n    keyInteractiveHighlightChartStroke: 'black',\n    keyInteractiveHighlightChartFill: 'rgba(255,255,255,0.7)',\n    keyInteractiveHighlightLabel: 'rgba(255,0,0,0.2)',\n    keyHalign: 'right',\n    keyColorShape: 'square',\n    keyRounded: true,\n    keyLinewidth: 1,\n    keyColors: null,\n    keyLabelsColor: null,\n    keyLabelsSize: null,\n    keyLabelsFont: null,\n    keyLabelsBold: null,\n    keyLabelsItalic: null,\n    keyLabelsOffsetx: 0,\n    keyLabelsOffsety: 0,\n    contextmenu: null,\n    crosshairs: false,\n    crosshairsColor: '#333',\n    crosshairsHline: true,\n    crosshairsVline: true,\n    linewidth: 1,\n    annotatable: false,\n    annotatableLinewidth: 1,\n    annotatableColor: 'black',\n    adjustable: false,\n    adjustableOnly: null,\n    beveled: false,\n    errorbars: false,\n    errorbarsColor: 'black',\n    errorbarsCapped: true,\n    errorbarsCappedWidth: 14,\n    errorbarsLinewidth: 1,\n    combinedEffect: null,\n    combinedEffectOptions: null,\n    combinedEffectCallback: null,\n    corners: 'square',\n    cornersRoundRadius: 10,\n    clearto: 'rgba(0,0,0,0)'\n  }; // Check for support\n\n  if (!this.canvas) {\n    alert('[BAR] No canvas support');\n    return;\n  } //\n  // Convert strings into numbers. Also converts undefined elements to null\n  //\n\n\n  data = RGraph.stringsToNumbers(data); //\n  // Determine whether the chart will contain stacked or grouped bars\n  //\n\n  for (var i = 0; i < data.length; ++i) {\n    if (typeof data[i] === 'object' && !RGraph.isNull(data[i])) {\n      this.stackedOrGrouped = true;\n    }\n  } //\n  // Create the dollar objects so that functions can be added to them\n  //\n\n\n  var linear_data = RGraph.arrayLinearize(data);\n\n  for (var i = 0; i < linear_data.length; ++i) {\n    this['$' + i] = {};\n  } // Store the data and set the orignal_data to it\n\n\n  this.data = data;\n  this.original_data = RGraph.arrayClone(data); // Used to store the coords of the bars\n\n  this.coords = [];\n  this.coords2 = [];\n  this.coordsText = []; //\n  // This linearises the data. Doing so can make it easier to pull\n  // out the appropriate data from tooltips\n  //\n\n  this.data_arr = RGraph.arrayLinearize(this.data); // Easy access to  properties and the path function\n\n  var properties = this.properties;\n  this.path = RGraph.pathObjectFunction; //\n  // \"Decorate\" the object with the generic effects if the effects library has been included\n  //\n\n  if (RGraph.Effects && typeof RGraph.Effects.decorate === 'function') {\n    RGraph.Effects.decorate(this);\n  } // Add the responsive method. This method resides in the common file.\n\n\n  this.responsive = RGraph.responsive; //\n  // A setter\n  //\n  // @param name  string The name of the property to set\n  // @param value mixed  The value of the property\n  //\n\n  this.set = function (name) {\n    var value = typeof arguments[1] === 'undefined' ? null : arguments[1]; // Some BC for the bevelled property\n\n    if (name === 'bevelled') {\n      name = 'beveled';\n    } // the number of arguments is only one and it's an\n    // object - parse it for configuration data and return.\n\n\n    if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (i in arguments[0]) {\n        if (typeof i === 'string') {\n          this.set(i, arguments[0][i]);\n        }\n      }\n\n      return this;\n    }\n\n    properties[name] = value;\n    return this;\n  }; //\n  // A getter\n  //\n  // @param name  string The name of the property to get\n  //\n\n\n  this.get = function (name) {\n    return properties[name];\n  }; //\n  // The function you call to draw the bar chart\n  //\n\n\n  this.draw = function () {\n    //\n    // Fire the onbeforedraw event\n    //\n    RGraph.fireCustomEvent(this, 'onbeforedraw'); // Translate half a pixel for antialiasing purposes - but only if it hasn't been\n    // done already\n    //\n    // MUST be the first thing done!\n    //\n\n    if (!this.canvas.__rgraph_aa_translated__) {\n      this.context.translate(0.5, 0.5);\n      this.canvas.__rgraph_aa_translated__ = true;\n    } // MUST be the second thing done!\n\n\n    if (typeof properties.backgroundImage === 'string') {\n      RGraph.drawBackgroundImage(this);\n    } //\n    // If the X axis is at the top then all the\n    // data-points should be negative\n    //\n\n\n    if (properties.xaxisPosition === 'top') {\n      for (var i = 0; i < this.data.length; ++i) {\n        if (typeof this.data[i] === 'object' && properties.grouping === 'grouped') {\n          for (var j = 0; j < this.data[i].length; ++j) {\n            this.data[i][j] = Math.abs(this.data[i][j]) * -1;\n          }\n        } else if (typeof this.data[i] === 'number') {\n          this.data[i] = Math.abs(this.data[i]) * -1;\n        }\n      }\n    } //\n    // If the chart is 3d then angle it\n    //\n\n\n    if (properties.variant === '3d') {\n      if (properties.textAccessible) {// Nada\n      } else {\n        this.context.setTransform(1, properties.variantThreedAngle, 0, 1, 0.5, 0.5);\n      }\n    } //\n    // Parse the colors. This allows for simple gradient syntax\n    //\n\n\n    if (!this.colorsParsed) {\n      this.parseColors(); // Don't want to do this again\n\n      this.colorsParsed = true;\n    } //\n    // Make the margins easy ro access\n    //\n\n\n    this.marginLeft = properties.marginLeft;\n    this.marginRight = properties.marginRight;\n    this.marginTop = properties.marginTop;\n    this.marginBottom = properties.marginBottom; //\n    // Check for tooltips and alert the user that they're not supported\n    // with pyramid charts\n    //\n\n    if ((properties.variant == 'pyramid' || properties.variant == 'dot') && typeof properties.tooltips == 'object' && properties.tooltips && properties.tooltips.length > 0) {\n      alert('[BAR] (' + this.id + ') Sorry, tooltips are not supported with dot or pyramid charts');\n    } //\n    // Stop the coords arrays from growing uncontrollably\n    //\n\n\n    this.coords = [];\n    this.coords2 = [];\n    this.coordsText = []; //\n    // Work out a few things. They need to be here because they depend on things you can change before you\n    // call Draw() but after you instantiate the object\n    //\n\n    this.max = 0;\n    this.grapharea = this.canvas.height - this.marginTop - this.marginBottom;\n    this.halfgrapharea = this.grapharea / 2;\n    this.halfTextHeight = properties.textSize / 2; // Now draw the background on to the main canvas\n\n    RGraph.Background.draw(this); //If it's a sketch chart variant, draw the axes first\n    //if (properties.variant == 'sketch') {\n    //    this.drawAxes();\n    //    this.drawbars();\n    //} else {\n\n    this.drawbars();\n    this.drawAxes(); //}\n\n    this.drawLabels(); //\n    // Draw the bevel if required\n    //\n\n    if (properties.beveled || properties.beveled) {\n      this.drawBevel();\n    } // Draw the key if necessary\n\n\n    if (properties.key && properties.key.length) {\n      RGraph.drawKey(this, properties.key, properties.colors);\n    } //\n    // Setup the context menu if required\n    //\n\n\n    if (properties.contextmenu) {\n      RGraph.showContext(this);\n    } //\n    // Draw errorbars\n    //\n\n\n    if (properties.errorbars) {\n      this.drawErrorbars();\n    } //\n    // Draw \"in graph\" labels\n    //\n\n\n    if (properties.labelsIngraph) {\n      RGraph.drawInGraphLabels(this);\n    } //\n    // Add custom text thats specified\n    //  \n\n\n    RGraph.addCustomText(this); //\n    // This installs the event listeners\n    //\n\n    RGraph.installEventListeners(this); //\n    // Fire the onfirstdraw event\n    //\n\n    if (this.firstDraw) {\n      this.firstDraw = false;\n      RGraph.fireCustomEvent(this, 'onfirstdraw');\n      this.firstDrawFunc();\n    } //\n    // Fire the RGraph draw event\n    //\n\n\n    RGraph.fireCustomEvent(this, 'ondraw');\n    return this;\n  }; //\n  // Used in chaining. Runs a function there and then - not waiting for\n  // the events to fire (eg the onbeforedraw event)\n  //\n  // @param function func The function to execute\n  //\n\n\n  this.exec = function (func) {\n    func(this);\n    return this;\n  }; //\n  // Draws the charts axes\n  //\n\n\n  this.drawAxes = function () {\n    if (RGraph.ISSAFARI == -1) {\n      this.context.lineCap = 'square';\n    } //\n    // If the xaxisLabels option is a string then turn it\n    // into an array.\n    //\n\n\n    if (properties.xaxisLabels && properties.xaxisLabels.length) {\n      if (typeof properties.xaxisLabels === 'string') {\n        properties.xaxisLabels = RGraph.arrayPad({\n          array: [],\n          length: this.data.length,\n          value: properties.xaxisLabels\n        });\n      } // Label substitution\n      //\n\n\n      for (var i = 0; i < properties.xaxisLabels.length; ++i) {\n        properties.xaxisLabels[i] = RGraph.labelSubstitution({\n          object: this,\n          text: properties.xaxisLabels[i],\n          index: i,\n          value: this.data[i],\n          decimals: properties.xaxisLabelsFormattedDecimals || 0,\n          unitsPre: properties.xaxisLabelsFormattedUnitsPre || '',\n          unitsPost: properties.xaxisLabelsFormattedUnitsPost || '',\n          thousand: properties.xaxisLabelsFormattedThousand || ',',\n          point: properties.xaxisLabelsFormattedPoint || '.'\n        });\n      }\n    } //\n    // The new common X axis drawing function\n\n\n    RGraph.drawXAxis(this); //\n    // The new common Y axis drawing function\n\n    RGraph.drawYAxis(this);\n  }; //\n  // Draws the bars\n  //\n\n\n  this.drawbars = function () {\n    this.context.lineWidth = properties.linewidth;\n    this.context.strokeStyle = properties.colorsStroke;\n    this.context.fillStyle = properties.colors[0];\n    var prevX = 0,\n        prevY = 0,\n        decimals = properties.yaxisScaleDecimals; //\n    // Work out the max value\n    //\n\n    if (properties.yaxisScaleMax) {\n      this.scale2 = RGraph.getScale({\n        object: this,\n        options: {\n          'scale.max': properties.yaxisScaleMax,\n          'scale.strict': properties.yaxisScaleRound ? false : true,\n          'scale.min': properties.yaxisScaleMin,\n          'scale.thousand': properties.yaxisScaleThousand,\n          'scale.point': properties.yaxisScalePoint,\n          'scale.decimals': properties.yaxisScaleDecimals,\n          'scale.labels.count': properties.yaxisLabelsCount,\n          'scale.round': properties.yaxisScaleRound,\n          'scale.units.pre': properties.yaxisScaleUnitsPre,\n          'scale.units.post': properties.yaxisScaleUnitsPost,\n          'scale.formatter': properties.yaxisScaleFormatter\n        }\n      });\n    } else {\n      //\n      // If errorbars are given as a number then convert the nuumber to an\n      // array.\n      //\n      var errorbars = properties.errorbars;\n\n      if (typeof errorbars === 'number') {\n        var value = errorbars;\n        properties.errorbars = [];\n\n        for (var i = 0; i < this.data.length; ++i) {\n          if (typeof this.data[i] === 'number') {\n            properties.errorbars.push([value, null]);\n          } else if (typeof this.data[i] === 'object' && !RGraph.isNull(this.data[i])) {\n            for (var j = 0; j < this.data[i].length; ++j) {\n              properties.errorbars.push([value, null]);\n            }\n          }\n        }\n\n        errorbars = properties.errorbars;\n      }\n\n      for (i = 0; i < this.data.length; ++i) {\n        if (typeof this.data[i] == 'object') {\n          var value = properties.grouping === 'grouped' ? Number(RGraph.arrayMax(this.data[i], true)) : Number(RGraph.arraySum(this.data[i]));\n        } else {\n          var value = Number(this.data[i]);\n        }\n\n        this.max = Math.max(Math.abs(this.max), Math.abs(value) + Number(typeof properties.errorbars === 'object' && typeof properties.errorbars[i] === 'object' && !RGraph.isNull(properties.errorbars[i]) && typeof properties.errorbars[i][0] === 'number' ? properties.errorbars[i][0] : 0));\n      }\n\n      this.scale2 = RGraph.getScale({\n        object: this,\n        options: {\n          'scale.max': this.max,\n          'scale.min': properties.yaxisScaleMin,\n          'scale.thousand': properties.yaxisScaleThousand,\n          'scale.point': properties.yaxisScalePoint,\n          'scale.decimals': properties.yaxisScaleDecimals,\n          'scale.labels.count': properties.yaxisLabelsCount,\n          'scale.round': properties.yaxisScaleRound,\n          'scale.units.pre': properties.yaxisScaleUnitsPre,\n          'scale.units.post': properties.yaxisScaleUnitsPost,\n          'scale.formatter': properties.yaxisScaleFormatter\n        }\n      });\n      this.max = this.scale2.max;\n    } //\n    // if the chart is adjustable fix the scale so that it doesn't change.\n    //\n\n\n    if (properties.adjustable && !properties.yaxisScaleMax) {\n      this.set('yaxisScaleMax', this.scale2.max);\n    } //\n    // Draw horizontal bars here\n    //\n\n\n    if (properties.backgroundHbars && properties.backgroundHbars.length > 0) {\n      RGraph.drawBars(this);\n    }\n\n    var variant = properties.variant; //\n    // Draw the 3D axes is necessary\n    //\n\n    if (variant === '3d') {\n      RGraph.draw3DAxes(this);\n    } //\n    // Get the variant once, and draw the bars, be they regular, stacked or grouped\n    //\n    // Get these variables outside of the loop\n\n\n    var xaxispos = properties.xaxisPosition,\n        width = (this.canvas.width - this.marginLeft - this.marginRight) / this.data.length,\n        orig_height = height,\n        hmargin = properties.marginInner,\n        shadow = properties.shadow,\n        shadowColor = properties.shadowColor,\n        shadowBlur = properties.shadowBlur,\n        shadowOffsetX = properties.shadowOffsetx,\n        shadowOffsetY = properties.shadowOffsety,\n        strokeStyle = properties.colorsStroke,\n        colors = properties.colors,\n        sequentialColorIndex = 0;\n    var height; //\n    // Loop through the data\n    //\n\n    for (i = 0, len = this.data.length; i < len; i += 1) {\n      // Work out the height\n      //The width is up outside the loop\n      if (RGraph.arraySum(this.data[i]) < 0) {\n        var height = (RGraph.arraySum(this.data[i]) + this.scale2.min) / (this.scale2.max - this.scale2.min);\n      } else {\n        var height = (RGraph.arraySum(this.data[i]) - this.scale2.min) / (this.scale2.max - this.scale2.min);\n      }\n\n      height *= Math.abs(this.getYCoord(this.scale2.max) - this.getYCoord(this.scale2.min));\n      var x = i * width + this.marginLeft;\n      var y = xaxispos == 'center' ? (this.canvas.height - this.marginTop - this.marginBottom) / 2 + this.marginTop - height : this.canvas.height - height - this.marginBottom; // xaxispos is top\n\n      if (xaxispos == 'top') {\n        y = this.marginTop;\n      } // Account for negative lengths - Some browsers don't like a negative value\n\n\n      if (height < 0) {\n        y += height;\n        height = Math.abs(height);\n      } //\n      // Turn on the shadow if need be\n      //\n\n\n      if (shadow) {\n        this.context.shadowColor = shadowColor;\n        this.context.shadowBlur = shadowBlur;\n        this.context.shadowOffsetX = shadowOffsetX;\n        this.context.shadowOffsetY = shadowOffsetY;\n      } //\n      // Draw the bar\n      //\n\n\n      this.context.beginPath();\n\n      if (typeof this.data[i] == 'number') {\n        // If the Y axis is offset change the bar start (the top of the bar)\n        if (xaxispos === 'bottom' && properties.yaxisScaleMin < 0) {\n          if (this.data[i] >= 0) {\n            height = Math.abs(this.getYCoord(0) - this.getYCoord(this.data[i]));\n          } else {\n            y = this.getYCoord(0);\n            height = Math.abs(this.getYCoord(0) - this.getYCoord(this.data[i]));\n          }\n        }\n\n        var barWidth = width - 2 * hmargin; //\n        // Check for a negative bar width\n        //\n\n        if (barWidth < 0) {\n          alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n        } // Set the fill color\n\n\n        this.context.strokeStyle = strokeStyle;\n        this.context.fillStyle = colors[0]; //\n        // Sequential colors\n        //\n\n        if (properties.colorsSequential) {\n          this.context.fillStyle = colors[i];\n        }\n\n        if (variant == 'sketch') {\n          this.context.lineCap = 'round';\n          var sketchOffset = 3;\n          this.context.beginPath();\n          this.context.strokeStyle = colors[0]; //\n          // Sequential colors\n          //\n\n          if (properties.colorsSequential) {\n            this.context.strokeStyle = colors[i];\n          } // Left side\n\n\n          this.context.moveTo(x + hmargin + 2, y + height - 2);\n          this.context.lineTo(x + hmargin - 1, y - 4); // The top\n\n          this.context.moveTo(x + hmargin - 3, y + -2 + (this.data[i] < 0 ? height : 0));\n          this.context.quadraticCurveTo(x + hmargin + (width - hmargin - hmargin) / 4, y + 0 + (this.data[i] < 0 ? height : 0) + (this.data[i] > 0 ? 10 : -10), x + hmargin + width + -1 - hmargin - hmargin, y + 0 + (this.data[i] < 0 ? height : 0)); // The right side\n\n          this.context.moveTo(x + hmargin + width - 5 - hmargin - hmargin, y - 5);\n          this.context.lineTo(x + hmargin + width - 3 - hmargin - hmargin, y + height - 3); // Draw the inner-bar verticals\n\n          if (properties.variantSketchVerticals) {\n            for (var r = 0.2; r <= 0.8; r += 0.2) {\n              this.context.moveTo(x + hmargin + (width - hmargin - hmargin) * r, y - 1);\n              this.context.lineTo(x + hmargin + (width - hmargin - hmargin) * r, y + height + (r == 0.2 ? 1 : -2));\n            }\n          }\n\n          this.context.stroke(); // Regular bar\n        } else if (variant == 'bar' || variant == '3d' || variant == 'glass' || variant == 'bevel') {\n          if (variant == 'glass') {\n            RGraph.roundedRect({\n              context: this.context,\n              x: x + hmargin,\n              y: y,\n              width: barWidth,\n              height: height,\n              radius: 5,\n              roundtl: this.data[i] > 0,\n              roundtr: this.data[i] > 0,\n              roundbl: this.data[i] < 0,\n              roundbr: this.data[i] < 0\n            });\n            this.context.stroke();\n            this.context.fill();\n          } else {\n            // On 9th April 2013 these two were swapped around so that the stroke happens SECOND so that any\n            // shadow that is cast by the fill does not overwrite the stroke\n            // Why is this here?\n            //this.path(\n            //    'b r % % % % f',\n            //    x + hmargin, y, barWidth, height\n            //);\n            // Turn the shadow off so that the stroke doesn't cast any \"extra\" shadow\n            // that would show inside the bar\n            //\n            // 31/07/21 Removed as regular bar charts weren't showing shadows\n            //\n            //RGraph.noShadow(this);\n            if (properties.corners === 'round') {\n              this.context.beginPath();\n              this.context.lineCap = 'miter';\n              this.context.lineJoin = 'square';\n              this.data[i] < 0 ? this.roundedCornersRectNegative(x + hmargin, y, barWidth, height) : this.roundedCornersRect(x + hmargin, y, barWidth, height);\n              this.context.stroke();\n              this.context.fill();\n            } else {\n              this.context.beginPath();\n              this.context.lineJoin = 'miter';\n              this.context.lineCap = 'square';\n              this.context.rect(x + hmargin, y, barWidth, height);\n              this.context.stroke();\n              this.context.fill();\n            }\n          } // 3D effect\n\n\n          if (variant == '3d') {\n            var prevStrokeStyle = this.context.strokeStyle;\n            var prevFillStyle = this.context.fillStyle; // Draw the top (if the value is positive - otherwise there's no point)\n\n            if (this.data[i] >= 0) {\n              this.context.beginPath();\n              this.context.moveTo(x + hmargin, y);\n              this.context.lineTo(x + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n              this.context.lineTo(x + hmargin + properties.variantThreedOffsetx + barWidth, y - properties.variantThreedOffsety);\n              this.context.lineTo(x + hmargin + barWidth, y);\n              this.context.closePath();\n              this.context.stroke();\n              this.context.fill();\n            } // Draw the right hand side\n\n\n            this.context.beginPath();\n            this.context.moveTo(x + hmargin + barWidth, y);\n            this.context.lineTo(x + hmargin + barWidth + properties.variantThreedOffsetx, this.data[i] < 0 && xaxispos === 'bottom' ? this.getYCoord(0) : this.data[i] < 0 && y - properties.variantThreedOffsety < this.marginTop + this.halfgrapharea ? this.marginTop + this.halfgrapharea : y - properties.variantThreedOffsety);\n            this.context.lineTo(x + hmargin + barWidth + properties.variantThreedOffsetx, this.data[i] < 0 && y - properties.variantThreedOffsety + height < this.marginTop + this.getYCoord(0) ? this.getYCoord(this.data[i]) - properties.variantThreedOffsety : this.data[i] > 0 ? y - properties.variantThreedOffsety + height : Math.min(y - properties.variantThreedOffsety + height, this.canvas.height - this.marginBottom));\n            this.context.lineTo(x + hmargin + barWidth, y + height);\n            this.context.closePath();\n            this.context.stroke();\n            this.context.fill(); // Draw the lighter top section\n\n            if (this.data[i] > 0) {\n              this.context.beginPath();\n              this.context.fillStyle = 'rgba(255,255,255,0.5)';\n              this.context.moveTo(x + hmargin, y);\n              this.context.lineTo(x + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n              this.context.lineTo(x + hmargin + properties.variantThreedOffsetx + barWidth, y - properties.variantThreedOffsety);\n              this.context.lineTo(x + hmargin + barWidth, y);\n              this.context.lineTo(x + hmargin, y);\n              this.context.closePath();\n              this.context.stroke();\n              this.context.fill();\n            } // Draw the darker right side section\n\n\n            this.context.beginPath();\n            this.context.fillStyle = 'rgba(0,0,0,0.4)'; // TL\n\n            this.context.moveTo(x + hmargin + barWidth, y); // TR\n\n            this.context.lineTo(x + hmargin + barWidth + properties.variantThreedOffsetx, this.data[i] < 0 && xaxispos === 'bottom' ? this.getYCoord(0) : this.data[i] < 0 && y - properties.variantThreedOffsety < this.marginTop + this.halfgrapharea ? this.marginTop + this.halfgrapharea : y - properties.variantThreedOffsety); // BR\n\n            this.context.lineTo(x + hmargin + barWidth + properties.variantThreedOffsetx, this.data[i] < 0 && y - properties.variantThreedOffsety + height < this.getYCoord(0) ? this.getYCoord(0) : this.data[i] > 0 ? y - properties.variantThreedOffsety + height : Math.min(y - properties.variantThreedOffsety + height, this.canvas.height - this.marginBottom)); // BL\n\n            this.context.lineTo(x + hmargin + barWidth, y + height);\n            this.context.lineTo(x + hmargin + barWidth, y);\n            this.context.closePath();\n            this.context.stroke();\n            this.context.fill();\n            this.context.strokeStyle = prevStrokeStyle;\n            this.context.fillStyle = prevFillStyle; // Glass variant\n          } else if (variant == 'glass') {\n            var grad = this.context.createLinearGradient(x + hmargin, y, x + hmargin + barWidth / 2, y);\n            grad.addColorStop(0, 'rgba(255,255,255,0.9)');\n            grad.addColorStop(1, 'rgba(255,255,255,0.5)');\n            this.context.beginPath();\n            this.context.fillStyle = grad;\n            this.context.rect(x + hmargin + 3, y + (this.data[i] > 0 ? 3 : 0), barWidth / 2 - 2, height - 2);\n            this.context.fill();\n          } // Dot chart\n\n        } else if (variant == 'dot') {\n          this.context.beginPath();\n          this.context.strokeStyle = this.properties.colors[0];\n          this.context.moveTo(x + width / 2, y);\n          this.context.lineTo(x + width / 2, y + height);\n          this.context.stroke();\n          this.context.beginPath();\n          this.context.fillStyle = this.properties.colors[i];\n          this.context.arc(x + width / 2, y + (this.data[i] > 0 ? 0 : height), 2, 0, 6.28, 0); // Set the colour for the dots\n\n          this.context.fillStyle = properties.colors[0]; //\n          // Sequential colors\n          //\n\n          if (properties.colorsSequential) {\n            this.context.fillStyle = colors[i];\n          }\n\n          this.context.stroke();\n          this.context.fill(); // Unknown variant type\n        } else {\n          alert('[BAR] Warning! Unknown variant: ' + variant);\n        }\n\n        this.coords.push([x + hmargin, y, width - 2 * hmargin, height]);\n\n        if (typeof this.coords2[i] == 'undefined') {\n          this.coords2[i] = [];\n        }\n\n        this.coords2[i].push([x + hmargin, y, width - 2 * hmargin, height]); //\n        // Stacked bar\n        //\n      } else if (this.data[i] && typeof this.data[i] == 'object' && properties.grouping == 'stacked') {\n        if (this.scale2.min) {\n          alert(\"[ERROR] Stacked Bar charts with a Y min are not supported\");\n        }\n\n        var barWidth = width - 2 * hmargin;\n        var redrawCoords = []; // Necessary to draw if the shadow is enabled\n\n        var startY = 0;\n        var dataset = this.data[i]; //\n        // Check for a negative bar width\n        //\n\n        if (barWidth < 0) {\n          alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n        }\n\n        for (j = 0; j < dataset.length; ++j) {\n          // Stacked bar chart and X axis pos in the middle - poitless since negative values are not permitted\n          if (xaxispos == 'center') {\n            alert(\"[BAR] It's pointless having the X axis position at the center on a stacked bar chart.\");\n            return;\n          } // Negative values not permitted for the stacked chart\n\n\n          if (this.data[i][j] < 0) {\n            alert('[BAR] Negative values are not permitted with a stacked bar chart. Try a grouped one instead.');\n            return;\n          } //\n          // Set the fill and stroke colors\n          //\n\n\n          this.context.strokeStyle = strokeStyle;\n          this.context.fillStyle = colors[j];\n\n          if (properties.colorsReverse) {\n            this.context.fillStyle = colors[this.data[i].length - j - 1];\n          }\n\n          if (properties.colorsSequential && colors[sequentialColorIndex]) {\n            this.context.fillStyle = colors[sequentialColorIndex++];\n          } else if (properties.colorsSequential) {\n            this.context.fillStyle = colors[sequentialColorIndex - 1];\n          }\n\n          var height = dataset[j] / this.scale2.max * (this.canvas.height - this.marginTop - this.marginBottom); // If the X axis pos is in the center, we need to half the  height\n\n          if (xaxispos == 'center') {\n            height /= 2;\n          }\n\n          var totalHeight = RGraph.arraySum(dataset) / this.scale2.max * (this.canvas.height - hmargin - this.marginTop - this.marginBottom); //\n          // Store the coords for tooltips\n          //\n\n          this.coords.push([x + hmargin, y, width - 2 * hmargin, height]);\n\n          if (typeof this.coords2[i] == 'undefined') {\n            this.coords2[i] = [];\n          }\n\n          this.coords2[i].push([x + hmargin, y, width - 2 * hmargin, height]);\n\n          if (height > 0) {\n            // TODO Handle xaxisPosition=top here\n            if (j === 0 && properties.corners === 'round' && properties.xaxisPosition === 'bottom') {\n              this.context.beginPath();\n              this.context.lineCap = 'miter';\n              this.context.lineJoin = 'square';\n              this.roundedCornersRect(x + hmargin, y, width - 2 * hmargin, height);\n              this.context.stroke();\n              this.context.fill();\n            } else if (j === dataset.length - 1 && properties.corners === 'round' && properties.xaxisPosition === 'top') {\n              this.context.beginPath();\n              this.context.lineCap = 'miter';\n              this.context.lineJoin = 'square';\n              this.roundedCornersRectNegative(x + hmargin, y, width - 2 * hmargin, height);\n              this.context.stroke();\n              this.context.fill();\n            } else {\n              this.path('b lj % lc % r % % % % s % f %', 'miter', 'square', x + hmargin, y, width - 2 * hmargin, height, this.context.strokeStyle, this.context.fillStyle);\n            }\n          }\n\n          if (j == 0) {\n            var startY = y;\n            var startX = x;\n          } //\n          // Store the redraw coords if the shadow is enabled\n          //\n\n\n          if (shadow) {\n            redrawCoords.push([x + hmargin, y, width - 2 * hmargin, height, this.context.fillStyle]);\n          } //\n          // Stacked 3D effect\n          //\n\n\n          if (variant == '3d') {\n            var prevFillStyle = this.context.fillStyle;\n            var prevStrokeStyle = this.context.strokeStyle; // Draw the top side\n\n            if (j == 0) {\n              this.context.beginPath();\n              this.context.moveTo(startX + hmargin, y);\n              this.context.lineTo(startX + properties.variantThreedOffsetx + hmargin, y - properties.variantThreedOffsety);\n              this.context.lineTo(startX + properties.variantThreedOffsetx + barWidth + hmargin, y - properties.variantThreedOffsety);\n              this.context.lineTo(startX + barWidth + hmargin, y);\n              this.context.closePath();\n              this.context.fill();\n              this.context.stroke();\n            } // Draw the side section\n\n\n            this.context.beginPath();\n            this.context.moveTo(startX + barWidth + hmargin, y);\n            this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n            this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety + height);\n            this.context.lineTo(startX + barWidth + hmargin, y + height);\n            this.context.closePath();\n            this.context.fill();\n            this.context.stroke(); // Draw the lighter top side\n\n            if (j == 0) {\n              this.context.fillStyle = 'rgba(255,255,255,0.5)';\n              this.context.beginPath();\n              this.context.moveTo(startX + hmargin, y);\n              this.context.lineTo(startX + properties.variantThreedOffsetx + hmargin, y - properties.variantThreedOffsety);\n              this.context.lineTo(startX + properties.variantThreedOffsetx + barWidth + hmargin, y - properties.variantThreedOffsety);\n              this.context.lineTo(startX + barWidth + hmargin, y);\n              this.context.closePath();\n              this.context.fill();\n              this.context.stroke();\n            } // Draw the darker side section\n\n\n            this.context.fillStyle = 'rgba(0,0,0,0.4)';\n            this.context.beginPath();\n            this.context.moveTo(startX + barWidth + hmargin, y);\n            this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n            this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety + height);\n            this.context.lineTo(startX + barWidth + hmargin, y + height);\n            this.context.closePath();\n            this.context.fill();\n            this.context.stroke();\n            this.context.strokeStyle = prevStrokeStyle;\n            this.context.fillStyle = prevFillStyle;\n          }\n\n          y += height;\n        } //\n        // Redraw the bars if the shadow is enabled due to hem being drawn from the bottom up, and the\n        // shadow spilling over to higher up bars\n        //\n\n\n        if (shadow) {\n          RGraph.noShadow(this);\n\n          for (k = 0; k < redrawCoords.length; ++k) {\n            this.context.strokeStyle = strokeStyle;\n            this.context.fillStyle = redrawCoords[k][4];\n            this.context.strokeRect(redrawCoords[k][0], redrawCoords[k][1], redrawCoords[k][2], redrawCoords[k][3]);\n            this.context.fillRect(redrawCoords[k][0], redrawCoords[k][1], redrawCoords[k][2], redrawCoords[k][3]);\n            this.context.stroke();\n            this.context.fill();\n          } // Reset the redraw coords to be empty\n\n\n          redrawCoords = [];\n        } //\n        // Grouped bar\n        //\n\n      } else if (this.data[i] && typeof this.data[i] == 'object' && properties.grouping == 'grouped') {\n        var redrawCoords = [];\n        this.context.lineWidth = properties.linewidth;\n\n        for (j = 0; j < this.data[i].length; ++j) {\n          // Set the fill and stroke colors\n          this.context.strokeStyle = strokeStyle;\n          this.context.fillStyle = colors[j]; //\n          // Sequential colors\n          //\n\n          if (properties.colorsSequential && colors[sequentialColorIndex]) {\n            this.context.fillStyle = colors[sequentialColorIndex++];\n          } else if (properties.colorsSequential) {\n            this.context.fillStyle = colors[sequentialColorIndex - 1];\n          }\n\n          var individualBarWidth = (width - 2 * hmargin) / this.data[i].length;\n          var height = (this.data[i][j] + (this.data[i][j] < 0 ? this.scale2.min : -1 * this.scale2.min)) / (this.scale2.max - this.scale2.min) * (this.canvas.height - this.marginTop - this.marginBottom);\n          var groupedMargin = properties.marginInnerGrouped;\n          var startX = x + hmargin + j * individualBarWidth; //\n          // Check for a negative bar width\n          //\n\n          if (individualBarWidth < 0) {\n            alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n          } // If the X axis pos is in the center, we need to half the  height\n\n\n          if (xaxispos == 'center') {\n            height /= 2;\n          } //\n          // Determine the start positioning for the bar\n          //\n\n\n          if (xaxispos == 'top') {\n            var startY = this.marginTop;\n            var height = Math.abs(height);\n          } else if (xaxispos == 'center') {\n            var startY = this.marginTop + this.grapharea / 2 - height;\n          } else {\n            var startY = this.getYCoord(0); //this.canvas.height - this.marginBottom - height;\n\n            var height = Math.abs(Math.abs(this.getYCoord(this.data[i][j])) - this.getYCoord(0));\n\n            if (this.data[i][j] >= 0) {\n              startY -= height;\n            }\n          }\n\n          if (properties.corners === 'round') {\n            this.context.beginPath();\n            this.context.lineCap = 'miter';\n            this.context.lineJoin = 'square';\n            this.data[i][j] < 0 ? this.roundedCornersRectNegative(startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height) : this.roundedCornersRect(startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height);\n            this.context.stroke();\n            this.context.fill();\n          } else {\n            this.context.beginPath();\n            this.context.lineJoin = 'miter';\n            this.context.lineCap = 'square';\n            this.context.rect(startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height);\n            this.context.stroke();\n            this.context.fill();\n          }\n\n          y += height; //\n          // Grouped 3D effect\n          //\n\n          if (variant == '3d') {\n            var prevFillStyle = this.context.fillStyle;\n            var prevStrokeStyle = this.context.strokeStyle;\n            var hmarginGrouped = properties.marginInnerGrouped; // Draw the top side\n\n            if (this.data[i][j] >= 0) {\n              this.context.beginPath();\n              this.context.moveTo(startX + hmarginGrouped, startY);\n              this.context.lineTo(startX + hmarginGrouped + properties.variantThreedOffsetx, startY - properties.variantThreedOffsety);\n              this.context.lineTo(startX + properties.variantThreedOffsetx + individualBarWidth - hmarginGrouped, startY - properties.variantThreedOffsety);\n              this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY);\n              this.context.closePath();\n              this.context.fill();\n              this.context.stroke();\n            } // Draw the side section\n\n\n            this.context.beginPath();\n            this.context.moveTo(startX + individualBarWidth - hmarginGrouped - 1, startY);\n            this.context.lineTo(startX + individualBarWidth - hmarginGrouped + properties.variantThreedOffsetx, this.data[i][j] < 0 ? this.getYCoord(0) + Math.abs(height) - properties.variantThreedOffsety - (properties.xaxisPosition === 'center' ? 0 : Math.abs(height) - this.properties.variantThreedOffsety) : this.getYCoord(0) - height - properties.variantThreedOffsety);\n            this.context.lineTo(startX + individualBarWidth - hmarginGrouped + properties.variantThreedOffsetx, this.data[i][j] < 0 && startY + height - properties.variantThreedOffsety < this.getYCoord(0) ? this.getYCoord(0) : startY + height - properties.variantThreedOffsety);\n            this.context.lineTo(startX + individualBarWidth - hmarginGrouped - 1, startY + height);\n            this.context.closePath();\n            this.context.fill();\n            this.context.stroke(); // Draw the lighter top side - but only if the current value is positive\n\n            if (this.data[i][j] >= 0) {\n              this.context.fillStyle = 'rgba(255,255,255,0.5)';\n              this.context.beginPath(); // BL\n\n              this.context.moveTo(startX + hmarginGrouped, startY); // BR\n\n              this.context.lineTo(startX + hmarginGrouped + properties.variantThreedOffsetx, startY - properties.variantThreedOffsety); // TR\n\n              this.context.lineTo(startX + properties.variantThreedOffsetx + individualBarWidth - hmarginGrouped, startY - properties.variantThreedOffsety); // TL\n\n              this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY);\n              this.context.closePath();\n              this.context.fill();\n              this.context.stroke();\n            } // Draw the darker side section\n\n\n            this.context.fillStyle = 'rgba(0,0,0,0.4)';\n            this.context.beginPath();\n            this.context.moveTo(startX + individualBarWidth - hmarginGrouped, startY);\n            this.context.lineTo(startX + individualBarWidth + properties.variantThreedOffsetx - hmarginGrouped, this.data[i][j] < 0 ? this.getYCoord(0) + Math.abs(height) - properties.variantThreedOffsety - (properties.xaxisPosition === 'center' ? 0 : Math.abs(height) - this.properties.variantThreedOffsety) : this.getYCoord(0) - height - properties.variantThreedOffsety);\n            this.context.lineTo(startX + individualBarWidth + properties.variantThreedOffsetx - hmarginGrouped, +this.data[i][j] < 0 && startY + height - 5 < this.getYCoord(0) ? height > this.properties.variantThreedOffsety ? this.getYCoord(0) + height - this.properties.variantThreedOffsety : this.getYCoord(0) : startY + height - properties.variantThreedOffsety); // TL corner\n\n            this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY + height);\n            this.context.closePath();\n            this.context.fill();\n            this.context.stroke();\n            this.context.strokeStyle = prevStrokeStyle;\n            this.context.fillStyle = prevFillStyle;\n          }\n\n          if (height < 0) {\n            height = Math.abs(height);\n            startY = startY - height;\n          }\n\n          this.coords.push([startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height]);\n\n          if (typeof this.coords2[i] == 'undefined') {\n            this.coords2[i] = [];\n          }\n\n          this.coords2[i].push([startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height]); // Facilitate shadows going to the left\n\n          if (properties.shadow) {\n            redrawCoords.push([startX + groupedMargin, startY, individualBarWidth - 2 * groupedMargin, height, this.context.fillStyle]);\n          }\n        } //\n        // Redraw the bar if shadows are going to the left\n        //\n\n\n        if (redrawCoords.length) {\n          RGraph.noShadow(this);\n          this.context.lineWidth = properties.linewidth;\n          this.context.beginPath();\n\n          for (var j = 0; j < redrawCoords.length; ++j) {\n            this.context.fillStyle = redrawCoords[j][4];\n            this.context.strokeStyle = properties.colorsStroke;\n            this.context.fillRect(redrawCoords[j][0], redrawCoords[j][1], redrawCoords[j][2], redrawCoords[j][3]);\n            this.context.strokeRect(redrawCoords[j][0], redrawCoords[j][1], redrawCoords[j][2], redrawCoords[j][3]);\n          }\n\n          this.context.fill();\n          this.context.stroke();\n          redrawCoords = [];\n        }\n      } else {\n        this.coords.push([]);\n      }\n\n      this.context.closePath();\n    } // If 3D, redraw the right hand Y axis\n\n\n    if (properties.variant === '3d' && properties.yaxisPosition === 'right') {\n      RGraph.draw3DYAxis(this);\n    } //\n    // Turn off any shadow\n    //\n\n\n    RGraph.noShadow(this);\n  }; //\n  // Draws the labels for the graph. As of version 5.2 this no longer\n  // draws the X axis labels\n  //\n\n\n  this.drawLabels = function () {\n    //\n    // Draw above labels - nothing else todo here now that there\n    // are common drawXAxis() and drawYAxis() functions.\n    //\n    this.drawAboveLabels();\n  }; //\n  // Not used by the class during creating the graph, but is used by event handlers\n  // to get the coordinates (if any) of the selected bar\n  //\n  // @param object e The event object\n  // @param object   OPTIONAL You can pass in the bar object instead of the\n  //                          function using \"this\"\n  //\n\n\n  this.getShape = function (e) {\n    // This facilitates you being able to pass in the bar object as a parameter instead of\n    // the function getting it from itself\n    var obj = arguments[1] ? arguments[1] : this;\n    var mouseXY = RGraph.getMouseXY(e),\n        mouseX = mouseXY[0],\n        mouseY = mouseXY[1],\n        canvas = obj.canvas,\n        context = obj.context,\n        coords = obj.coords;\n\n    for (var i = 0, len = coords.length; i < len; i += 1) {\n      if (obj.coords[i].length == 0) {\n        continue;\n      }\n\n      var left = coords[i][0],\n          top = coords[i][1],\n          width = coords[i][2],\n          height = coords[i][3]; // Old way of testing\n      //if (mouseX >= left && mouseX <= (left + width) && mouseY >= top && mouseY <= (top + height)) {\n      // Recreate the path/rectangle so that it can be tested\n      //  ** DO NOT STROKE OR FILL IT **\n\n      if (properties.tooltipsHotspotXonly) {\n        this.path('b r % % % %', left, this.marginTop, width, this.canvas.height - this.marginBottom);\n      } else {\n        var indexes = RGraph.sequentialIndexToGrouped(i, this.data); // Use the rounded rect function if the chart is stacked and the index is 0\n\n        if (properties.grouping === 'stacked' && properties.corners === 'round' && indexes[1] === 0) {\n          this.context.beginPath();\n          this.roundedCornersRect(left, top, width, height);\n        } else {\n          this.path('b r % % % %', left, top, width, height);\n        }\n      }\n\n      if (this.context.isPointInPath(mouseX, mouseY)) {\n        if (properties.tooltips && RGraph.parseTooltipText) {\n          var tooltip = RGraph.parseTooltipText(properties.tooltips, i);\n        } // Work out the dataset\n\n\n        var dataset = 0,\n            idx = i;\n\n        while (idx >= (typeof obj.data[dataset] === 'object' && obj.data[dataset] ? obj.data[dataset].length : 1)) {\n          if (typeof obj.data[dataset] === 'number') {\n            idx -= 1;\n          } else if (obj.data[dataset]) {\n            // Accounts for null being an object\n            idx -= obj.data[dataset].length;\n          } else {\n            idx -= 1;\n          }\n\n          dataset++;\n        }\n\n        if (typeof obj.data[dataset] == 'number') {\n          idx = 0;\n        }\n\n        return {\n          object: this,\n          x: left,\n          y: top,\n          width: width,\n          height: height,\n          tooltip: typeof tooltip === 'string' ? tooltip : null,\n          label: properties.xaxisLabels && typeof properties.xaxisLabels[dataset] === 'string' ? properties.xaxisLabels[dataset] : null,\n          dataset: dataset,\n          index: idx,\n          sequentialIndex: i\n        };\n      }\n    }\n\n    return null;\n  }; //\n  // This retrives the bar based on the X coordinate only.\n  //\n  // @param object e The event object\n  // @param object   OPTIONAL You can pass in the bar object instead of the\n  //                          function using \"this\"\n  //\n\n\n  this.getShapeByX = function (e) {\n    var canvas = e.target;\n    var mouseCoords = RGraph.getMouseXY(e); // This facilitates you being able to pass in the bar object as a parameter instead of\n    // the function getting it from itself\n\n    var obj = arguments[1] ? arguments[1] : this; //\n    // Loop through the bars determining if the mouse is over a bar\n    //\n\n    for (var i = 0, len = obj.coords.length; i < len; i++) {\n      if (obj.coords[i].length == 0) {\n        continue;\n      }\n\n      var mouseX = mouseCoords[0];\n      var mouseY = mouseCoords[1];\n      var left = obj.coords[i][0];\n      var top = obj.coords[i][1];\n      var width = obj.coords[i][2];\n      var height = obj.coords[i][3];\n\n      if (mouseX >= left && mouseX <= left + width) {\n        if (properties.tooltips) {\n          var tooltip = RGraph.parseTooltipText ? RGraph.parseTooltipText(properties.tooltips, i) : properties.tooltips[i];\n        }\n\n        var indexes = RGraph.sequentialIndexToGrouped(i, this.data);\n        return {\n          object: obj,\n          x: left,\n          y: top,\n          width: width,\n          height: height,\n          dataset: indexes[0],\n          index: indexes[1],\n          sequentialIndex: i,\n          tooltip: typeof tooltip === 'string' ? tooltip : null\n        };\n      }\n    }\n\n    return null;\n  }; //\n  // When you click on the chart, this method can return the Y value at that point. It works for any point on the\n  // chart (that is inside the margins) - not just points within the Bars.\n  //\n  // EITHER:\n  //\n  // @param object arg The event object\n  //\n  // OR:\n  //\n  // @param object arg A two element array containing the X and Y coordinates\n  //\n\n\n  this.getValue = function (arg) {\n    if (arg.length == 2) {\n      var mouseX = arg[0];\n      var mouseY = arg[1];\n    } else {\n      var mouseCoords = RGraph.getMouseXY(arg);\n      var mouseX = mouseCoords[0];\n      var mouseY = mouseCoords[1];\n    }\n\n    if (mouseY < properties.marginTop || mouseY > this.canvas.height - properties.marginBottom || mouseX < properties.marginLeft || mouseX > this.canvas.width - properties.marginRight) {\n      return null;\n    }\n\n    if (properties.xaxisPosition == 'center') {\n      var value = (this.grapharea / 2 - (mouseY - properties.marginTop)) / this.grapharea * (this.scale2.max - this.scale2.min);\n      value *= 2;\n\n      if (value >= 0) {\n        value += this.scale2.min;\n      } else {\n        value -= this.scale2.min;\n      }\n    } else if (properties.xaxisPosition == 'top') {\n      var value = (this.grapharea - (mouseY - properties.marginTop)) / this.grapharea * (this.scale2.max - this.scale2.min);\n      value = this.scale2.max - value;\n      value = Math.abs(value) * -1;\n    } else {\n      var value = (this.grapharea - (mouseY - properties.marginTop)) / this.grapharea * (this.scale2.max - this.scale2.min);\n      value += this.scale2.min;\n    }\n\n    return value;\n  }; //\n  // This function can be used when the canvas is clicked on (or similar - depending on the event)\n  // to retrieve the relevant Y coordinate for a particular value.\n  //\n  // @param int value The value to get the Y coordinate for\n  //\n\n\n  this.getYCoord = function (value) {\n    if (value > this.scale2.max) {\n      return null;\n    }\n\n    var y,\n        xaxispos = properties.xaxisPosition;\n\n    if (xaxispos == 'top') {\n      // Account for negative numbers\n      if (value < 0) {\n        value = Math.abs(value);\n      }\n\n      y = (value - this.scale2.min) / (this.scale2.max - this.scale2.min) * this.grapharea;\n      y = y + this.marginTop;\n    } else if (xaxispos == 'center') {\n      y = (value - this.scale2.min) / (this.scale2.max - this.scale2.min) * (this.grapharea / 2);\n      y = this.grapharea / 2 - y;\n      y += this.marginTop;\n    } else {\n      if (value < this.scale2.min) {\n        value = this.scale2.min;\n      }\n\n      y = (value - this.scale2.min) / (this.scale2.max - this.scale2.min);\n      y *= this.canvas.height - this.marginTop - this.marginBottom;\n      y = this.canvas.height - this.marginBottom - y;\n    }\n\n    return y;\n  }; //\n  // Each object type has its own Highlight() function which highlights the appropriate shape\n  //\n  // @param object shape The shape to highlight\n  //\n\n\n  this.highlight = function (shape) {\n    if (typeof properties.highlightStyle === 'function') {\n      properties.highlightStyle(shape); // Highlight all of the rects except this one - essentially an inverted highlight\n    } else if (typeof properties.highlightStyle === 'string' && properties.highlightStyle === 'invert') {\n      for (var i = 0; i < this.coords.length; ++i) {\n        if (i !== shape.sequentialIndex) {\n          this.path('b r % % % % s % f %', this.coords[i][0], this.coords[i][1], this.coords[i][2], this.coords[i][3], properties.highlightStroke, properties.highlightFill);\n        }\n      }\n    } else {\n      if (properties.grouping === 'stacked' && shape.index === 0 && properties.xaxisPosition === 'bottom') {\n        this.context.beginPath();\n        this.context.strokeStyle = properties.highlightStroke;\n        this.context.fillStyle = properties.highlightFill;\n\n        if (properties.corners === 'round') {\n          this.roundedCornersRect(shape.x, shape.y, shape.width, shape.height);\n        } else {\n          this.context.rect(shape.x, shape.y, shape.width, shape.height);\n        }\n\n        this.context.stroke();\n        this.context.fill();\n      } else {\n        // Add the new highlight\n        RGraph.Highlight.rect(this, shape);\n      }\n    }\n  }; //\n  // The getObjectByXY() worker method\n  //\n\n\n  this.getObjectByXY = function (e) {\n    var mouseXY = RGraph.getMouseXY(e);\n    var shape = this.getShape(e); // Adjust the mouse Y coordinate for when the bar chart is\n    // a 3D variant if the textAccessible wrapper DIV is not here\n\n    if (properties.variant === '3d' && !properties.textAccessible) {\n      var adjustment = properties.variantThreedAngle * mouseXY[0];\n      mouseXY[1] -= adjustment;\n    }\n\n    if (mouseXY[0] >= properties.marginLeft && mouseXY[0] <= this.canvas.width - properties.marginRight && mouseXY[1] >= properties.marginTop && mouseXY[1] <= this.canvas.height - properties.marginBottom) {\n      return this;\n    }\n  }; //\n  // This method handles the adjusting calculation for when the mouse is moved\n  //\n  // @param object e The event object\n  //\n\n\n  this.adjusting_mousemove = function (e) {\n    //\n    // Handle adjusting for the Bar\n    //\n    if (properties.adjustable && RGraph.Registry.get('adjusting') && RGraph.Registry.get('adjusting').uid == this.uid) {\n      // Rounding the value to the given number of decimals make the chart step\n      var value = Number(this.getValue(e));\n      var shape = RGraph.Registry.get('adjusting.shape');\n\n      if (shape) {\n        RGraph.Registry.set('adjusting.shape', shape);\n\n        if (this.stackedOrGrouped && properties.grouping == 'grouped') {\n          var indexes = RGraph.sequentialIndexToGrouped(shape.sequentialIndex, this.data);\n\n          if (typeof this.data[indexes[0]] == 'number') {\n            this.data[indexes[0]] = Number(value);\n          } else if (!RGraph.isNull(this.data[indexes[0]])) {\n            this.data[indexes[0]][indexes[1]] = Number(value);\n          }\n        } else if (typeof this.data[shape.sequentialIndex] == 'number') {\n          this.data[shape.sequentialIndex] = Number(value);\n        }\n\n        RGraph.redrawCanvas(e.target);\n        RGraph.fireCustomEvent(this, 'onadjust');\n      }\n    }\n  }; //\n  // This allows for easy specification of gradients\n  //\n\n\n  this.parseColors = function () {\n    // Save the original colors so that they can be restored when the canvas is reset\n    if (this.original_colors.length === 0) {\n      this.original_colors.colors = RGraph.arrayClone(properties.colors);\n      this.original_colors.keyColors = RGraph.arrayClone(properties.keyColors);\n      this.original_colors.crosshairsColor = properties.crosshairsColor;\n      this.original_colors.highlightStroke = properties.highlightStroke;\n      this.original_colors.highlightFill = properties.highlightFill;\n      this.original_colors.textColor = properties.textColor;\n      this.original_colors.backgroundBarsColor1 = properties.backgroundBarsColor1;\n      this.original_colors.backgroundBarsColor2 = properties.backgroundBarsColor2;\n      this.original_colors.backgroundGridColor = properties.backgroundGridColor;\n      this.original_colors.backgroundColor = properties.backgroundColor;\n      this.original_colors.colorsStroke = properties.colorsStroke;\n      this.original_colors.axesColor = properties.axesColor;\n    } // colors\n\n\n    var colors = properties.colors;\n\n    if (colors) {\n      for (var i = 0; i < colors.length; ++i) {\n        colors[i] = this.parseSingleColorForGradient(colors[i]);\n      }\n    } // keyColors\n\n\n    var colors = properties.keyColors;\n\n    if (colors) {\n      for (var i = 0; i < colors.length; ++i) {\n        colors[i] = this.parseSingleColorForGradient(colors[i]);\n      }\n    }\n\n    properties.crosshairsColor = this.parseSingleColorForGradient(properties.crosshairsColor);\n    properties.highlightStroke = this.parseSingleColorForGradient(properties.highlightStroke);\n    properties.highlightFill = this.parseSingleColorForGradient(properties.highlightFill);\n    properties.textColor = this.parseSingleColorForGradient(properties.textColor);\n    properties.backgroundBarsColor1 = this.parseSingleColorForGradient(properties.backgroundBarsColor1);\n    properties.backgroundBarsColor2 = this.parseSingleColorForGradient(properties.backgroundBarsColor2);\n    properties.backgroundGridColor = this.parseSingleColorForGradient(properties.backgroundGridColor);\n    properties.backgroundColor = this.parseSingleColorForGradient(properties.backgroundColor);\n    properties.colorStroke = this.parseSingleColorForGradient(properties.colorStroke);\n    properties.axesColor = this.parseSingleColorForGradient(properties.axesColor);\n  }; //\n  // Use this function to reset the object to the post-constructor state. Eg reset colors if\n  // need be etc\n  //\n\n\n  this.reset = function () {}; //\n  // This parses a single color value. This method can also parse the new\n  // JSON gradient syntax.\n  // \n  // @param string The color to parse\n  //\n\n\n  this.parseSingleColorForGradient = function (color) {\n    if (!color || typeof color != 'string') {\n      return color;\n    }\n\n    if (color.match(/^gradient\\((.*)\\)$/i)) {\n      // Allow for JSON gradients\n      if (color.match(/^gradient\\(({.*})\\)$/i)) {\n        return RGraph.parseJSONGradient({\n          object: this,\n          def: RegExp.$1\n        });\n      }\n\n      var parts = RegExp.$1.split(':'); // Create the gradient\n\n      var grad = this.context.createLinearGradient(0, this.canvas.height - properties.marginBottom, 0, properties.marginTop);\n      var diff = 1 / (parts.length - 1);\n      grad.addColorStop(0, RGraph.trim(parts[0]));\n\n      for (var j = 1, len = parts.length; j < len; ++j) {\n        grad.addColorStop(j * diff, RGraph.trim(parts[j]));\n      }\n    }\n\n    return grad ? grad : color;\n  };\n\n  this.drawBevel = function () {\n    var coords = this.coords,\n        coords2 = this.coords2;\n\n    if (properties.grouping == 'stacked') {\n      for (var i = 0; i < coords2.length; ++i) {\n        if (coords2[i] && coords2[i][0] && coords2[i][0][0]) {\n          var x = coords2[i][0][0];\n          var y = coords2[i][0][1];\n          var w = coords2[i][0][2];\n          var arr = [];\n\n          for (var j = 0; j < coords2[i].length; ++j) {\n            arr.push(coords2[i][j][3]);\n          }\n\n          var h = RGraph.arraySum(arr);\n          this.context.save();\n          this.context.strokeStyle = 'black'; // Clip to the rect\n\n          this.context.beginPath();\n          this.context.rect(x, y, w, h);\n          this.context.clip(); // Add the shadow\n\n          this.context.shadowColor = 'black';\n          this.context.shadowOffsetX = 0;\n          this.context.shadowOffsetY = 0;\n          this.context.shadowBlur = 20;\n          this.context.beginPath();\n          this.context.rect(x - 3, y - 3, w + 6, h + 100);\n          this.context.lineWidth = 5;\n          this.context.stroke();\n          this.context.restore();\n        }\n      }\n    } else {\n      for (var i = 0; i < coords.length; ++i) {\n        if (coords[i]) {\n          var x = coords[i][0];\n          var y = coords[i][1];\n          var w = coords[i][2];\n          var h = coords[i][3];\n          var xaxispos = properties.xaxisPosition;\n          var xaxis_ycoord = (this.canvas.height - this.marginTop - this.marginBottom) / 2 + this.marginTop;\n          this.context.save();\n          this.context.strokeStyle = 'black'; // Clip to the rect\n\n          this.context.beginPath();\n          this.context.rect(x, y, w, h);\n          this.context.clip(); // Add the shadow\n\n          this.context.shadowColor = 'black';\n          this.context.shadowOffsetX = 0;\n          this.context.shadowOffsetY = 0;\n          this.context.shadowBlur = 20;\n\n          if (xaxispos == 'top' || xaxispos == 'center' && y + h > xaxis_ycoord) {\n            y = y - 100;\n            h = h + 100;\n          } else {\n            y = y;\n            h = h + 100;\n          }\n\n          this.context.beginPath();\n          this.context.rect(x - 3, y - 3, w + 6, h + 6);\n          this.context.lineWidth = 5;\n          this.context.stroke();\n          this.context.restore();\n        }\n      }\n    }\n  }; //\n  // This function handles highlighting an entire data-series for the interactive\n  // key\n  //\n  // @param int index The index of the data series to be highlighted\n  //\n\n\n  this.interactiveKeyHighlight = function (index) {\n    var obj = this;\n    this.coords2.forEach(function (value, idx, arr) {\n      if (typeof value[index] == 'object' && value[index]) {\n        var x = value[index][0] - 0.5,\n            y = value[index][1] - 0.5,\n            w = value[index][2] + 1,\n            h = value[index][3] + 1;\n        obj.context.fillStyle = properties.keyInteractiveHighlightChartFill;\n        obj.context.strokeStyle = properties.keyInteractiveHighlightChartStroke;\n        obj.context.lineWidth = 2;\n        obj.context.strokeRect(x, y, w, h);\n        obj.context.fillRect(x, y, w, h);\n      }\n    });\n  }; //\n  // Using a function to add events makes it easier to facilitate method chaining\n  //\n  // @param string   type The type of even to add\n  // @param function func\n  //\n\n\n  this.on = function (type, func) {\n    if (type.substr(0, 2) !== 'on') {\n      type = 'on' + type;\n    }\n\n    if (typeof this[type] !== 'function') {\n      this[type] = func;\n    } else {\n      RGraph.addCustomEventListener(this, type, func);\n    }\n\n    return this;\n  }; // Draws the above labels\n\n\n  this.drawLabelsAbove = this.drawAboveLabels = function () {\n    var labels = properties.labelsAbove,\n        specific = properties.labelsAboveSpecific,\n        bold = typeof properties.labelsAboveBold === 'boolean' ? properties.labelsAboveBold : properties.textBold,\n        italic = typeof properties.labelsAboveItalic === 'boolean' ? properties.labelsAboveItalic : properties.textItalic,\n        color = properties.labelsAboveColor || properties.textColor,\n        font = properties.labelsAboveFont || properties.textFont,\n        size = typeof properties.labelsAboveSize === 'number' ? properties.labelsAboveSize : properties.textSize,\n        background = properties.labelsAboveBackground,\n        decimals = properties.labelsAboveDecimals,\n        angle = -1 * properties.labelsAboveAngle,\n        unitsPre = properties.labelsAboveUnitsPre,\n        unitsPost = properties.labelsAboveUnitsPost,\n        point = properties.labelsAbovePoint,\n        thousand = properties.labelsAboveThousand,\n        formatter = properties.labelsAboveFormatter,\n        coords = this.coords,\n        coords2 = this.coords2,\n        data = this.data,\n        ldata = RGraph.arrayLinearize(this.data),\n        offsetx = properties.labelsAboveOffsetx,\n        offsety = properties.labelsAboveOffsety,\n        text_italic = properties.textItalic,\n        text_bold = properties.textBold,\n        text_color = properties.textColor,\n        text_font = properties.textFont,\n        text_size = properties.textSize,\n        grouping = properties.grouping; // BC\n\n    if (typeof properties.labelsAboveOffset === 'number') {\n      offsety = properties.labelsAboveOffset;\n    }\n\n    var textConf = RGraph.getTextConf({\n      object: this,\n      prefix: 'labelsAbove'\n    }); // Turn off any shadow\n\n    RGraph.noShadow(this); // Color\n\n    this.context.fillStyle = textConf.color; // This bit draws the text labels that appear above the bars if requested\n\n    if (labels && grouping === 'grouped') {\n      for (var i = 0, len = data.length, sequentialIndex = 0; i < len; i += 1) {\n        // Alignment for regular, positive bars\n        if (typeof data[i] === 'number' && data[i] >= 0) {\n          var angle = angle;\n          var halign = angle ? 'left' : 'center';\n          var valign = angle !== 0 ? 'center' : 'bottom';\n          RGraph.text({\n            object: this,\n            font: textConf.font,\n            size: textConf.size,\n            color: textConf.color,\n            bold: textConf.bold,\n            italic: textConf.italic,\n            x: coords2[i][0][0] + coords2[i][0][2] / 2 + offsetx,\n            y: coords2[i][0][1] - offsety,\n            text: specific ? specific[sequentialIndex] || '' : RGraph.numberFormat({\n              object: this,\n              number: Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n              value: Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n              unitspre: unitsPre,\n              unitspost: unitsPost,\n              point: point,\n              thousand: thousand,\n              formatter: formatter,\n              dataset: 0,\n              index: i\n            }),\n            halign: halign,\n            valign: valign,\n            angle: angle,\n            marker: false,\n            bounding: true,\n            'bounding.fill': background,\n            'bounding.stroke': 'rgba(0,0,0,0)',\n            tag: 'labels.above'\n          });\n          sequentialIndex++; // Alignment for regular, negative bars\n        } else if (typeof data[i] === 'number' && data[i] < 0) {\n          var angle = angle;\n          var halign = angle ? 'right' : 'center';\n          var valign = angle !== 0 ? 'center' : 'top';\n          RGraph.text({\n            object: this,\n            font: textConf.font,\n            size: textConf.size,\n            color: textConf.color,\n            bold: textConf.bold,\n            italic: textConf.italic,\n            x: coords2[i][0][0] + coords2[i][0][2] / 2 + offsetx,\n            y: coords2[i][0][1] + coords2[i][0][3] + offsety,\n            text: specific ? specific[sequentialIndex] || '' : RGraph.numberFormat({\n              object: this,\n              number: Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n              value: Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n              unitspre: unitsPre,\n              unitspost: unitsPost,\n              point: point,\n              thousand: thousand,\n              formatter: formatter,\n              dataset: 0,\n              index: i\n            }),\n            halign: halign,\n            valign: valign,\n            angle: angle,\n            bounding: true,\n            'bounding.fill': background,\n            'bounding.stroke': 'rgba(0,0,0,0)',\n            marker: false,\n            tag: 'labels.above'\n          });\n          sequentialIndex++; // Alignment for grouped bars\n        } else if (typeof data[i] === 'object') {\n          for (var j = 0, len2 = data[i].length; j < len2; j += 1) {\n            var angle = angle;\n            var halign = data[i][j] < 0 ? 'right' : 'left';\n            halign = angle === 0 ? 'center' : halign;\n            var valign = data[i][j] < 0 ? 'top' : 'bottom';\n            valign = angle != 0 ? 'center' : valign;\n            RGraph.text({\n              object: this,\n              font: textConf.font,\n              size: textConf.size,\n              color: textConf.color,\n              bold: textConf.bold,\n              italic: textConf.italic,\n              x: coords2[i][j][0] + coords2[i][j][2] / 2 + offsetx,\n              y: properties.xaxisPosition === 'top' ? coords2[i][j][1] + coords2[i][j][3] + 5 : coords2[i][j][1] + (data[i][j] < 0 ? coords2[i][j][3] + offsety : -offsety),\n              text: specific ? specific[sequentialIndex] || '' : RGraph.numberFormat({\n                object: this,\n                number: Number(Number(data[i][j]).toFixed(decimals)),\n                value: Number(Number(data[i][j]).toFixed(decimals)),\n                unitspre: unitsPre,\n                unitspost: unitsPost,\n                point: point,\n                thousand: thousand,\n                formatter: formatter,\n                dataset: i,\n                index: j\n              }),\n              halign: halign,\n              valign: properties.xaxisPosition === 'top' ? 'top' : valign,\n              angle: angle,\n              bounding: true,\n              'bounding.fill': background,\n              'bounding.stroke': 'rgba(0,0,0,0)',\n              marker: false,\n              tag: 'labels.above'\n            });\n            sequentialIndex++;\n          }\n        }\n      } //\n      // STACKED bars\n      //\n\n    } else if (labels && grouping === 'stacked') {\n      for (var i = 0, len = data.length, sequentialIndex = 0; i < len; i += 1) {\n        if (typeof data[i] === 'object') {\n          var angle = angle;\n          var halign = angle != 0 ? 'left' : 'center';\n          var valign = angle != 0 ? 'center' : 'bottom';\n          RGraph.text({\n            object: this,\n            font: textConf.font,\n            size: textConf.size,\n            color: textConf.color,\n            bold: textConf.bold,\n            italic: textConf.italic,\n            x: coords2[i][0][0] + coords2[i][0][2] / 2 + offsetx,\n            y: coords2[i][0][1] + (data[i][0] < 0 ? coords2[i][0][3] : 0) - offsety,\n            text: specific ? specific[sequentialIndex] || '' : RGraph.numberFormat({\n              object: this,\n              number: Number(Number(RGraph.arraySum(data[i])).toFixed(decimals)),\n              value: Number(Number(RGraph.arraySum(data[i])).toFixed(decimals)),\n              unitspre: unitsPre,\n              unitspost: unitsPost,\n              point: point,\n              thousand: thousand,\n              formatter: formatter,\n              dataset: i\n            }),\n            halign: halign,\n            valign: valign,\n            angle: angle,\n            bounding: true,\n            'bounding.fill': background,\n            'bounding.stroke': 'rgba(0,0,0,0)',\n            marker: false,\n            tag: 'labels.above'\n          });\n          sequentialIndex += data[i].length; //\n          // Regular numbers but in a stacked grouping\n          //\n        } else {\n          var angle = angle;\n          var halign = angle != 0 ? 'left' : 'center';\n          var valign = angle != 0 ? 'center' : 'bottom';\n          RGraph.text({\n            object: this,\n            font: textConf.font,\n            size: textConf.size,\n            color: textConf.color,\n            bold: textConf.bold,\n            italic: textConf.italic,\n            x: coords2[i][0][0] + coords2[i][0][2] / 2 + offsetx,\n            y: coords2[i][0][1] + (data[i][0] < 0 ? coords2[i][0][3] : 0) - offsety,\n            text: specific ? specific[sequentialIndex] || '' : RGraph.numberFormat({\n              object: this,\n              number: Number(Number(data[i]).toFixed(decimals)),\n              value: Number(Number(data[i]).toFixed(decimals)),\n              unitspre: unitsPre,\n              unitspost: unitsPost,\n              point: point,\n              thousand: thousand,\n              formatter: formatter,\n              dataset: i\n            }),\n            halign: halign,\n            valign: valign,\n            angle: angle,\n            bounding: true,\n            'bounding.fill': background,\n            'bounding.stroke': 'rgba(0,0,0,0)',\n            marker: false,\n            tag: 'labels.above'\n          });\n          sequentialIndex++;\n        }\n      }\n    }\n  }; //\n  // This function runs once only\n  //\n\n\n  this.firstDrawFunc = function () {}; //\n  // (new) Bar chart Wave effect. This is a rewrite that should be smoother\n  // because it just uses a single loop and not setTimeout\n  //\n  // @param object   OPTIONAL An object map of options. You specify 'frames' here to give the number of frames in the effect\n  // @param function OPTIONAL A function that will be called when the effect is complete\n  //\n\n\n  this.wave = function () {\n    // If there's only one bar call the grow function instead\n    if (this.data.length === 1) {\n      this.grow(arguments[0], arguments[1]);\n      return;\n    }\n\n    var obj = this,\n        opt = arguments[0] || {},\n        labelsAbove = this.get('labelsAbove');\n    opt.frames = opt.frames || 60;\n    opt.startFrames = [];\n    opt.counters = [];\n\n    var framesperbar = opt.frames / 3,\n        frame = -1,\n        callback = arguments[1] || function () {},\n        original = RGraph.arrayClone(this.original_data); //\n    // turn off the labelsAbove option whilst animating\n    //\n\n\n    this.set('labelsAbove', false);\n\n    for (var i = 0, len = obj.data.length; i < len; i += 1) {\n      opt.startFrames[i] = opt.frames / 2 / (obj.data.length - 1) * i;\n\n      if (typeof obj.data[i] === 'object' && obj.data[i]) {\n        opt.counters[i] = [];\n\n        for (var j = 0; j < obj.data[i].length; j++) {\n          opt.counters[i][j] = 0;\n        }\n      } else {\n        opt.counters[i] = 0;\n      }\n    } //\n    // This stops the chart from jumping\n    //\n\n\n    obj.draw();\n    obj.set('yaxisScaleMax', obj.scale2.max);\n    RGraph.clear(obj.canvas);\n\n    function iterator() {\n      ++frame;\n\n      for (var i = 0, len = obj.data.length; i < len; i += 1) {\n        if (frame > opt.startFrames[i]) {\n          if (typeof obj.data[i] === 'number') {\n            obj.data[i] = Math.min(Math.abs(original[i]), Math.abs(original[i] * (opt.counters[i]++ / framesperbar))); // Make the number negative if the original was\n\n            if (original[i] < 0) {\n              obj.data[i] *= -1;\n            }\n          } else if (!RGraph.isNull(obj.data[i])) {\n            for (var j = 0, len2 = obj.data[i].length; j < len2; j += 1) {\n              obj.data[i][j] = Math.min(Math.abs(original[i][j]), Math.abs(original[i][j] * (opt.counters[i][j]++ / framesperbar))); // Make the number negative if the original was\n\n              if (original[i][j] < 0) {\n                obj.data[i][j] *= -1;\n              }\n            }\n          }\n        } else {\n          obj.data[i] = typeof obj.data[i] === 'object' && obj.data[i] ? RGraph.arrayPad([], obj.data[i].length, 0) : RGraph.isNull(obj.data[i]) ? null : 0;\n        }\n      }\n\n      if (frame >= opt.frames) {\n        if (labelsAbove) {\n          obj.set('labelsAbove', true);\n          RGraph.redraw();\n        }\n\n        callback(obj);\n      } else {\n        RGraph.redrawCanvas(obj.canvas);\n        RGraph.Effects.updateCanvas(iterator);\n      }\n    }\n\n    iterator();\n    return this;\n  }; //\n  // Color Wave effect. This fades in color sequentially like the wave effect\n  // makes the bars grow.\n  //\n  // @param object   OPTIONAL An object map of options. You specify 'frames'\n  //                          here to give the number of frames in the effect\n  // @param function OPTIONAL A function that will be called when the effect\n  //                          is complete\n  //\n\n\n  this.colorwave = this.colorWave = function () {\n    var obj = this,\n        opt = arguments[0] || {};\n    opt.frames = opt.frames || 60;\n    opt.startFrames = [];\n    opt.counters = [], colors = obj.properties.colors; // If just one color is specified and colorsSequential is not, then\n    // pad the colors array out\n\n    if (colors.length <= obj.data.length) {\n      obj.set('colorsSequential', true);\n      colors = RGraph.arrayPad(colors, obj.data.length, colors[colors.length - 1]);\n    }\n\n    var framesperbar = opt.frames / 2,\n        frame = -1,\n        callback = arguments[1] || function () {},\n        originalColors = RGraph.arrayClone(obj.properties.colors);\n\n    for (var i = 0, len = originalColors.length; i < len; i += 1) {\n      opt.startFrames[i] = opt.frames / 2 / (originalColors.length - 1) * i;\n      opt.counters[i] = 0;\n    }\n\n    function iterator() {\n      ++frame;\n\n      for (var i = 0, len = colors.length; i < len; i += 1) {\n        if (frame > opt.startFrames[i] && colors[i].match(/^rgba?\\(([0-9 ]+),([0-9 ]+),([0-9 ]+)(,([ 0-9.]+)?)\\)/)) {\n          // DO NOT USE SPACES!\n          colors[i] = 'rgba({1},{2},{3},{4})'.format(RegExp.$1, RegExp.$2, RegExp.$3, (frame - opt.startFrames[i]) / framesperbar);\n        } else {\n          colors[i] = colors[i].replace(/,[0-9. ]+\\)/, ',0)');\n        }\n      }\n\n      if (frame >= opt.frames) {\n        callback(obj);\n      } else {\n        RGraph.redrawCanvas(obj.canvas);\n        RGraph.Effects.updateCanvas(iterator);\n      }\n    }\n\n    iterator();\n    return this;\n  }; //\n  // Grow\n  //\n  // The Bar chart Grow effect gradually increases the values of the bars\n  //\n  // @param object       An object of options - eg: {frames: 30}\n  // @param function     A function to call when the effect is complete\n  //\n\n\n  this.grow = function () {\n    // Callback\n    var opt = arguments[0] || {},\n        frames = opt.frames || 30,\n        frame = 0,\n        callback = arguments[1] || function () {},\n        obj = this,\n        labelsAbove = this.get('labelsAbove'); // Go through the data and change string arguments of the format +/-[0-9]\n    // to absolute numbers\n\n\n    if (RGraph.isArray(opt.data)) {\n      var ymax = 0;\n\n      for (var i = 0; i < opt.data.length; ++i) {\n        if (typeof opt.data[i] === 'object') {\n          for (var j = 0; j < opt.data[i].length; ++j) {\n            if (typeof opt.data[i][j] === 'string' && opt.data[i][j].match(/(\\+|\\-)([0-9]+)/)) {\n              if (RegExp.$1 === '+') {\n                opt.data[i][j] = this.original_data[i][j] + parseInt(RegExp.$2);\n              } else {\n                opt.data[i][j] = this.original_data[i][j] - parseInt(RegExp.$2);\n              }\n            }\n\n            ymax = Math.max(ymax, opt.data[i][j]);\n          }\n        } else if (typeof opt.data[i] === 'string' && opt.data[i].match(/(\\+|\\-)([0-9]+)/)) {\n          if (RegExp.$1 === '+') {\n            opt.data[i] = this.original_data[i] + parseInt(RegExp.$2);\n          } else {\n            opt.data[i] = this.original_data[i] - parseInt(RegExp.$2);\n          }\n\n          ymax = Math.max(ymax, opt.data[i]);\n        } else {\n          ymax = Math.max(ymax, opt.data[i]);\n        }\n      }\n\n      var scale = RGraph.getScale({\n        object: this,\n        options: {\n          'scale.max': ymax\n        }\n      });\n\n      if (typeof properties.yaxisScaleMax !== 'number') {\n        this.set('yaxisScaleMax', scale.max);\n      }\n    } //\n    // turn off the labelsAbove option whilst animating\n    //\n\n\n    this.set('labelsAbove', false); // Stop the scale from changing by setting yaxisScaleMax (if it's not already set)\n\n    if (properties.yaxisScaleMax == null) {\n      var ymax = 0;\n\n      for (var i = 0; i < this.data.length; ++i) {\n        if (RGraph.isArray(this.data[i]) && properties.grouping === 'stacked') {\n          ymax = Math.max(ymax, Math.abs(RGraph.arraySum(this.data[i])));\n        } else if (RGraph.isArray(this.data[i]) && properties.grouping === 'grouped') {\n          for (var j = 0, group = []; j < this.data[i].length; j++) {\n            group.push(Math.abs(this.data[i][j]));\n          }\n\n          ymax = Math.max(ymax, Math.abs(RGraph.arrayMax(group)));\n        } else {\n          ymax = Math.max(ymax, Math.abs(this.data[i]));\n        }\n      }\n\n      var scale = RGraph.getScale({\n        object: this,\n        options: {\n          'scale.max': ymax\n        }\n      });\n      this.set('yaxisScaleMax', scale.max);\n    } // You can give a ymax to the grow function\n\n\n    if (typeof opt.ymax === 'number') {\n      this.set('yaxisScaleMax', opt.ymax);\n    }\n\n    var iterator = function () {\n      var easingMultiplier = RGraph.Effects.getEasingMultiplier(frames, frame); // Alter the Bar chart data depending on the frame\n\n      for (var j = 0, len = obj.original_data.length; j < len; ++j) {\n        if (typeof obj.data[j] === 'object' && !RGraph.isNull(obj.data[j])) {\n          for (var k = 0, len2 = obj.data[j].length; k < len2; ++k) {\n            if (obj.firstDraw || !opt.data) {\n              obj.data[j][k] = easingMultiplier * obj.original_data[j][k];\n            } else if (opt.data && opt.data.length === obj.original_data.length) {\n              var diff = opt.data[j][k] - obj.original_data[j][k];\n              obj.data[j][k] = easingMultiplier * diff + obj.original_data[j][k];\n            }\n          }\n        } else {\n          if (obj.firstDraw || !opt.data) {\n            obj.data[j] = easingMultiplier * obj.original_data[j];\n          } else if (opt.data && opt.data.length === obj.original_data.length) {\n            var diff = opt.data[j] - obj.original_data[j];\n            obj.data[j] = easingMultiplier * diff + obj.original_data[j];\n          }\n        }\n      } //RGraph.clear(obj.canvas);\n\n\n      RGraph.redrawCanvas(obj.canvas);\n\n      if (frame < frames) {\n        frame += 1;\n        RGraph.Effects.updateCanvas(iterator); // Call the callback function\n      } else {\n        // Do some housekeeping if new data was specified thats done in\n        // the constructor - but needs to be redone because new data\n        // has been specified\n        if (RGraph.isArray(opt.data)) {\n          var linear_data = RGraph.arrayLinearize(data);\n\n          for (var i = 0; i < linear_data.length; ++i) {\n            if (!obj['$' + i]) {\n              obj['$' + i] = {};\n            }\n          }\n        }\n\n        obj.data = data;\n        obj.original_data = RGraph.arrayClone(data);\n\n        if (labelsAbove) {\n          obj.set('labelsAbove', true);\n          RGraph.redraw();\n        }\n\n        callback(obj);\n      }\n    };\n\n    iterator();\n    return this;\n  }; //\n  // Draws error-bars for the Bar and Line charts\n  //\n\n\n  this.drawErrorbars = function () {\n    var coords = this.coords,\n        color = properties.errorbarsColor || 'black',\n        default_halfwidth = Math.min(properties.errorbarsCappedWidth, coords[0][2]) / 2,\n        x = 0,\n        errorbars = properties.errorbars,\n        length = 0; // If not capped set the width of the cqap to zero\n\n    if (!properties.errorbarsCapped) {\n      properties.errorbarsCappedWidth = 0;\n      halfwidth = 0;\n    } // Set the linewidth\n\n\n    this.context.lineWidth = properties.errorbarsLinewidth;\n\n    for (var i = 0; i < coords.length; ++i) {\n      var barX = coords[i][0],\n          barY = coords[i][1],\n          barW = coords[i][2],\n          barH = coords[i][3]; // Get the grouped version of the index\n\n      var groupedIndexes = RGraph.sequentialIndexToGrouped(i, this.data); // Determine if this is \n\n      if (typeof this.data[groupedIndexes[0]] === 'object' && !RGraph.isNull(this.data[groupedIndexes[0]])) {\n        var isGrouped = true,\n            group = groupedIndexes[0],\n            subgroup = groupedIndexes[1];\n      } // Default to black\n\n\n      color = properties.errorbarsColor || 'black'; // Set the perbar linewidth if the fourth option in the array\n      // is specified\n\n      if (errorbars[i] && typeof errorbars[i][3] === 'number') {\n        this.context.lineWidth = errorbars[i][3];\n      } // Set the halfwidth\n\n\n      var halfwidth = errorbars[i] && typeof errorbars[i][4] === 'number' ? errorbars[i][4] / 2 : default_halfwidth;\n\n      if (!properties.errorbarsCapped) {\n        halfwidth = 0;\n      } // Calulate the pixel size\n\n\n      if (typeof errorbars[i] === 'number') {\n        length = Math.abs(this.getYCoord(errorbars[i]) - this.getYCoord(0));\n\n        if (length) {\n          this.path('b % % l % % l % % l % % s %', barX + barW / 2, typeof this.data[i] === 'number' && this.data[i] < 0 || isGrouped && this.data[group][subgroup] < 0 ? barY + barH : barY, barX + barW / 2, typeof this.data[i] === 'number' && this.data[i] < 0 || isGrouped && this.data[group][subgroup] < 0 ? barY + barH + length : barY - length, barX + barW / 2 - halfwidth, typeof this.data[i] === 'number' && this.data[i] < 0 || isGrouped && this.data[group][subgroup] < 0 ? Math.round(barY + barH + length) : Math.round(barY - length), barX + barW / 2 + halfwidth, typeof this.data[i] === 'number' && this.data[i] < 0 || isGrouped && this.data[group][subgroup] < 0 ? Math.round(barY + barH + length) : Math.round(barY - length), color);\n        }\n      } else if (typeof errorbars[i] === 'object' && !RGraph.isNull(errorbars[i])) {\n        var positiveLength = Math.abs(this.getYCoord(errorbars[i][0]) - this.getYCoord(0)); // Color\n\n        if (typeof errorbars[i][1] === 'string') {\n          color = errorbars[i][1];\n        } else if (typeof errorbars[i][2] === 'string') {\n          color = errorbars[i][2];\n        } // Cap width\n\n\n        halfwidth = typeof errorbars[i][4] === 'number' ? errorbars[i][4] / 2 : default_halfwidth;\n\n        if (!properties.errorbarsCapped) {\n          halfwidth = 0;\n        }\n\n        if (!RGraph.isNull(errorbars[i][0])) {\n          this.path('b m % % l % % l % % l % % s %', barX + barW / 2, barY + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2, barY - positiveLength + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2 - halfwidth, Math.round(barY - positiveLength) + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2 + halfwidth, Math.round(barY - positiveLength) + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), color);\n        }\n\n        if (typeof errorbars[i][1] === 'number') {\n          var negativeLength = Math.abs(this.getYCoord(errorbars[i][1]) - this.getYCoord(0));\n          this.path('b m % % l % % l % % l % % s %', barX + barW / 2, barY + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2, barY + negativeLength + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2 - halfwidth, Math.round(coords[i][1] + negativeLength) + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), barX + barW / 2 + halfwidth, Math.round(barY + negativeLength) + (this.data[i] < 0 ? barH : 0) + (isGrouped && this.data[group][subgroup] < 0 ? barH : 0), color);\n        }\n      } // Reset the perbar linewidth to the default if the fourth option\n      // in the array was specified specified\n\n\n      if (errorbars[i] && typeof errorbars[i][3] === 'number') {\n        this.context.lineWidth = properties.errorbarsLinewidth;\n      }\n    }\n  }; //\n  // A per-object to test whether a particular bar is adjustable or not\n  //\n  // @param shape The shape object\n  //\n\n\n  this.isAdjustable = function (shape) {\n    if (RGraph.isNull(properties.adjustableOnly) || !RGraph.isArray(properties.adjustableOnly)) {\n      return true;\n    }\n\n    if (RGraph.isArray(properties.adjustableOnly) && properties.adjustableOnly[shape.sequentialIndex]) {\n      return true;\n    }\n\n    return false;\n  }; //\n  // A worker function that handles Bar chart specific tooltip substitutions\n  //\n\n\n  this.tooltipSubstitutions = function (opt) {\n    var indexes = RGraph.sequentialIndexToGrouped(opt.index, this.data);\n    var values = this.data[indexes[0]];\n\n    if (typeof values === 'number') {\n      values = [values];\n    }\n\n    return {\n      index: indexes[1],\n      dataset: indexes[0],\n      sequentialIndex: opt.index,\n      value: this.data_arr[opt.index],\n      values: values\n    };\n  }; //\n  // A worker function that returns the correct color/label/value\n  //\n  // @param object specific The indexes that are applicable\n  // @param number index    The appropriate index\n  //\n\n\n  this.tooltipsFormattedCustom = function (specific, index) {\n    var label;\n\n    if (this.stackedOrGrouped) {\n      label = !RGraph.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[index] ? properties.tooltipsFormattedKeyLabels[index] : '';\n    } else {\n      label = !RGraph.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[specific.index] ? properties.tooltipsFormattedKeyLabels[specific.index] : '';\n    }\n\n    return {\n      label: label\n    };\n  }; //\n  // This allows for static tooltip positioning\n  //\n\n\n  this.positionTooltipStatic = function (args) {\n    var obj = args.object,\n        e = args.event,\n        tooltip = args.tooltip,\n        index = args.index,\n        canvasXY = RGraph.getCanvasXY(obj.canvas);\n    coords = this.coords[args.index]; // Position the tooltip in the X direction\n\n    args.tooltip.style.left = canvasXY[0] // The X coordinate of the canvas\n    + coords[0] // The X coordinate of the bar on the chart\n    - tooltip.offsetWidth / 2 // Subtract half of the tooltip width\n    + coords[2] / 2 // Add half of the bar width\n    + obj.properties.tooltipsOffsetx // Add any user defined offset\n    + 'px';\n    args.tooltip.style.top = canvasXY[1] // The Y coordinate of the canvas\n    + coords[1] // The Y coordinate of the bar on the chart\n    - tooltip.offsetHeight // The height of the tooltip\n    - 10 // An arbitrary amount\n    + obj.properties.tooltipsOffsety // Add any user defined offset\n    + 'px'; // If the chart is a 3D version the tooltip Y position needs this\n    // adjustment\n\n    if (properties.variant === '3d') {\n      var left = coords[0];\n      var top = coords[1];\n      var angle = properties.variantThreedAngle;\n      var adjustment = Math.tan(angle) * left;\n      args.tooltip.style.top = parseInt(args.tooltip.style.top) + adjustment - 5 + 'px';\n    } // If the bar is a negative one, add half the height to the Y coord\n\n\n    if (this.data_arr[index] < 0) {\n      args.tooltip.style.top = parseFloat(args.tooltip.style.top) + coords[3] / 2 + 'px';\n    } // If the top of the tooltip is off the top of the page\n    // then move the tooltip down\n    //if(parseFloat(args.tooltip.style.top) < 0) {\n    //args.tooltip.style.top = 5 + 'px';\n    //}\n\n  }; //\n  // This adds a roundedRect(x, y, width, height, radius) function to the drawing context.\n  // The radius argument dictates by how much the corners are rounded.\n  // \n  // @param number x      The X coordinate\n  // @param number y      The Y coordinate\n  // @param number width  The width of the rectangle\n  // @param number height The height of the rectangle\n  // @param number radius The radius of the corners. Bigger values mean more rounded corners\n  //\n\n\n  this.roundedCornersRect = function (x, y, width, height) {\n    var radius = properties.cornersRoundRadius;\n    radius = Math.min(width / 2, height / 2, radius); // Save the existing state of the canvas so that it can be restored later\n\n    this.context.save(); // Translate to the given X/Y coordinates\n\n    this.context.translate(x, y); // Move to the center of the top horizontal line\n\n    this.context.moveTo(width / 2, 0); // Draw the rounded corners. The connecting lines in between them are drawn automatically\n\n    this.context.arcTo(width, 0, width, height, Math.min(height / 2, radius));\n    this.context.arcTo(width, height, 0, height, 0);\n    this.context.arcTo(0, height, 0, 0, 0);\n    this.context.arcTo(0, 0, radius, 0, Math.min(height / 2, radius)); // Draw a line back to the start coordinates\n\n    this.context.lineTo(width / 2, 0); // Restore the state of the canvas to as it was before the save()\n\n    this.context.restore();\n  }; //\n  // This adds a roundedRectNegative(x, y, width, height, radius) function to the drawing context.\n  // The radius argument dictates by how much the corners are rounded.\n  // This function handles negative bars whereas the above\n  // function handles positive ones.\n  // \n  // @param number x      The X coordinate\n  // @param number y      The Y coordinate\n  // @param number width  The width of the rectangle\n  // @param number height The height of the rectangle\n  // @param number radius The radius of the corners. Bigger values mean more rounded corners\n  //\n\n\n  this.roundedCornersRectNegative = function (x, y, width, height) {\n    if (height < 0) {\n      height = Math.abs(height);\n      y -= height;\n    }\n\n    var radius = properties.cornersRoundRadius;\n    radius = Math.min(Math.abs(width / 2), Math.abs(height / 2), Math.abs(radius)); // Save the existing state of the canvas so that it can be restored later\n\n    this.context.save(); // Translate to the given X/Y coordinates\n\n    this.context.translate(x, y); // Move to the center of the top horizontal line\n\n    this.context.moveTo(width / 2, 0); // Draw the rounded corners. The connecting lines in\n    // between them are drawn automatically\n\n    this.context.arcTo(width, 0, width, height, 0);\n    this.context.arcTo(width, height, 0, height, radius);\n    this.context.arcTo(0, height, 0, 0, radius);\n    this.context.arcTo(0, 0, width, 0, 0); // Draw a line back to the start coordinates\n\n    this.context.lineTo(width / 2, 0); // Restore the state of the canvas to as it was before the save()\n\n    this.context.restore();\n  }; //\n  // This function is NOT currently used - it installs an\n  // appropriate clipping region for the lower half of 3D\n  // Bar charts when the X axis is in the middle. It's\n  // used like this:\n  //\n  // this.context.save();\n  //     this.context.install3DAxisClip();\n  //     ...\n  // this.context.restore();\n  //\n\n\n  this.install3DAxisNegativeClip = function () {\n    this.path('b m % % l % % l % % l % % l % % l % % c cl', this.marginLeft, this.getYCoord(0), this.marginLeft, this.canvas.height - this.marginBottom, this.canvas.width - this.marginRight, this.canvas.height - this.marginBottom, this.canvas.width - this.marginRight + this.properties.variantThreedOffsetx, this.canvas.height - this.marginBottom - this.properties.variantThreedOffsety, this.canvas.width - this.marginRight + this.properties.variantThreedOffsetx, this.getYCoord(0) - this.properties.variantThreedOffsety, this.canvas.width - this.marginRight, this.getYCoord(0));\n  }; //\n  // Register the object\n  //\n\n\n  RGraph.register(this); //\n  // This is the 'end' of the constructor so if the first argument\n  // contains configuration dsta - handle that.\n  //\n\n  RGraph.parseObjectStyleConfig(this, conf.options);\n}; //\n// This is the combined bar and Line class which makes creating bar/line combo charts a little bit easier\n//\n\n\nRGraph.CombinedChart = function () {\n  //\n  // Create a default empty array for the objects\n  //\n  this.objects = [];\n  var objects = [];\n\n  if (RGraph.isArray(arguments[0])) {\n    objects = arguments[0];\n  } else {\n    for (var i = 0; i < arguments.length; i += 1) {\n      objects[i] = arguments[i];\n    }\n  }\n\n  for (var i = 0; i < objects.length; ++i) {\n    this.objects[i] = objects[i]; //\n    // Set the Line chart margins to match the Bar chart margins\n    //\n\n    this.objects[i].set({\n      marginLeft: this.objects[0].get('marginLeft'),\n      // Needs to use the dot form to skirt an IE9 bug\n      marginRight: this.objects[0].get('marginRight'),\n      // Needs to use the dot form to skirt an IE9 bug\n      marginTop: this.objects[0].get('marginTop'),\n      // Needs to use the dot form to skirt an IE9 bug\n      marginBottom: this.objects[0].get('marginBottom') // Needs to use the dot form to skirt an IE9 bug\n\n    });\n\n    if (this.objects[i].type == 'line') {\n      var obj = this.objects[i]; //\n      // Set the line chart marginInner\n      //\n\n      obj.set('marginInner', (this.objects[0].canvas.width - this.objects[0].get('marginRight') - this.objects[0].get('marginLeft')) / this.objects[0].data.length / 2); //\n      // No labels, axes or grid on the Line chart\n      //\n\n      obj.set('yaxis', false);\n      obj.set('xaxis', false);\n      obj.set('backgroundGrid', false);\n      obj.set('yaxisScale', false);\n    } //\n    // Resizing\n    //\n\n\n    if (this.objects[i].get('resizable')) {\n      var resizable_object = obj;\n    }\n  } //\n  // Resizing\n  //\n\n\n  if (resizable_object) {\n    //\n    // This recalculates the Line chart marginInner when the chart is resized\n    //\n    function myOnresizebeforedraw(obj) {\n      var marginLeft = obj.get('marginLeft');\n      var marginRight = obj.get('marginRight');\n      obj.set('marginInner', (obj.canvas.width - marginLeft - marginRight) / (obj.original_data[0].length * 2));\n    }\n\n    RGraph.addCustomEventListener(resizable_object, 'onresizebeforedraw', myOnresizebeforedraw);\n  }\n\n  return this;\n}; //\n// The Add method can be used to add methods to the CombinedChart object.\n//\n\n\nRGraph.CombinedChart.prototype.add = function (obj) {\n  this.objects.push(obj);\n  return this;\n}; //\n// The Draw method goes through all of the objects drawing them (sequentially)\n//\n\n\nRGraph.CombinedChart.prototype.draw = function () {\n  if (RGraph.isArray(this.objects)) {\n    for (var i = 0; i < this.objects.length; ++i) {\n      if (this.objects[i].properties['combinedEffect']) {\n        // The options must be given as a string because of the\n        // RGraph configuration system\n        var options = this.objects[i].properties['combinedEffectOptions'] ? eval('(' + this.objects[i].properties['combinedEffectOptions'] + ')') : null,\n            callback = this.objects[i].properties['combinedEffectCallback'],\n            func = this.objects[i].properties['combinedEffect'];\n        this.objects[i][func](options, callback);\n      } else {\n        this.objects[i].draw();\n      }\n    }\n  }\n\n  return this;\n}; //\n// Provides an easy way to get a segmented Bar chart. See the Bar chart\n// documentation page for more details.\n//\n\n\nRGraph.SegmentedBar = function (conf) {\n  this.config = conf;\n  this.properties = {}; // Process the data\n\n  this.config.data.forEach(function (v, k, arr) {\n    arr[k] = RGraph.arrayPad([], v, 1);\n  }); // Set the options on the segmentedBar object\n\n  for (i in this.config.options) {\n    if (typeof i === 'string') {\n      this.properties[i] = this.config.options[i];\n    }\n  } // Prevent any 'this' madness\n\n\n  var seg = this;\n  this.background = new RGraph.Bar({\n    id: conf.id[0],\n    data: RGraph.arrayPad([], conf.data.length),\n    options: {\n      backgroundGridHlinesCount: seg.properties.segmentsCount,\n      colors: ['rgba(0,0,0,0)'],\n      xaxis: false,\n      yaxis: false,\n      yaxisLabels: false,\n      xaxis: false,\n      yaxis: false,\n      yaxisScale: false\n    }\n  });\n  this.foreground = new RGraph.Bar({\n    id: conf.id[1],\n    data: conf.data,\n    options: {\n      grouping: 'stacked',\n      xaxis: false,\n      yaxis: false,\n      backgroundGrid: false,\n      yaxisLabelsOffsetx: -3,\n      yaxisLabelsOffsety: 20\n    }\n  }).on('draw', function (obj) {\n    var lw = seg.properties.segmentsLinewidth;\n    var count = seg.properties.segmentsCount;\n\n    for (var i = 0; i <= count; ++i) {\n      obj.path('cr 0 % 1000 %', obj.getYCoord(i / count * seg.foreground.scale2.max) - lw / 2, lw);\n    }\n  }); // Set the Y label Offset\n\n  this.foreground.set({\n    yaxisLabelsOffsety: (this.foreground.canvas.height - this.foreground.properties.marginTop - this.foreground.properties.marginBottom) / seg.properties.segmentsCount / 2\n  }); // Draw the Bar chart\n\n  this.draw = function () {\n    this.background.draw();\n    this.foreground.draw();\n    return this;\n  }; // Animate the Bar chart (only the foreground chart though)\n\n\n  this.grow = function () {\n    this.background.draw();\n    this.foreground.grow(arguments[0], arguments[1]);\n    return this;\n  }; // Animate the Bar chart (only the foreground chart though)\n\n\n  this.wave = function () {\n    this.background.draw();\n    this.foreground.wave(arguments[0], arguments[1]);\n    return this;\n  }; // This allows you to add responsive configuration to the chart by\n  // passing the configuration throough to the underlying objects.\n\n\n  this.responsive = function (conf) {\n    this.foreground.responsive(conf);\n    this.background.responsive(conf);\n    return this;\n  };\n};","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/src/components/RGraph.bar.js"],"names":["RGraph","window","isrgraph","isRGraph","rgraph","Bar","conf","id","canvas","document","getElementById","data","context","getContext","__object__","type","max","stackedOrGrouped","uid","createUID","colorsParsed","original_colors","cachedBackgroundCanvas","firstDraw","properties","backgroundBarsCount","backgroundBarsColor1","backgroundBarsColor2","backgroundGrid","backgroundGridColor","backgroundGridLinewidth","backgroundGridHsize","backgroundGridVsize","backgroundGridVlines","backgroundGridHlines","backgroundGridBorder","backgroundGridAutofit","backgroundGridAutofitAlign","backgroundGridHlinesCount","backgroundGridDashed","backgroundGridDotted","backgroundImage","backgroundImageStretch","backgroundImageX","backgroundImageY","backgroundImageW","backgroundImageH","backgroundImageAlign","backgroundColor","backgroundHbars","marginTop","marginBottom","marginLeft","marginRight","marginInner","marginInnerGrouped","labelsIngraph","labelsIngraphFont","labelsIngraphSize","labelsIngraphColor","labelsIngraphBold","labelsIngraphItalic","labelsIngraphOffsetx","labelsIngraphOffsety","labelsAbove","labelsAboveDecimals","labelsAboveSize","labelsAboveColor","labelsAboveBold","labelsAboveItalic","labelsAboveFont","labelsAbovePoint","labelsAboveThousand","labelsAboveBackground","labelsAboveAngle","labelsAboveOffset","labelsAboveOffsetx","labelsAboveOffsety","labelsAboveUnitsPre","labelsAboveUnitsPost","labelsAboveFormatter","yaxis","yaxisLinewidth","yaxisColor","yaxisTickmarks","yaxisTickmarksCount","yaxisTickmarksLastTop","yaxisTickmarksLastBottom","yaxisTickmarksLength","yaxisScale","yaxisScaleMin","yaxisScaleMax","yaxisScaleUnitsPre","yaxisScaleUnitsPost","yaxisScaleDecimals","yaxisScalePoint","yaxisScaleThousand","yaxisScaleRound","yaxisScaleFormatter","yaxisLabelsSpecific","yaxisLabelsCount","yaxisLabelsOffsetx","yaxisLabelsOffsety","yaxisLabelsHalign","yaxisLabelsValign","yaxisLabelsFont","yaxisLabelsSize","yaxisLabelsColor","yaxisLabelsBold","yaxisLabelsItalic","yaxisLabelsPosition","yaxisPosition","yaxisTitle","yaxisTitleAccessible","yaxisTitleBold","yaxisTitleSize","yaxisTitleFont","yaxisTitleColor","yaxisTitleItalic","yaxisTitlePos","yaxisTitleX","yaxisTitleY","yaxisTitleOffsetx","yaxisTitleOffsety","yaxisTitleHalign","yaxisTitleValign","xaxis","xaxisLinewidth","xaxisColor","xaxisTickmarks","xaxisTickmarksLength","xaxisTickmarksLastLeft","xaxisTickmarksLastRight","xaxisTickmarksCount","xaxisLabels","xaxisLabelsSize","xaxisLabelsFont","xaxisLabelsItalic","xaxisLabelsBold","xaxisLabelsColor","xaxisLabelsFormattedDecimals","xaxisLabelsFormattedPoint","xaxisLabelsFormattedThousand","xaxisLabelsFormattedUnitsPre","xaxisLabelsFormattedUnitsPost","xaxisLabelsOffsetx","xaxisLabelsOffsety","xaxisLabelsHalign","xaxisLabelsValign","xaxisLabelsPosition","xaxisLabelsSpecificAlign","xaxisPosition","xaxisLabelsAngle","xaxisTitle","xaxisTitleBold","xaxisTitleSize","xaxisTitleFont","xaxisTitleColor","xaxisTitleItalic","xaxisTitlePos","xaxisTitleOffsetx","xaxisTitleOffsety","xaxisTitleX","xaxisTitleY","xaxisTitleHalign","xaxisTitleValign","textItalic","textBold","textColor","textSize","textFont","textAccessible","textAccessibleOverflow","textAccessiblePointerevents","text","title","titleX","titleY","titleHalign","titleValign","titleBackground","titleHpos","titleVpos","titleFont","titleSize","titleColor","titleBold","titleItalic","titleOffsetx","titleOffsety","colorsStroke","colors","colorsSequential","colorsReverse","grouping","variant","variantSketchVerticals","variantThreedXaxis","variantThreedYaxis","variantThreedAngle","variantThreedOffsetx","variantThreedOffsety","shadow","shadowColor","shadowOffsetx","shadowOffsety","shadowBlur","tooltips","tooltipsEffect","tooltipsCssClass","tooltipsCss","tooltipsEvent","tooltipsHighlight","tooltipsHotspotXonly","tooltipsFormattedThousand","tooltipsFormattedPoint","tooltipsFormattedDecimals","tooltipsFormattedUnitsPre","tooltipsFormattedUnitsPost","tooltipsFormattedKeyColors","tooltipsFormattedKeyColorsShape","tooltipsFormattedKeyLabels","tooltipsFormattedListType","tooltipsFormattedListItems","tooltipsFormattedTableHeaders","tooltipsFormattedTableData","tooltipsPointer","tooltipsPositionStatic","highlightStroke","highlightFill","key","keyBackground","keyPosition","keyShadow","keyShadowColor","keyShadowBlur","keyShadowOffsetx","keyShadowOffsety","keyPositionMarginBoxed","keyPositionX","keyPositionY","keyInteractive","keyInteractiveHighlightChartStroke","keyInteractiveHighlightChartFill","keyInteractiveHighlightLabel","keyHalign","keyColorShape","keyRounded","keyLinewidth","keyColors","keyLabelsColor","keyLabelsSize","keyLabelsFont","keyLabelsBold","keyLabelsItalic","keyLabelsOffsetx","keyLabelsOffsety","contextmenu","crosshairs","crosshairsColor","crosshairsHline","crosshairsVline","linewidth","annotatable","annotatableLinewidth","annotatableColor","adjustable","adjustableOnly","beveled","errorbars","errorbarsColor","errorbarsCapped","errorbarsCappedWidth","errorbarsLinewidth","combinedEffect","combinedEffectOptions","combinedEffectCallback","corners","cornersRoundRadius","clearto","alert","stringsToNumbers","i","length","isNull","linear_data","arrayLinearize","original_data","arrayClone","coords","coords2","coordsText","data_arr","path","pathObjectFunction","Effects","decorate","responsive","set","name","value","arguments","get","draw","fireCustomEvent","__rgraph_aa_translated__","translate","drawBackgroundImage","j","Math","abs","setTransform","parseColors","grapharea","height","halfgrapharea","halfTextHeight","Background","drawbars","drawAxes","drawLabels","drawBevel","drawKey","showContext","drawErrorbars","drawInGraphLabels","addCustomText","installEventListeners","firstDrawFunc","exec","func","ISSAFARI","lineCap","arrayPad","array","labelSubstitution","object","index","decimals","unitsPre","unitsPost","thousand","point","drawXAxis","drawYAxis","lineWidth","strokeStyle","fillStyle","prevX","prevY","scale2","getScale","options","push","Number","arrayMax","arraySum","drawBars","draw3DAxes","xaxispos","width","orig_height","hmargin","shadowOffsetX","shadowOffsetY","sequentialColorIndex","len","min","getYCoord","x","y","beginPath","barWidth","sketchOffset","moveTo","lineTo","quadraticCurveTo","r","stroke","roundedRect","radius","roundtl","roundtr","roundbl","roundbr","fill","lineJoin","roundedCornersRectNegative","roundedCornersRect","rect","prevStrokeStyle","prevFillStyle","closePath","grad","createLinearGradient","addColorStop","arc","redrawCoords","startY","dataset","totalHeight","startX","noShadow","k","strokeRect","fillRect","individualBarWidth","groupedMargin","hmarginGrouped","draw3DYAxis","drawAboveLabels","getShape","e","obj","mouseXY","getMouseXY","mouseX","mouseY","left","top","indexes","sequentialIndexToGrouped","isPointInPath","parseTooltipText","tooltip","idx","label","sequentialIndex","getShapeByX","target","mouseCoords","getValue","arg","highlight","shape","highlightStyle","Highlight","getObjectByXY","adjustment","adjusting_mousemove","Registry","redrawCanvas","axesColor","parseSingleColorForGradient","colorStroke","reset","color","match","parseJSONGradient","def","RegExp","$1","parts","split","diff","trim","w","arr","h","save","clip","restore","xaxis_ycoord","interactiveKeyHighlight","forEach","on","substr","addCustomEventListener","drawLabelsAbove","labels","specific","labelsAboveSpecific","bold","italic","font","size","background","angle","formatter","ldata","offsetx","offsety","text_italic","text_bold","text_color","text_font","text_size","textConf","getTextConf","prefix","halign","valign","numberFormat","number","toFixed","unitspre","unitspost","marker","bounding","tag","len2","wave","grow","opt","frames","startFrames","counters","framesperbar","frame","callback","original","clear","iterator","redraw","updateCanvas","colorwave","colorWave","originalColors","format","$2","$3","replace","isArray","ymax","parseInt","scale","group","easingMultiplier","getEasingMultiplier","default_halfwidth","halfwidth","barX","barY","barW","barH","groupedIndexes","isGrouped","subgroup","round","positiveLength","negativeLength","isAdjustable","tooltipSubstitutions","values","tooltipsFormattedCustom","positionTooltipStatic","args","event","canvasXY","getCanvasXY","style","offsetWidth","tooltipsOffsetx","offsetHeight","tooltipsOffsety","tan","parseFloat","arcTo","install3DAxisNegativeClip","register","parseObjectStyleConfig","CombinedChart","objects","resizable_object","myOnresizebeforedraw","prototype","add","eval","SegmentedBar","config","v","seg","segmentsCount","yaxisLabels","foreground","lw","segmentsLinewidth","count"],"mappings":"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","sourcesContent":["// Version: 2022-01-22\n//\n    // o--------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:               |\n    // |                                                                                |\n    // |                         https://www.rgraph.net                                 |\n    // |                                                                                |\n    // | RGraph is licensed under the Open Source MIT license. That means that it's     |\n    // | totally free to use and there are no restrictions on what you can do with it!  |\n    // o--------------------------------------------------------------------------------o\n\n    RGraph = window.RGraph || {isrgraph:true,isRGraph: true,rgraph:true};\n\n    //\n    // The bar chart constructor\n    //\n    RGraph.Bar = function (conf)\n    {\n        var id     = conf.id,\n            canvas = document.getElementById(id),\n            data   = conf.data;\n\n        // Get the canvas and context objects\n        this.id                     = id;\n        this.canvas                 = canvas;\n        this.context                = this.canvas.getContext('2d');\n        this.canvas.__object__      = this;\n        this.type                   = 'bar';\n        this.max                    = 0;\n        this.stackedOrGrouped       = false;\n        this.isRGraph               = true;\n        this.isrgraph               = true;\n        this.rgraph                 = true;\n        this.uid                    = RGraph.createUID();\n        this.canvas.uid             = this.canvas.uid ? this.canvas.uid : RGraph.createUID();\n        this.colorsParsed           = false;\n        this.original_colors        = [];\n        this.cachedBackgroundCanvas = null;\n        this.firstDraw              = true; // After the first draw this will be false\n\n\n\n        // Various config type stuff\n        this.properties =\n        {\n            backgroundBarsCount:        null,\n            backgroundBarsColor1:       'rgba(0,0,0,0)',\n            backgroundBarsColor2:       'rgba(0,0,0,0)',\n            backgroundGrid:             true,\n            backgroundGridColor:        '#ddd',\n            backgroundGridLinewidth:    1,\n            backgroundGridHsize:        20,\n            backgroundGridVsize:        20,\n            backgroundGridVlines:       true,\n            backgroundGridHlines:       true,\n            backgroundGridBorder:       true,\n            backgroundGridAutofit:      true,\n            backgroundGridAutofitAlign: true,\n            backgroundGridHlinesCount:  5,\n            backgroundGridDashed:       false,\n            backgroundGridDotted:       false,\n            backgroundImage:            null,\n            backgroundImageStretch:     true,\n            backgroundImageX:           null,\n            backgroundImageY:           null,\n            backgroundImageW:           null,\n            backgroundImageH:           null,\n            backgroundImageAlign:       null,\n            backgroundColor:            null,\n            backgroundHbars:            null,\n            \n            marginTop:             35,\n            marginBottom:          35,\n            marginLeft:            35,\n            marginRight:           35,\n            marginInner:           5,\n            marginInnerGrouped:   1,\n            \n            labelsIngraph:        null,\n            labelsIngraphFont:    null,\n            labelsIngraphSize:    null,\n            labelsIngraphColor:   null,\n            labelsIngraphBold:    null,\n            labelsIngraphItalic:  null,\n            labelsIngraphOffsetx: 0,\n            labelsIngraphOffsety: 0,\n\n            labelsAbove:           false,\n            labelsAboveDecimals:  0,\n            labelsAboveSize:      null,\n            labelsAboveColor:     null,\n            labelsAboveBold:      null,\n            labelsAboveItalic:    null,\n            labelsAboveFont:      null,\n            labelsAbovePoint:     '.',\n            labelsAboveThousand:  ',',\n            labelsAboveBackground:'rgba(0,0,0,0)',\n            labelsAboveAngle:     null,\n            labelsAboveOffset:    null,\n            labelsAboveOffsetx:   0,\n            labelsAboveOffsety:   0,\n            labelsAboveUnitsPre: '',\n            labelsAboveUnitsPost:'',\n            labelsAboveFormatter:null,\n\n            yaxis:                    true,\n            yaxisLinewidth:           1,\n            yaxisColor:               'black',\n            yaxisTickmarks:           true,\n            yaxisTickmarksCount:      null,\n            yaxisTickmarksLastTop:    null,\n            yaxisTickmarksLastBottom: null,\n            yaxisTickmarksLength:     3,\n            yaxisScale:               true,\n            yaxisScaleMin:            0,\n            yaxisScaleMax:            null,\n            yaxisScaleUnitsPre:       '',\n            yaxisScaleUnitsPost:      '',\n            yaxisScaleDecimals:       0,\n            yaxisScalePoint:          '.',\n            yaxisScaleThousand:       ',',\n            yaxisScaleRound:          false,\n            yaxisScaleFormatter:      null,\n            yaxisLabelsSpecific:      null,\n            yaxisLabelsCount:         5,\n            yaxisLabelsOffsetx:       0,\n            yaxisLabelsOffsety:       0,\n            yaxisLabelsHalign:        null,\n            yaxisLabelsValign:        null,\n            yaxisLabelsFont:          null,\n            yaxisLabelsSize:          null,\n            yaxisLabelsColor:         null,\n            yaxisLabelsBold:          null,\n            yaxisLabelsItalic:        null,\n            yaxisLabelsPosition:      'edge',\n            yaxisPosition:            'left',\n            yaxisTitle:               '',\n            yaxisTitleAccessible:     null,\n            yaxisTitleBold:           null,\n            yaxisTitleSize:           null,\n            yaxisTitleFont:           null,\n            yaxisTitleColor:          null,\n            yaxisTitleItalic:         null,\n            yaxisTitlePos:            null,\n            yaxisTitleX:              null,\n            yaxisTitleY:              null,\n            yaxisTitleOffsetx:        0,\n            yaxisTitleOffsety:        0,\n            yaxisTitleHalign:         null,\n            yaxisTitleValign:         null,\n            yaxisTitleAccessible:     null,\n\n            xaxis:                   true,\n            xaxisLinewidth:          1,\n            xaxisColor:              'black',\n            xaxisTickmarks:          true,\n            xaxisTickmarksLength:    3,\n            xaxisTickmarksLastLeft:  null,\n            xaxisTickmarksLastRight: null,\n            xaxisTickmarksCount:  null,\n            xaxisLabels:          null,\n            xaxisLabelsSize:      null,\n            xaxisLabelsFont:      null,\n            xaxisLabelsItalic:    null,\n            xaxisLabelsBold:      null,\n            xaxisLabelsColor:     null,\n            xaxisLabelsFormattedDecimals:       0,\r\n            xaxisLabelsFormattedPoint:          '.',\r\n            xaxisLabelsFormattedThousand:       ',',\r\n            xaxisLabelsFormattedUnitsPre:       '',\r\n            xaxisLabelsFormattedUnitsPost:      '',\n            xaxisLabelsOffsetx:                 0,\n            xaxisLabelsOffsety:                 0,\n            xaxisLabelsHalign:                  null,\n            xaxisLabelsValign:                  null,\n            xaxisLabelsPosition:                'section',\n            xaxisLabelsSpecificAlign:           'left',\n            xaxisPosition:                      'bottom',\n            xaxisLabelsAngle:                   0,\n            xaxisTitle:                         '',\n            xaxisTitleBold:       null,\n            xaxisTitleSize:       null,\n            xaxisTitleFont:       null,\n            xaxisTitleColor:      null,\n            xaxisTitleItalic:     null,\n            xaxisTitlePos:        null,\n            xaxisTitleOffsetx:    0,\n            xaxisTitleOffsety:    0,\n            xaxisTitleX:          null,\n            xaxisTitleY:          null,\n            xaxisTitleHalign:     null,\n            xaxisTitleValign:     null,\n\n            textItalic:                   false,\n            textBold:                     false,\n            textColor:                    'black',\n            textSize:                     12,\n            textFont:                     'Arial, Verdana, sans-serif',\n            textAccessible:               true,\n            textAccessibleOverflow:      'visible',\n            textAccessiblePointerevents: false,\n            text:                        null,\n            \n            \n            title:                  '',\n            titleX:                null,\n            titleY:                null,\n            titleHalign:           null,\n            titleValign:           null,\n            titleBackground:       null,\n            titleHpos:             null,\n            titleVpos:             null,\n            titleFont:             null,\n            titleSize:             null,\n            titleColor:            null,\n            titleBold:             null,\n            titleItalic:           null,\n            titleOffsetx:          0,\n            titleOffsety:          0,\n\n            colorsStroke:          'rgba(0,0,0,0)',\n            colors:                 ['red','#0f0','blue','pink','orange','cyan','black','white','green','magenta'],\n            colorsSequential:      false,\n            colorsReverse:         false,\n\n            grouping:               'grouped',\n\n            variant:                'bar',\n            variantSketchVerticals: true,\n            variantThreedXaxis:   true,\n            variantThreedYaxis:   true,\n            variantThreedAngle:   0.1,\n            variantThreedOffsetx: 10,\n            variantThreedOffsety: 5,\n\n            shadow:                false,\n            shadowColor:           '#aaa',\n            shadowOffsetx:         0,\n            shadowOffsety:         0,\n            shadowBlur:            15,\n\n            tooltips:                   null,\n            tooltipsEffect:             'slide',\n            tooltipsCssClass:           'RGraph_tooltip',\n            tooltipsCss:                null,\n            tooltipsEvent:              'onclick',\n            tooltipsHighlight:          true,\n            tooltipsHotspotXonly:       false,\n            tooltipsFormattedThousand:  ',',\n            tooltipsFormattedPoint:     '.',\n            tooltipsFormattedDecimals:  0,\n            tooltipsFormattedUnitsPre:  '',\n            tooltipsFormattedUnitsPost: '',\n            tooltipsFormattedKeyColors: null,\n            tooltipsFormattedKeyColorsShape: 'square',\n            tooltipsFormattedKeyLabels: [],\n            tooltipsFormattedListType:  'ul',\n            tooltipsFormattedListItems: null,\n            tooltipsFormattedTableHeaders: null,\n            tooltipsFormattedTableData: null,\n            tooltipsPointer:            true,\n            tooltipsPositionStatic:     true,\n\n            highlightStroke:       'rgba(0,0,0,0)',\n            highlightFill:         'rgba(255,255,255,0.7)',\n\n            key:                    null,\n            keyBackground:         'white',\n            keyPosition:           'graph',\n            keyShadow:             false,\n            keyShadowColor:       '#666',\n            keyShadowBlur:        3,\n            keyShadowOffsetx:     2,\n            keyShadowOffsety:     2,\n            keyPositionMarginBoxed:false,\n            keyPositionX:         null,\n            keyPositionY:         null,\n            keyInteractive:        false,\n            keyInteractiveHighlightChartStroke:'black',\n            keyInteractiveHighlightChartFill:'rgba(255,255,255,0.7)',\n            keyInteractiveHighlightLabel:'rgba(255,0,0,0.2)',\n            keyHalign:             'right',\n            keyColorShape:        'square',\n            keyRounded:            true,\n            keyLinewidth:          1,\n            keyColors:             null,\n            keyLabelsColor:       null,\n            keyLabelsSize:        null,\n            keyLabelsFont:        null,\n            keyLabelsBold:        null,\n            keyLabelsItalic:      null,\n            keyLabelsOffsetx:     0,\n            keyLabelsOffsety:     0,\n\n            contextmenu:            null,\n\n            crosshairs:             false,\n            crosshairsColor:       '#333',\n            crosshairsHline:       true,\n            crosshairsVline:       true,\n\n            linewidth:              1,\n\n            annotatable:            false,\n            annotatableLinewidth:  1,\n            annotatableColor:      'black',\n\n            adjustable:             false,\n            adjustableOnly:        null,\n            \n            beveled:               false,\n\n            errorbars:              false,\n            errorbarsColor:        'black',\n            errorbarsCapped:        true,\n            errorbarsCappedWidth:  14,\n            errorbarsLinewidth:     1,\n\n            combinedEffect:    null,\n            combinedEffectOptions:  null,\n            combinedEffectCallback: null,\n\n            corners:            'square',\n            cornersRoundRadius: 10,\n\n            clearto:   'rgba(0,0,0,0)'\n        }\n\n        // Check for support\n        if (!this.canvas) {\n            alert('[BAR] No canvas support');\n            return;\n        }\n\n\n        //\n        // Convert strings into numbers. Also converts undefined elements to null\n        //\n        data = RGraph.stringsToNumbers(data);\n\n\n\n\n        //\n        // Determine whether the chart will contain stacked or grouped bars\n        //\n        for (var i=0; i<data.length; ++i) {\n            if (typeof data[i] === 'object' && !RGraph.isNull(data[i])) {\n                this.stackedOrGrouped = true;\n            }\n        }\n\n\n        //\n        // Create the dollar objects so that functions can be added to them\n        //\n        var linear_data = RGraph.arrayLinearize(data);\n\n        for (var i=0; i<linear_data.length; ++i) {\n            this['$' + i] = {};\n        }\n\n\n        // Store the data and set the orignal_data to it\n        this.data = data;\n        this.original_data = RGraph.arrayClone(data);\n\n\n        // Used to store the coords of the bars\n        this.coords     = [];\n        this.coords2    = [];\n        this.coordsText = [];\n\n\n\n        //\n        // This linearises the data. Doing so can make it easier to pull\n        // out the appropriate data from tooltips\n        //\n        this.data_arr = RGraph.arrayLinearize(this.data);\n\n\n\n\n\n        // Easy access to  properties and the path function\n        var properties = this.properties;\n        this.path      = RGraph.pathObjectFunction;\n\n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.Effects && typeof RGraph.Effects.decorate === 'function') {\n            RGraph.Effects.decorate(this);\n        }\n        \n        \n        \n        // Add the responsive method. This method resides in the common file.\n        this.responsive = RGraph.responsive;\n\n\n\n\n\n\n        //\n        // A setter\n        //\n        // @param name  string The name of the property to set\n        // @param value mixed  The value of the property\n        //\n        this.set = function (name)\n        {\n            var value = typeof arguments[1] === 'undefined' ? null : arguments[1];\n\n            // Some BC for the bevelled property\n            if (name === 'bevelled') {\n                name = 'beveled';\n            }\n\n            // the number of arguments is only one and it's an\n            // object - parse it for configuration data and return.\n            if (arguments.length === 1 && typeof arguments[0] === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        this.set(i, arguments[0][i]);\n                    }\n                }\n\n                return this;\n            }\n\n            properties[name] = value;\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter\n        //\n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            return properties[name];\n        };\n\n\n\n\n\n\n\n\n        //\n        // The function you call to draw the bar chart\n        //\n        this.draw = function ()\n        {\n            //\n            // Fire the onbeforedraw event\n            //\n            RGraph.fireCustomEvent(this, 'onbeforedraw');\n            \n            // Translate half a pixel for antialiasing purposes - but only if it hasn't been\n            // done already\n            //\n            // MUST be the first thing done!\n            //\n            if (!this.canvas.__rgraph_aa_translated__) {\n                this.context.translate(0.5,0.5);\n            \n                this.canvas.__rgraph_aa_translated__ = true;\n            }\n\n            // MUST be the second thing done!\n            if (typeof properties.backgroundImage === 'string') {\n                RGraph.drawBackgroundImage(this);\n            }\n\n\n\n\n\n\n\n\n            //\n            // If the X axis is at the top then all the\n            // data-points should be negative\n            //\n            if (properties.xaxisPosition === 'top') {\n                for (var i=0; i<this.data.length; ++i) {\n                    if (typeof this.data[i] === 'object' && properties.grouping === 'grouped') {\n                        for (var j=0;j<this.data[i].length; ++j) {\n                            this.data[i][j] = Math.abs(this.data[i][j]) * -1;\n                        }\n                    } else if (typeof this.data[i] === 'number') {\n                        this.data[i] = Math.abs(this.data[i]) * -1;\n                    }\n                }\n            }\n\n\n\n\n\n\n\n\n\n            //\n            // If the chart is 3d then angle it\n            //\n            if (properties.variant === '3d') {\n                if (properties.textAccessible) {\n                    // Nada\n                } else {\n                    this.context.setTransform(1,properties.variantThreedAngle,0,1,0.5,0.5);\n                }\n            }\n\n\n\n            //\n            // Parse the colors. This allows for simple gradient syntax\n            //\n            if (!this.colorsParsed) {\n                this.parseColors();\n\n                // Don't want to do this again\n                this.colorsParsed = true;\n            }\n\n\n\n            //\n            // Make the margins easy ro access\n            //\n            this.marginLeft   = properties.marginLeft;\n            this.marginRight  = properties.marginRight;\n            this.marginTop    = properties.marginTop;\n            this.marginBottom = properties.marginBottom;\n            \n\n\n\n\n            //\n            // Check for tooltips and alert the user that they're not supported\n            // with pyramid charts\n            //\n            if (   (properties.variant == 'pyramid' || properties.variant == 'dot')\n                && typeof properties.tooltips == 'object'\n                && properties.tooltips\n                && properties.tooltips.length > 0) {\n\n                alert('[BAR] (' + this.id + ') Sorry, tooltips are not supported with dot or pyramid charts');\n            }\n\n            //\n            // Stop the coords arrays from growing uncontrollably\n            //\n            this.coords     = [];\n            this.coords2    = [];\n            this.coordsText = [];\n\n            //\n            // Work out a few things. They need to be here because they depend on things you can change before you\n            // call Draw() but after you instantiate the object\n            //\n            this.max            = 0;\n            this.grapharea      = this.canvas.height - this.marginTop - this.marginBottom;\n            this.halfgrapharea  = this.grapharea / 2;\n            this.halfTextHeight = properties.textSize / 2;\n\n\n\n\n\n            // Now draw the background on to the main canvas\n            RGraph.Background.draw(this);\n\n\n\n\n\n\n\n\n\n            //If it's a sketch chart variant, draw the axes first\n            //if (properties.variant == 'sketch') {\n            //    this.drawAxes();\n            //    this.drawbars();\n            //} else {\n                this.drawbars();\n                this.drawAxes();\n            //}\n            this.drawLabels();\n\n\n            //\n            // Draw the bevel if required\n            //\n            if (properties.beveled || properties.beveled) {\n                this.drawBevel();\n            }\n\n\n            // Draw the key if necessary\n            if (properties.key && properties.key.length) {\n                RGraph.drawKey(\n                    this,\n                    properties.key,\n                    properties.colors\n                );\n            }\n\n\n            //\n            // Setup the context menu if required\n            //\n            if (properties.contextmenu) {\n                RGraph.showContext(this);\n            }\n\n\n\n\n            //\n            // Draw errorbars\n            //\n            if (properties.errorbars) {\n                this.drawErrorbars();\n            }\n\n\n\n\n            //\n            // Draw \"in graph\" labels\n            //\n            if (properties.labelsIngraph) {\n                RGraph.drawInGraphLabels(this);\n            }\n\n\n\n\n            //\n            // Add custom text thats specified\n            //  \n            RGraph.addCustomText(this);\n\n\n\n\n            //\n            // This installs the event listeners\n            //\n            RGraph.installEventListeners(this);\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.fireCustomEvent(this, 'onfirstdraw');\n                this.firstDrawFunc();\n            }\n\n\n            //\n            // Fire the RGraph draw event\n            //\n            RGraph.fireCustomEvent(this, 'ondraw');\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        //\n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the charts axes\n        //\n        this.drawAxes = function ()\n        {\n            if (RGraph.ISSAFARI == -1) {\n                this.context.lineCap = 'square';\n            }\n\n            //\n            // If the xaxisLabels option is a string then turn it\n            // into an array.\n            //\n            if (properties.xaxisLabels && properties.xaxisLabels.length) {\n                if (typeof properties.xaxisLabels === 'string') {\n                    properties.xaxisLabels = RGraph.arrayPad({\n                        array:  [],\n                        length: this.data.length,\n                        value:  properties.xaxisLabels\n                    });\n                }\n\n                // Label substitution\n                //\n                for (var i=0; i<properties.xaxisLabels.length; ++i) {\n                    properties.xaxisLabels[i] = RGraph.labelSubstitution({\n                        object:    this,\n                        text:      properties.xaxisLabels[i],\n                        index:     i,\n                        value:     this.data[i],\n                        decimals:  properties.xaxisLabelsFormattedDecimals  || 0,\n                        unitsPre:  properties.xaxisLabelsFormattedUnitsPre  || '',\n                        unitsPost: properties.xaxisLabelsFormattedUnitsPost || '',\n                        thousand:  properties.xaxisLabelsFormattedThousand  || ',',\n                        point:     properties.xaxisLabelsFormattedPoint     || '.'\n                    });\n                }\n            }\n\n            //\n            // The new common X axis drawing function\n            RGraph.drawXAxis(this);\n\n\n            //\n            // The new common Y axis drawing function\n            RGraph.drawYAxis(this);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the bars\n        //\n        this.drawbars = function ()\n        {\n            this.context.lineWidth   = properties.linewidth;\n            this.context.strokeStyle = properties.colorsStroke;\n            this.context.fillStyle   = properties.colors[0];\n\n            var prevX    = 0,\n                prevY    = 0,\n                decimals = properties.yaxisScaleDecimals;\n\n\n            //\n            // Work out the max value\n            //\n            if (properties.yaxisScaleMax) {\n\n                this.scale2 = RGraph.getScale({object: this, options: {\n                    'scale.max':         properties.yaxisScaleMax,\n                    'scale.strict':      properties.yaxisScaleRound ? false : true,\n                    'scale.min':         properties.yaxisScaleMin,\n                    'scale.thousand':    properties.yaxisScaleThousand,\n                    'scale.point':       properties.yaxisScalePoint,\n                    'scale.decimals':    properties.yaxisScaleDecimals,\n                    'scale.labels.count':properties.yaxisLabelsCount,\n                    'scale.round':       properties.yaxisScaleRound,\n                    'scale.units.pre':   properties.yaxisScaleUnitsPre,\n                    'scale.units.post':  properties.yaxisScaleUnitsPost,\n                    'scale.formatter':   properties.yaxisScaleFormatter\n                }});\n\n            } else {\n\n                //\n                // If errorbars are given as a number then convert the nuumber to an\n                // array.\n                //\n                var errorbars = properties.errorbars;\n\n                if (typeof errorbars === 'number') {\n\n                    var value = errorbars;\n\n                    properties.errorbars = [];\n\n                    for (var i=0; i<this.data.length; ++i) {\n                        if (typeof this.data[i] === 'number') {\n                            properties.errorbars.push([value, null]);\n\n                        } else if (typeof this.data[i] === 'object' && !RGraph.isNull(this.data[i])) {\n                            for (var j=0; j<this.data[i].length; ++j) {\n                                properties.errorbars.push([value, null]);\n                            }\n                        }\n                    }\n\n                    errorbars = properties.errorbars;\n                }\n\n\n\n\n\n\n\n\n                for (i=0; i<this.data.length; ++i) {\n                    if (typeof this.data[i] == 'object') {\n                        var value = properties.grouping === 'grouped' ? Number(RGraph.arrayMax(this.data[i], true)) : Number(RGraph.arraySum(this.data[i]));\n\n                    } else {\n                        var value = Number(this.data[i]);\n                    }\n\n                    this.max = Math.max(Math.abs(this.max), Math.abs(value) +\n\n                        Number(\n                            (\n                                   typeof properties.errorbars === 'object'\n                                && typeof properties.errorbars[i] === 'object'\n                                && !RGraph.isNull(properties.errorbars[i])\n                                && typeof properties.errorbars[i][0] === 'number'\n                            ) ? properties.errorbars[i][0]  : 0\n                        )\n                    );\n                }\n\n\n\n\n\n\n\n                this.scale2 = RGraph.getScale({object: this, options: {\n                    'scale.max':         this.max,\n                    'scale.min':         properties.yaxisScaleMin,\n                    'scale.thousand':    properties.yaxisScaleThousand,\n                    'scale.point':       properties.yaxisScalePoint,\n                    'scale.decimals':    properties.yaxisScaleDecimals,\n                    'scale.labels.count':properties.yaxisLabelsCount,\n                    'scale.round':       properties.yaxisScaleRound,\n                    'scale.units.pre':   properties.yaxisScaleUnitsPre,\n                    'scale.units.post':  properties.yaxisScaleUnitsPost,\n                    'scale.formatter':   properties.yaxisScaleFormatter\n                }});\n\n                this.max = this.scale2.max;\n            }\n\n            //\n            // if the chart is adjustable fix the scale so that it doesn't change.\n            //\n            if (properties.adjustable && !properties.yaxisScaleMax) {\n                this.set('yaxisScaleMax', this.scale2.max);\n            }\n\n            //\n            // Draw horizontal bars here\n            //\n            if (properties.backgroundHbars && properties.backgroundHbars.length > 0) {\n                RGraph.drawBars(this);\n            }\n\n            var variant = properties.variant;\n\n            //\n            // Draw the 3D axes is necessary\n            //\n            if (variant === '3d') {\n                RGraph.draw3DAxes(this);\n            }\n\n            //\n            // Get the variant once, and draw the bars, be they regular, stacked or grouped\n            //\n\n            // Get these variables outside of the loop\n            var xaxispos      = properties.xaxisPosition,\n                width         = (this.canvas.width - this.marginLeft - this.marginRight ) / this.data.length,\n                orig_height   = height,\n                hmargin       = properties.marginInner,\n                shadow        = properties.shadow,\n                shadowColor   = properties.shadowColor,\n                shadowBlur    = properties.shadowBlur,\n                shadowOffsetX = properties.shadowOffsetx,\n                shadowOffsetY = properties.shadowOffsety,\n                strokeStyle   = properties.colorsStroke,\n                colors        = properties.colors,\n                sequentialColorIndex = 0\n\n            var height;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            //\n            // Loop through the data\n            //\n            for (i=0,len=this.data.length; i<len; i+=1) {\n\n\n\n\n\n                // Work out the height\n                //The width is up outside the loop\n                if (RGraph.arraySum(this.data[i]) < 0) {\n                    var height = (RGraph.arraySum(this.data[i]) + this.scale2.min)  / (this.scale2.max - this.scale2.min);\n                } else {\n                    var height = (RGraph.arraySum(this.data[i]) - this.scale2.min) / (this.scale2.max - this.scale2.min);\n                }\n\n                height *= Math.abs(this.getYCoord(this.scale2.max) - this.getYCoord(this.scale2.min));\n\n\n\n\n\n\n                var x = (i * width) + this.marginLeft;\n                var y = xaxispos == 'center' ? ((this.canvas.height - this.marginTop - this.marginBottom) / 2) + this.marginTop - height\n                                             : this.canvas.height - height - this.marginBottom;\n\n                // xaxispos is top\n                if (xaxispos == 'top') {\n                    y = this.marginTop;\n                }\n\n\n                // Account for negative lengths - Some browsers don't like a negative value\n                if (height < 0) {\n                    y += height;\n                    height = Math.abs(height);\n                }\n\n\n\n\n\n\n                //\n                // Turn on the shadow if need be\n                //\n                if (shadow) {\n                    this.context.shadowColor   = shadowColor;\n                    this.context.shadowBlur    = shadowBlur;\n                    this.context.shadowOffsetX = shadowOffsetX;\n                    this.context.shadowOffsetY = shadowOffsetY;\n                }\n\n                //\n                // Draw the bar\n                //\n                this.context.beginPath();\n                    if (typeof this.data[i] == 'number') {\n\n\n                        // If the Y axis is offset change the bar start (the top of the bar)\n                        if (xaxispos === 'bottom' && properties.yaxisScaleMin < 0) {\n                            if (this.data[i] >= 0) {\n                                height = Math.abs(this.getYCoord(0) - this.getYCoord(this.data[i]));\n                            } else {\n                                y = this.getYCoord(0);\n                                height = Math.abs(this.getYCoord(0) - this.getYCoord(this.data[i]));\n                            }\n                        }\n\n                        var barWidth = width - (2 * hmargin);\n\n                        //\n                        // Check for a negative bar width\n                        //\n                        if (barWidth < 0) {\n                            alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n                        }\n\n                        // Set the fill color\n                        this.context.strokeStyle = strokeStyle;\n                        this.context.fillStyle = colors[0];\n\n                        //\n                        // Sequential colors\n                        //\n                        if (properties.colorsSequential) {\n                            this.context.fillStyle = colors[i];\n                        }\n\n                        if (variant == 'sketch') {\n\n                            this.context.lineCap = 'round';\n\n                            var sketchOffset = 3;\n\n                            this.context.beginPath();\n\n                            this.context.strokeStyle = colors[0];\n\n                            //\n                            // Sequential colors\n                            //\n                            if (properties.colorsSequential) {\n                                this.context.strokeStyle = colors[i];\n                            }\n\n                            // Left side\n                            this.context.moveTo(x + hmargin + 2, y + height - 2);\n                            this.context.lineTo(x + hmargin -    1, y - 4);\n\n                            // The top\n                            this.context.moveTo(x + hmargin - 3, y + -2 + (this.data[i] < 0 ? height : 0));\n                            this.context.quadraticCurveTo(\n                                x + hmargin + ((width - hmargin - hmargin) / 4),\n                                y + 0 + (this.data[i] < 0 ? height : 0) + (this.data[i] > 0 ? 10 : -10),\n                                \n                                x + hmargin + width + -1 - hmargin - hmargin,\n                                y + 0 + (this.data[i] < 0 ? height : 0)\n                            );\n\n\n                            // The right side\n                            this.context.moveTo(x + hmargin + width - 5 - hmargin - hmargin, y  - 5);\n                            this.context.lineTo(x + hmargin + width - 3 - hmargin - hmargin, y + height - 3);\n\n\n\n\n                            // Draw the inner-bar verticals\n                            if (properties.variantSketchVerticals) {\n                                for (var r=0.2; r<=0.8; r+=0.2) {\n                                \n                                    this.context.moveTo(\n                                        x + hmargin + ((width - hmargin - hmargin) * r),\n                                        y - 1\n                                    );\n                                    this.context.lineTo(\n                                        x + hmargin + ((width - hmargin - hmargin) * r),\n                                        y + height + (r == 0.2 ? 1 : -2)\n                                    );\n                                }\n                            }\n\n\n\n\n                            this.context.stroke();\n\n                        // Regular bar\n                        } else if (variant == 'bar' || variant == '3d' || variant == 'glass' || variant == 'bevel') {\n\n                            if (variant == 'glass') {\n                                RGraph.roundedRect({\n                                    context: this.context,\n                                          x: x + hmargin,\n                                          y: y,\n                                      width: barWidth,\n                                     height: height,\n                                     radius: 5,\n                                    roundtl: this.data[i] > 0,\n                                    roundtr: this.data[i] > 0,\n                                    roundbl: this.data[i] < 0,\n                                    roundbr: this.data[i] < 0\n                                });\n                                this.context.stroke();\n                                this.context.fill();\n                            } else {\n                                // On 9th April 2013 these two were swapped around so that the stroke happens SECOND so that any\n                                // shadow that is cast by the fill does not overwrite the stroke\n\n// Why is this here?\n//this.path(\n//    'b r % % % % f',\n//    x + hmargin, y, barWidth, height\n//);\n\n\n                                // Turn the shadow off so that the stroke doesn't cast any \"extra\" shadow\n                                // that would show inside the bar\n                                //\n                                // 31/07/21 Removed as regular bar charts weren't showing shadows\n                                //\n                                //RGraph.noShadow(this);\n\n                                if (properties.corners === 'round') {\n\n                                    this.context.beginPath();\n                                    this.context.lineCap  = 'miter';\n                                    this.context.lineJoin = 'square';\n\n                                    (this.data[i] < 0)\n                                        ? this.roundedCornersRectNegative(x + hmargin,y,barWidth,height)\n                                        : this.roundedCornersRect(x + hmargin,y,barWidth,height);\n\n                                    this.context.stroke();\n                                    this.context.fill();\n\n                                } else {\n\n                                    this.context.beginPath();\n                                    this.context.lineJoin = 'miter';\n                                    this.context.lineCap  = 'square';\n                                    this.context.rect(x + hmargin,y,barWidth,height);\n                                    this.context.stroke();\n                                    this.context.fill();\n                                }\n                            }\n\n                            // 3D effect\n                            if (variant == '3d') {\n\n                                var prevStrokeStyle = this.context.strokeStyle;\n                                var prevFillStyle   = this.context.fillStyle;\n\n                                // Draw the top (if the value is positive - otherwise there's no point)\n                                if (this.data[i] >= 0) {\n                                    this.context.beginPath();\n                                        this.context.moveTo(x + hmargin, y);\n                                        this.context.lineTo(x + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(x + hmargin + properties.variantThreedOffsetx + barWidth, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(x + hmargin + barWidth, y);\n                                    this.context.closePath();\n\n                                    this.context.stroke();\n                                    this.context.fill();\n                                }\n\n                                // Draw the right hand side\n                                this.context.beginPath();\n                                    this.context.moveTo(x + hmargin + barWidth, y);\n                                    this.context.lineTo(\n                                        x + hmargin + barWidth + properties.variantThreedOffsetx,\n                                        this.data[i] < 0 && xaxispos === 'bottom' ?\n                                            this.getYCoord(0) : (\n                                                  this.data[i] < 0 && (y - properties.variantThreedOffsety)\n                                                < (this.marginTop + this.halfgrapharea)\n\n                                                ?\n\n                                                (this.marginTop + this.halfgrapharea)\n\n                                                : (y - properties.variantThreedOffsety))\n                                    );\n\nthis.context.lineTo(\n    x + hmargin + barWidth + properties.variantThreedOffsetx,\n\n\n      this.data[i] < 0 && (y - properties.variantThreedOffsety + height) < (this.marginTop + this.getYCoord(0))\n    ? this.getYCoord(this.data[i]) - properties.variantThreedOffsety\n    : (this.data[i] > 0 ?\n        y - properties.variantThreedOffsety + height :\n        Math.min(y - properties.variantThreedOffsety + height, this.canvas.height - this.marginBottom)\n       )\n);\n                                    this.context.lineTo(x + hmargin + barWidth, y + height);\n                                this.context.closePath();\n                                this.context.stroke();\n                                this.context.fill();\n\n\n\n\n                                // Draw the lighter top section\n                                if (this.data[i] > 0) {\n                                    this.context.beginPath();\n                                        this.context.fillStyle = 'rgba(255,255,255,0.5)';\n                                        this.context.moveTo(x + hmargin, y);\n                                        this.context.lineTo(x + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(x + hmargin + properties.variantThreedOffsetx + barWidth, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(x + hmargin + barWidth, y);\n                                        this.context.lineTo(x + hmargin, y);\n                                    this.context.closePath();\n                                    this.context.stroke();\n                                    this.context.fill();\n                                }\n\n\n\n\n                                // Draw the darker right side section\n                                this.context.beginPath();\n                                    this.context.fillStyle = 'rgba(0,0,0,0.4)';\n                                    // TL\n                                    this.context.moveTo(x + hmargin + barWidth, y);\n\n                                    // TR\n                                    this.context.lineTo(\n                                        x + hmargin + barWidth + properties.variantThreedOffsetx,\n                                        this.data[i] < 0 && xaxispos === 'bottom' ? this.getYCoord(0) : (this.data[i] < 0 && (y - properties.variantThreedOffsety) < (this.marginTop + this.halfgrapharea) ? (this.marginTop + this.halfgrapharea) : y - properties.variantThreedOffsety)\n                                    );\n\n                                    // BR\n                                    this.context.lineTo(\n                                        x + hmargin + barWidth + properties.variantThreedOffsetx,\n\n                                          this.data[i] < 0 && (y - properties.variantThreedOffsety + height) < this.getYCoord(0)\n                                        ? this.getYCoord(0)\n                                        : this.data[i] > 0 ? y - properties.variantThreedOffsety + height : Math.min(y - properties.variantThreedOffsety + height, this.canvas.height - this.marginBottom)\n                                    );\n                                    // BL\n                                    this.context.lineTo(x + hmargin + barWidth, y + height);\n                                    this.context.lineTo(x + hmargin + barWidth, y);\n                                this.context.closePath();\n\n                                this.context.stroke();\n                                this.context.fill();\n\n                                this.context.strokeStyle = prevStrokeStyle;\n                                this.context.fillStyle   = prevFillStyle;\n\n                            // Glass variant\n                            } else if (variant == 'glass') {\n\n                                var grad = this.context.createLinearGradient(x + hmargin,y,x + hmargin + (barWidth / 2),y);\n                                grad.addColorStop(0, 'rgba(255,255,255,0.9)');\n                                grad.addColorStop(1, 'rgba(255,255,255,0.5)');\n\n                                this.context.beginPath();\n                                this.context.fillStyle = grad;\n                                this.context.rect(\n                                    x + hmargin + 3,\n                                    y + (this.data[i] > 0 ? 3 : 0),\n                                    (barWidth / 2) - 2,\n                                    height - 2\n                                );\n                                this.context.fill();\n                            }\n\n\n                        // Dot chart\n                        } else if (variant == 'dot') {\n\n\n                            this.context.beginPath();\n                            this.context.strokeStyle = this.properties.colors[0];\n                            this.context.moveTo(x + (width / 2), y);\n                            this.context.lineTo(x + (width / 2), y + height);\n                            this.context.stroke();\n\n                            this.context.beginPath();\n                            this.context.fillStyle = this.properties.colors[i];\n                            this.context.arc(\n                                x + (width / 2),\n                                y + (this.data[i] > 0 ? 0 : height),\n                                2,\n                                0,\n                                6.28,\n                                0\n                            );\n\n                            // Set the colour for the dots\n                            this.context.fillStyle = properties.colors[0];\n\n                            //\n                            // Sequential colors\n                            //\n                            if (properties.colorsSequential) {\n                                this.context.fillStyle = colors[i];\n                            }\n\n                            this.context.stroke();\n                            this.context.fill();\n\n\n\n                        // Unknown variant type\n                        } else {\n                            alert('[BAR] Warning! Unknown variant: ' + variant);\n                        }\n\n                        this.coords.push([x + hmargin, y, width - (2 * hmargin), height]);\n\n                            if (typeof this.coords2[i] == 'undefined') {\n                                this.coords2[i] = [];\n                            }\n                            this.coords2[i].push([x + hmargin, y, width - (2 * hmargin), height]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    //\n                    // Stacked bar\n                    //\n                    } else if (this.data[i] && typeof this.data[i] == 'object' && properties.grouping == 'stacked') {\n\n                        if (this.scale2.min) {\n                            alert(\"[ERROR] Stacked Bar charts with a Y min are not supported\");\n                        }\n\n                        var barWidth     = width - (2 * hmargin);\n                        var redrawCoords = [];// Necessary to draw if the shadow is enabled\n                        var startY       = 0;\n                        var dataset      = this.data[i];\n\n                        //\n                        // Check for a negative bar width\n                        //\n                        if (barWidth < 0) {\n                            alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n                        }\n\n                        for (j=0; j<dataset.length; ++j) {\n\n                            // Stacked bar chart and X axis pos in the middle - poitless since negative values are not permitted\n                            if (xaxispos == 'center') {\n                                alert(\"[BAR] It's pointless having the X axis position at the center on a stacked bar chart.\");\n                                return;\n                            }\n\n                            // Negative values not permitted for the stacked chart\n                            if (this.data[i][j] < 0) {\n                                alert('[BAR] Negative values are not permitted with a stacked bar chart. Try a grouped one instead.');\n                                return;\n                            }\n\n                            //\n                            // Set the fill and stroke colors\n                            //\n                            this.context.strokeStyle = strokeStyle\n                            this.context.fillStyle = colors[j];\n\n                            if (properties.colorsReverse) {\n                                this.context.fillStyle = colors[this.data[i].length - j - 1];\n                            }\n\n                            if (properties.colorsSequential && colors[sequentialColorIndex]) {\n                                this.context.fillStyle = colors[sequentialColorIndex++];\n                            } else if (properties.colorsSequential) {\n                                this.context.fillStyle = colors[sequentialColorIndex - 1];\n                            }\n\n                            var height = (dataset[j] / this.scale2.max) * (this.canvas.height - this.marginTop - this.marginBottom );\n\n                            // If the X axis pos is in the center, we need to half the  height\n                            if (xaxispos == 'center') {\n                                height /= 2;\n                            }\n\n                            var totalHeight = (RGraph.arraySum(dataset) / this.scale2.max) * (this.canvas.height - hmargin - this.marginTop - this.marginBottom);\n\n                            //\n                            // Store the coords for tooltips\n                            //\n                            this.coords.push([x + hmargin, y, width - (2 * hmargin), height]);\n                            if (typeof this.coords2[i] == 'undefined') {\n                                this.coords2[i] = [];\n                            }\n                            this.coords2[i].push([x + hmargin, y, width - (2 * hmargin), height]);\n\n\n                            if (height > 0) {\n                                \n                                // TODO Handle xaxisPosition=top here\n                                if (j === 0 && properties.corners === 'round' && properties.xaxisPosition === 'bottom') {\n                                    this.context.beginPath();\n                                    this.context.lineCap  = 'miter';\n                                    this.context.lineJoin = 'square';\n                                    this.roundedCornersRect(x + hmargin, y, width - (2 * hmargin), height);\n                                    this.context.stroke();\n                                    this.context.fill();\n                                \n                                } else if (j === (dataset.length - 1) && properties.corners === 'round' && properties.xaxisPosition === 'top') {\n                                    this.context.beginPath();\n                                    this.context.lineCap  = 'miter';\n                                    this.context.lineJoin = 'square';\n                                    this.roundedCornersRectNegative(x + hmargin, y, width - (2 * hmargin), height);\n                                    this.context.stroke();\n                                    this.context.fill();\n                                \n                                } else {\n                                    this.path(\n                                        'b lj % lc % r % % % % s % f %',\n                                        'miter','square',\n                                        x + hmargin, y, width - (2 * hmargin), height,\n                                        this.context.strokeStyle,\n                                        this.context.fillStyle\n                                    );\n                                }\n                            }\n\n\n                            if (j == 0) {\n                                var startY = y;\n                                var startX = x;\n                            }\n\n                            //\n                            // Store the redraw coords if the shadow is enabled\n                            //\n                            if (shadow) {\n                                redrawCoords.push([x + hmargin, y, width - (2 * hmargin), height, this.context.fillStyle]);\n                            }\n\n                            //\n                            // Stacked 3D effect\n                            //\n                            if (variant == '3d') {\n\n                                var prevFillStyle = this.context.fillStyle;\n                                var prevStrokeStyle = this.context.strokeStyle;\n\n\n                                // Draw the top side\n                                if (j == 0) {\n                                    this.context.beginPath();\n                                        this.context.moveTo(startX + hmargin, y);\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + hmargin, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + barWidth + hmargin, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + barWidth + hmargin, y);\n                                    this.context.closePath();\n\n                                    this.context.fill();\n                                    this.context.stroke();\n                                }\n\n                                // Draw the side section\n                                this.context.beginPath();\n                                    this.context.moveTo(startX + barWidth + hmargin, y);\n                                    this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n                                    this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety + height);\n                                    this.context.lineTo(startX + barWidth + hmargin , y + height);\n                                this.context.closePath();\n\n                                this.context.fill();\n                                this.context.stroke();\n\n                                // Draw the lighter top side\n                                if (j == 0) {\n                                    this.context.fillStyle = 'rgba(255,255,255,0.5)';\n                                    this.context.beginPath();\n                                        this.context.moveTo(startX + hmargin, y);\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + hmargin, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + barWidth + hmargin, y - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + barWidth + hmargin, y);\n                                    this.context.closePath();\n\n                                    this.context.fill();\n                                    this.context.stroke();\n                                }\n\n                                // Draw the darker side section\n                                this.context.fillStyle = 'rgba(0,0,0,0.4)';\n                                this.context.beginPath();\n                                    this.context.moveTo(startX + barWidth + hmargin, y);\n                                    this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety);\n                                    this.context.lineTo(startX + barWidth + hmargin + properties.variantThreedOffsetx, y - properties.variantThreedOffsety + height);\n                                    this.context.lineTo(startX + barWidth + hmargin , y + height);\n                                this.context.closePath();\n\n                                this.context.fill();\n                                this.context.stroke();\n\n                                this.context.strokeStyle = prevStrokeStyle;\n                                this.context.fillStyle = prevFillStyle;\n                            }\n\n                            y += height;\n                        }\n\n\n\n                        //\n                        // Redraw the bars if the shadow is enabled due to hem being drawn from the bottom up, and the\n                        // shadow spilling over to higher up bars\n                        //\n                        if (shadow) {\n\n                            RGraph.noShadow(this);\n\n                            for (k=0; k<redrawCoords.length; ++k) {\n                                this.context.strokeStyle = strokeStyle;\n                                this.context.fillStyle = redrawCoords[k][4];\n                                this.context.strokeRect(redrawCoords[k][0], redrawCoords[k][1], redrawCoords[k][2], redrawCoords[k][3]);\n                                this.context.fillRect(redrawCoords[k][0], redrawCoords[k][1], redrawCoords[k][2], redrawCoords[k][3]);\n\n                                this.context.stroke();\n                                this.context.fill();\n                            }\n\n                            // Reset the redraw coords to be empty\n                            redrawCoords = [];\n                        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    //\n                    // Grouped bar\n                    //\n                    } else if (this.data[i] && typeof this.data[i] == 'object' && properties.grouping == 'grouped') {\n\n                        var redrawCoords = [];\n                        this.context.lineWidth = properties.linewidth;\n\n                        for (j=0; j<this.data[i].length; ++j) {\n\n                            // Set the fill and stroke colors\n                            this.context.strokeStyle = strokeStyle;\n                            this.context.fillStyle   = colors[j];\n\n                            //\n                            // Sequential colors\n                            //\n                            if (properties.colorsSequential && colors[sequentialColorIndex]) {\n                                this.context.fillStyle = colors[sequentialColorIndex++];\n                            } else if (properties.colorsSequential) {\n                                this.context.fillStyle = colors[sequentialColorIndex - 1];\n                            }\n\n                            var individualBarWidth = (width - (2 * hmargin)) / this.data[i].length;\n                            var height = ((this.data[i][j] + (this.data[i][j] < 0 ? this.scale2.min : (-1 * this.scale2.min) )) / (this.scale2.max - this.scale2.min) ) * (this.canvas.height - this.marginTop - this.marginBottom );\n                            var groupedMargin = properties.marginInnerGrouped;\n                            var startX = x + hmargin + (j * individualBarWidth);\n\n                            //\n                            // Check for a negative bar width\n                            //\n                            if (individualBarWidth < 0) {\n                                alert('[RGRAPH] Warning: you have a negative bar width. This may be caused by the marginInner being too high or the width of the canvas not being sufficient.');\n                            }\n\n                            // If the X axis pos is in the center, we need to half the  height\n                            if (xaxispos == 'center') {\n                                height /= 2;\n                            }\n\n                            //\n                            // Determine the start positioning for the bar\n                            //\n                            if (xaxispos == 'top') {\n                                var startY = this.marginTop;\n                                var height = Math.abs(height);\n\n                            } else if (xaxispos == 'center') {\n                                var startY = this.marginTop + (this.grapharea / 2) - height;\n\n                            } else {\n                                var startY = this.getYCoord(0);//this.canvas.height - this.marginBottom - height;\n                                var height = Math.abs(Math.abs(this.getYCoord(this.data[i][j])) - this.getYCoord(0));\n\n                                if (this.data[i][j] >= 0) {\n                                    startY -= height;\n                                }\n\n                            }\n\n                            if (properties.corners === 'round') {\n\n                                this.context.beginPath();\n                                this.context.lineCap  = 'miter';\n                                this.context.lineJoin = 'square';\n\n                                (this.data[i][j]  < 0)\n                                    ? this.roundedCornersRectNegative(startX + groupedMargin, startY, individualBarWidth - (2 * groupedMargin), height)\n                                    : this.roundedCornersRect(startX + groupedMargin, startY, individualBarWidth - (2 * groupedMargin), height);\n\n                                this.context.stroke();\n                                this.context.fill();\n\n                            } else {\n\n                                this.context.beginPath();\n                                this.context.lineJoin = 'miter';\n                                this.context.lineCap  = 'square';\n                                this.context.rect(startX + groupedMargin, startY, individualBarWidth - (2 * groupedMargin), height);\n                                this.context.stroke();\n                                this.context.fill();\n                            }\n\n                            y += height;\n\n\n\n                            //\n                            // Grouped 3D effect\n                            //\n                            if (variant == '3d') {\n\n                                var prevFillStyle   = this.context.fillStyle;\n                                var prevStrokeStyle = this.context.strokeStyle;\n                                var hmarginGrouped  = properties.marginInnerGrouped;\n\n                                // Draw the top side\n                                if (this.data[i][j]  >= 0) {\n\n                                    this.context.beginPath();\n                                        this.context.moveTo(startX + hmarginGrouped, startY);\n                                        this.context.lineTo(startX + hmarginGrouped + properties.variantThreedOffsetx, startY - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + individualBarWidth - hmarginGrouped, startY - properties.variantThreedOffsety);\n                                        this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY);\n                                    this.context.closePath();\n                                    this.context.fill();\n                                    this.context.stroke();\n                                }\n\n                                // Draw the side section\n                                this.context.beginPath();\n                                    this.context.moveTo(\n                                        startX + individualBarWidth - hmarginGrouped - 1,\n                                        startY\n                                    );\n                                    \n                                    this.context.lineTo(\n                                        startX + individualBarWidth - hmarginGrouped + properties.variantThreedOffsetx,\n                                        this.data[i][j] < 0\n                                            ? (this.getYCoord(0) + Math.abs(height) - properties.variantThreedOffsety) - (properties.xaxisPosition === 'center'\n                                                                                                                             ? 0\n                                                                                                                             : Math.abs(height) - this.properties.variantThreedOffsety)\n                                            : this.getYCoord(0) - height - properties.variantThreedOffsety\n                                    );\n\n                                    this.context.lineTo(\n                                        startX + individualBarWidth - hmarginGrouped + properties.variantThreedOffsetx,\n                                        this.data[i][j] < 0 && (startY + height - properties.variantThreedOffsety) < this.getYCoord(0)\n                                            ? (this.getYCoord(0))\n                                            : (startY + height - properties.variantThreedOffsety)\n                                    );\n                                    this.context.lineTo(startX + individualBarWidth - hmarginGrouped - 1, startY + height);\n                                this.context.closePath();\n\n                                this.context.fill();\n                                this.context.stroke();\n\n\n                                // Draw the lighter top side - but only if the current value is positive\n                                if (this.data[i][j] >= 0) {\n                                    this.context.fillStyle = 'rgba(255,255,255,0.5)';\n                                    this.context.beginPath();\n                                        // BL\n                                        this.context.moveTo(startX + hmarginGrouped, startY);\n\n                                        // BR\n                                        this.context.lineTo(startX + hmarginGrouped + properties.variantThreedOffsetx, startY - properties.variantThreedOffsety);\n\n                                        // TR\n                                        this.context.lineTo(startX + properties.variantThreedOffsetx + individualBarWidth - hmarginGrouped, startY - properties.variantThreedOffsety);\n\n                                        // TL\n                                        this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY);\n                                    this.context.closePath();\n\n                                    this.context.fill();\n                                    this.context.stroke();\n                                }\n\n                                // Draw the darker side section\n                                this.context.fillStyle = 'rgba(0,0,0,0.4)';\n                                \n                                this.context.beginPath();\n                                    \n                                    this.context.moveTo(\n                                        startX + individualBarWidth - hmarginGrouped,\n                                        startY\n                                    );\n\n\n                                    this.context.lineTo(\n                                        startX + individualBarWidth + properties.variantThreedOffsetx - hmarginGrouped,\n                                        this.data[i][j] < 0\n                                         ? (this.getYCoord(0) + Math.abs(height) - properties.variantThreedOffsety) - (properties.xaxisPosition === 'center' ? 0 : Math.abs(height) - this.properties.variantThreedOffsety)\n                                         : this.getYCoord(0) - height - properties.variantThreedOffsety\n                                    );\n\n                                    this.context.lineTo(\n                                        startX + individualBarWidth + properties.variantThreedOffsetx - hmarginGrouped,\n                                        +this.data[i][j] < 0 && (startY + height - 5) < this.getYCoord(0)\n                                            ? ((height > this.properties.variantThreedOffsety) ? this.getYCoord(0) + height - this.properties.variantThreedOffsety : this.getYCoord(0))\n                                            : (startY + height - properties.variantThreedOffsety)\n                                    );\n\n                                    // TL corner\n                                    this.context.lineTo(startX + individualBarWidth - hmarginGrouped, startY + height);\n                                this.context.closePath();\n\n                                this.context.fill();\n                                this.context.stroke();\n\n                                this.context.strokeStyle = prevStrokeStyle;\n                                this.context.fillStyle   = prevFillStyle;\n                            }\n\n                            if (height < 0) {\n                                height = Math.abs(height);\n                                startY = startY - height;\n                            }\n\n                            this.coords.push([startX + groupedMargin, startY, individualBarWidth - (2 * groupedMargin), height]);\n                            if (typeof this.coords2[i] == 'undefined') {\n                                this.coords2[i] = [];\n                            }\n\n                            this.coords2[i].push([startX + groupedMargin, startY, individualBarWidth - (2 * groupedMargin), height]);\n\n                            // Facilitate shadows going to the left\n                            if (properties.shadow) {\n                                redrawCoords.push([\n                                    startX + groupedMargin,\n                                    startY,\n                                    individualBarWidth - (2 * groupedMargin),\n                                    height,\n                                    this.context.fillStyle\n                                ]);\n                            }\n                        }\n\n\n\n\n\n\n\n                        //\n                        // Redraw the bar if shadows are going to the left\n                        //\n                        if (redrawCoords.length) {\n\n                            RGraph.noShadow(this);\n\n                            this.context.lineWidth = properties.linewidth;\n\n                            this.context.beginPath();\n                                for (var j=0; j<redrawCoords.length; ++j) {\n\n                                    this.context.fillStyle   = redrawCoords[j][4];\n                                    this.context.strokeStyle = properties.colorsStroke;\n\n                                    this.context.fillRect(redrawCoords[j][0], redrawCoords[j][1], redrawCoords[j][2], redrawCoords[j][3]);\n                                    this.context.strokeRect(redrawCoords[j][0], redrawCoords[j][1], redrawCoords[j][2], redrawCoords[j][3]);\n                                }\n                            this.context.fill();\n                            this.context.stroke();\n\n                            redrawCoords = [];\n                        }\n                    } else {\n                        this.coords.push([]);\n                    }\n\n                this.context.closePath();\n            }\n\n            // If 3D, redraw the right hand Y axis\n            if (properties.variant === '3d' && properties.yaxisPosition === 'right') {\n                RGraph.draw3DYAxis(this);\n            }\n\n\n\n\n\n            //\n            // Turn off any shadow\n            //\n            RGraph.noShadow(this);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the labels for the graph. As of version 5.2 this no longer\n        // draws the X axis labels\n        //\n        this.drawLabels = function ()\n        {\n            //\n            // Draw above labels - nothing else todo here now that there\n            // are common drawXAxis() and drawYAxis() functions.\n            //\n            this.drawAboveLabels();\n        };\n\n\n\n\n\n\n\n\n        //\n        // Not used by the class during creating the graph, but is used by event handlers\n        // to get the coordinates (if any) of the selected bar\n        //\n        // @param object e The event object\n        // @param object   OPTIONAL You can pass in the bar object instead of the\n        //                          function using \"this\"\n        //\n        this.getShape = function (e)\n        {\n            // This facilitates you being able to pass in the bar object as a parameter instead of\n            // the function getting it from itself\n            var obj = arguments[1] ? arguments[1] : this;\n\n            var mouseXY = RGraph.getMouseXY(e),\n                mouseX  = mouseXY[0],\n                mouseY  = mouseXY[1],\n                canvas  = obj.canvas,\n                context = obj.context,\n                coords  = obj.coords\n\n            for (var i=0,len=coords.length; i<len; i+=1) {\n\n                if (obj.coords[i].length == 0) {\n                    continue;\n                }\n\n                var left   = coords[i][0],\n                    top    = coords[i][1],\n                    width  = coords[i][2],\n                    height = coords[i][3];\n\n                // Old way of testing\n                //if (mouseX >= left && mouseX <= (left + width) && mouseY >= top && mouseY <= (top + height)) {\n\n                // Recreate the path/rectangle so that it can be tested\n                //  ** DO NOT STROKE OR FILL IT **\n                if (properties.tooltipsHotspotXonly) {\n                    this.path(\n                        'b r % % % %',\n                        left, this.marginTop, width, this.canvas.height - this.marginBottom\n                    );\n                } else {\n                    var indexes = RGraph.sequentialIndexToGrouped(i, this.data);\n\n                    // Use the rounded rect function if the chart is stacked and the index is 0\n                    if (properties.grouping === 'stacked' && properties.corners === 'round' && indexes[1] === 0) {\n                        this.context.beginPath();\n                        this.roundedCornersRect(left, top, width, height);\n                    } else {\n                         this.path(\n                            'b r % % % %',\n                            left, top, width, height\n                        );\n                    }\n                }\n\n                if (this.context.isPointInPath(mouseX, mouseY)) {\n\n\n                    if (properties.tooltips && RGraph.parseTooltipText) {\n                        var tooltip = RGraph.parseTooltipText(properties.tooltips, i);\n                    }\n\n                    // Work out the dataset\n                    var dataset = 0,\n                        idx     = i\n\n                    while (idx >=  (typeof obj.data[dataset] === 'object' && obj.data[dataset] ? obj.data[dataset].length : 1)) {\n\n                        if (typeof obj.data[dataset] === 'number') {\n                            idx -= 1;\n                        } else if (obj.data[dataset]) { // Accounts for null being an object\n                            idx -= obj.data[dataset].length;\n                        } else {\n                            idx -= 1;\n                        }\n\n                        dataset++;\n                    }\n\n                    if (typeof obj.data[dataset] == 'number') {\n                        idx = 0;\n                    }\n\n\n                    return {\n                    object: this,\n                         x: left,\n                         y: top,\n                     width: width,\n                    height: height,\n                   tooltip: typeof tooltip === 'string' ? tooltip : null,\n                     label: properties.xaxisLabels && typeof properties.xaxisLabels[dataset] === 'string' ? properties.xaxisLabels[dataset] : null,\n                   dataset: dataset,\n                     index: idx,\n           sequentialIndex: i\n                    };\n                }\n            }\n\n            return null;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This retrives the bar based on the X coordinate only.\n        //\n        // @param object e The event object\n        // @param object   OPTIONAL You can pass in the bar object instead of the\n        //                          function using \"this\"\n        //\n        this.getShapeByX = function (e)\n        {\n            var canvas      = e.target;\n            var mouseCoords = RGraph.getMouseXY(e);\n\n\n            // This facilitates you being able to pass in the bar object as a parameter instead of\n            // the function getting it from itself\n            var obj = arguments[1] ? arguments[1] : this;\n\n\n            //\n            // Loop through the bars determining if the mouse is over a bar\n            //\n            for (var i=0,len=obj.coords.length; i<len; i++) {\n\n                if (obj.coords[i].length == 0) {\n                    continue;\n                }\n\n                var mouseX = mouseCoords[0];\n                var mouseY = mouseCoords[1];\n                var left   = obj.coords[i][0];\n                var top    = obj.coords[i][1];\n                var width  = obj.coords[i][2];\n                var height = obj.coords[i][3];\n\n                if (mouseX >= left && mouseX <= (left + width)) {\n\n                    if (properties.tooltips) {\n                        var tooltip = RGraph.parseTooltipText ? RGraph.parseTooltipText(properties.tooltips, i) : properties.tooltips[i];\n                    }\n                    \n                    var indexes = RGraph.sequentialIndexToGrouped(i, this.data);\n\n                    return {\n                        object: obj,\n                             x: left,\n                             y: top,\n                         width: width,\n                        height: height,\n                       dataset: indexes[0],\n                         index: indexes[1],\n               sequentialIndex: i,\n                       tooltip: typeof tooltip === 'string' ? tooltip : null\n                    };\n                }\n            }\n\n            return null;\n        };\n\n\n\n\n\n\n\n\n        //\n        // When you click on the chart, this method can return the Y value at that point. It works for any point on the\n        // chart (that is inside the margins) - not just points within the Bars.\n        //\n        // EITHER:\n        //\n        // @param object arg The event object\n        //\n        // OR:\n        //\n        // @param object arg A two element array containing the X and Y coordinates\n        //\n        this.getValue = function (arg)\n        {\n            if (arg.length == 2) {\n                var mouseX = arg[0];\n                var mouseY = arg[1];\n            } else {\n                var mouseCoords = RGraph.getMouseXY(arg);\n                var mouseX      = mouseCoords[0];\n                var mouseY      = mouseCoords[1];\n            }\n\n            if (   mouseY < properties.marginTop\n                || mouseY > (this.canvas.height - properties.marginBottom)\n                || mouseX < properties.marginLeft\n                || mouseX > (this.canvas.width - properties.marginRight)\n               ) {\n                return null;\n            }\n\n            if (properties.xaxisPosition == 'center') {\n                var value = (((this.grapharea / 2) - (mouseY - properties.marginTop)) / this.grapharea) * (this.scale2.max - this.scale2.min)\n                value *= 2;\n\n                if (value >= 0) {\n                    value += this.scale2.min;\n                } else {\n                    value -= this.scale2.min;\n                }\n\n            } else if (properties.xaxisPosition == 'top') {\n                var value = ((this.grapharea - (mouseY - properties.marginTop)) / this.grapharea) * (this.scale2.max - this.scale2.min)\n                value = this.scale2.max - value;\n                value = Math.abs(value) * -1;\n            } else {\n                var value = ((this.grapharea - (mouseY - properties.marginTop)) / this.grapharea) * (this.scale2.max - this.scale2.min)\n                value += this.scale2.min;\n            }\n\n\n\n\n            return value;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function can be used when the canvas is clicked on (or similar - depending on the event)\n        // to retrieve the relevant Y coordinate for a particular value.\n        //\n        // @param int value The value to get the Y coordinate for\n        //\n        this.getYCoord = function (value)\n        {\n            if (value > this.scale2.max) {\n                return null;\n            }\n\n            var y, xaxispos = properties.xaxisPosition;\n\n            if (xaxispos == 'top') {\n\n                // Account for negative numbers\n                if (value < 0) {\n                    value = Math.abs(value);\n                }\n\n                y = ((value - this.scale2.min) / (this.scale2.max - this.scale2.min)) * this.grapharea;\n                y = y + this.marginTop\n\n            } else if (xaxispos == 'center') {\n\n                y = ((value - this.scale2.min) / (this.scale2.max - this.scale2.min)) * (this.grapharea / 2);\n                y = (this.grapharea / 2) - y;\n                y += this.marginTop;\n\n            } else {\n\n                if (value < this.scale2.min) {\n                    value = this.scale2.min;\n                }\n\n                y  = ((value - this.scale2.min) / (this.scale2.max - this.scale2.min));\n                y *= (this.canvas.height - this.marginTop - this.marginBottom);\n\n                y = this.canvas.height - this.marginBottom - y;\n            }\n\n            return y;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Each object type has its own Highlight() function which highlights the appropriate shape\n        //\n        // @param object shape The shape to highlight\n        //\n        this.highlight = function (shape)\n        {\n            if (typeof properties.highlightStyle === 'function') {\n                (properties.highlightStyle)(shape);\n            \n            // Highlight all of the rects except this one - essentially an inverted highlight\n            } else if (typeof properties.highlightStyle === 'string' && properties.highlightStyle === 'invert') {\n                for (var i=0; i<this.coords.length; ++i) {\n                    if (i !== shape.sequentialIndex) {\n                        this.path(\n                            'b r % % % % s % f %',\n                            this.coords[i][0],this.coords[i][1],this.coords[i][2],this.coords[i][3],\n                            properties.highlightStroke,\n                            properties.highlightFill\n                        );\n                    }\n                }\n                \n            } else {\n                if (properties.grouping === 'stacked' && shape.index === 0 && properties.xaxisPosition === 'bottom') {\n                \n                    this.context.beginPath();\n                    this.context.strokeStyle = properties.highlightStroke;\n                    this.context.fillStyle   = properties.highlightFill;\n                    \n                    if (properties.corners === 'round') {\n                        this.roundedCornersRect(shape.x,shape.y,shape.width,shape.height);\n                    } else {\n                        this.context.rect(shape.x, shape.y, shape.width, shape.height);\n                    }\n\n                    this.context.stroke();\n                    this.context.fill();\n                } else {\n                    // Add the new highlight\n                    RGraph.Highlight.rect(this, shape);\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // The getObjectByXY() worker method\n        //\n        this.getObjectByXY = function (e)\n        {\n            var mouseXY = RGraph.getMouseXY(e);\n            var shape   = this.getShape(e);\n\n            // Adjust the mouse Y coordinate for when the bar chart is\n            // a 3D variant if the textAccessible wrapper DIV is not here\n            if (properties.variant === '3d' && !properties.textAccessible) {\n                var adjustment = properties.variantThreedAngle * mouseXY[0];\n                mouseXY[1] -= adjustment;\n            }\n\n\n\n            if (\n                   mouseXY[0] >= properties.marginLeft\n                && mouseXY[0] <= (this.canvas.width - properties.marginRight)\n                && mouseXY[1] >= properties.marginTop\n                && mouseXY[1] <= (this.canvas.height - properties.marginBottom)\n                ) {\n\n                return this;\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This method handles the adjusting calculation for when the mouse is moved\n        //\n        // @param object e The event object\n        //\n        this.adjusting_mousemove = function (e)\n        {\n            //\n            // Handle adjusting for the Bar\n            //\n            if (properties.adjustable && RGraph.Registry.get('adjusting') && RGraph.Registry.get('adjusting').uid == this.uid) {\n\n                // Rounding the value to the given number of decimals make the chart step\n                var value   = Number(this.getValue(e));\n                var shape   = RGraph.Registry.get('adjusting.shape')\n\n                if (shape) {\n\n                    RGraph.Registry.set('adjusting.shape', shape);\n\n                    if (this.stackedOrGrouped && properties.grouping == 'grouped') {\n\n                        var indexes = RGraph.sequentialIndexToGrouped(shape.sequentialIndex, this.data);\n\n                        if (typeof this.data[indexes[0]] == 'number') {\n                            this.data[indexes[0]] = Number(value);\n                        } else if (!RGraph.isNull(this.data[indexes[0]])) {\n                            this.data[indexes[0]][indexes[1]] = Number(value);\n                        }\n                    } else if (typeof this.data[shape.sequentialIndex] == 'number') {\n\n                        this.data[shape.sequentialIndex] = Number(value);\n                    }\n\n                    RGraph.redrawCanvas(e.target);\n                    RGraph.fireCustomEvent(this, 'onadjust');\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function ()\n        {\n            // Save the original colors so that they can be restored when the canvas is reset\n            if (this.original_colors.length === 0) {\n                this.original_colors.colors                = RGraph.arrayClone(properties.colors);\n                this.original_colors.keyColors             = RGraph.arrayClone(properties.keyColors);\n                this.original_colors.crosshairsColor       = properties.crosshairsColor;\n                this.original_colors.highlightStroke       = properties.highlightStroke;\n                this.original_colors.highlightFill         = properties.highlightFill;\n                this.original_colors.textColor             = properties.textColor;\n                this.original_colors.backgroundBarsColor1  = properties.backgroundBarsColor1;\n                this.original_colors.backgroundBarsColor2  = properties.backgroundBarsColor2;\n                this.original_colors.backgroundGridColor   = properties.backgroundGridColor;\n                this.original_colors.backgroundColor       = properties.backgroundColor;\n                this.original_colors.colorsStroke          = properties.colorsStroke;\n                this.original_colors.axesColor             = properties.axesColor;\n            }\n\n\n            // colors\n            var colors = properties.colors;\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = this.parseSingleColorForGradient(colors[i]);\n                }\n            }\n\n            // keyColors\n            var colors = properties.keyColors;\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = this.parseSingleColorForGradient(colors[i]);\n                }\n            }\n\n             properties.crosshairsColor      = this.parseSingleColorForGradient(properties.crosshairsColor);\n             properties.highlightStroke      = this.parseSingleColorForGradient(properties.highlightStroke);\n             properties.highlightFill        = this.parseSingleColorForGradient(properties.highlightFill);\n             properties.textColor            = this.parseSingleColorForGradient(properties.textColor);\n             properties.backgroundBarsColor1 = this.parseSingleColorForGradient(properties.backgroundBarsColor1);\n             properties.backgroundBarsColor2 = this.parseSingleColorForGradient(properties.backgroundBarsColor2);\n             properties.backgroundGridColor  = this.parseSingleColorForGradient(properties.backgroundGridColor);\n             properties.backgroundColor      = this.parseSingleColorForGradient(properties.backgroundColor);\n             properties.colorStroke          = this.parseSingleColorForGradient(properties.colorStroke);\n             properties.axesColor            = this.parseSingleColorForGradient(properties.axesColor);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Use this function to reset the object to the post-constructor state. Eg reset colors if\n        // need be etc\n        //\n        this.reset = function ()\n        {\n        };\n\n\n\n\n\n\n\n\n        //\n        // This parses a single color value. This method can also parse the new\n        // JSON gradient syntax.\n        // \n        // @param string The color to parse\n        //\n        this.parseSingleColorForGradient = function (color)\n        {\n            if (!color || typeof color != 'string') {\n                return color;\n            }\n\n            if (color.match(/^gradient\\((.*)\\)$/i)) {\n\n\n                // Allow for JSON gradients\n                if (color.match(/^gradient\\(({.*})\\)$/i)) {\n                    return RGraph.parseJSONGradient({object: this, def: RegExp.$1});\n                }\n\n\n                var parts = RegExp.$1.split(':');\n\n                // Create the gradient\n                var grad = this.context.createLinearGradient(0,this.canvas.height - properties.marginBottom, 0, properties.marginTop);\n                var diff = 1 / (parts.length - 1);\n\n                grad.addColorStop(0, RGraph.trim(parts[0]));\n\n                for (var j=1,len=parts.length; j<len; ++j) {\n                    grad.addColorStop(j * diff, RGraph.trim(parts[j]));\n                }\n            }\n\n            return grad ? grad : color;\n        };\n\n\n\n\n\n\n\n\n        this.drawBevel = function ()\n        {\n            var coords  = this.coords,\n                coords2 = this.coords2;\n\n            if (properties.grouping == 'stacked') {\n                for (var i=0; i<coords2.length; ++i) {\n                    if (coords2[i] && coords2[i][0] && coords2[i][0][0]) {\n\n                        var x = coords2[i][0][0];\n                        var y = coords2[i][0][1];\n                        var w = coords2[i][0][2];\n\n                        var arr = [];\n                        for (var j=0; j<coords2[i].length; ++j) {\n                            arr.push(coords2[i][j][3]);\n                        }\n                        var h = RGraph.arraySum(arr);\n\n\n                        this.context.save();\n\n                            this.context.strokeStyle = 'black';\n\n                            // Clip to the rect\n                            this.context.beginPath();\n                            this.context.rect(x, y, w, h);\n                            this.context.clip();\n\n                            // Add the shadow\n                            this.context.shadowColor = 'black';\n                            this.context.shadowOffsetX = 0;\n                            this.context.shadowOffsetY = 0;\n                            this.context.shadowBlur = 20;\n\n                            this.context.beginPath();\n                            this.context.rect(x - 3, y - 3, w + 6, h + 100);\n                            this.context.lineWidth = 5;\n                            this.context.stroke();\n                        this.context.restore();\n                    }\n                }\n            } else {\n\n                for (var i=0; i<coords.length; ++i) {\n                    if (coords[i]) {\n\n                        var x = coords[i][0];\n                        var y = coords[i][1];\n                        var w = coords[i][2];\n                        var h = coords[i][3];\n\n                        var xaxispos = properties.xaxisPosition;\n                        var xaxis_ycoord = ((this.canvas.height - this.marginTop - this.marginBottom) / 2) + this.marginTop;\n\n\n                        this.context.save();\n\n                            this.context.strokeStyle = 'black';\n\n                            // Clip to the rect\n                            this.context.beginPath();\n                            this.context.rect(x, y, w, h);\n\n                            this.context.clip();\n\n                            // Add the shadow\n                            this.context.shadowColor = 'black';\n                            this.context.shadowOffsetX = 0;\n                            this.context.shadowOffsetY = 0;\n                            this.context.shadowBlur =  20;\n\n                            if (xaxispos == 'top' || (xaxispos == 'center' && (y + h) > xaxis_ycoord)) {\n                                y = y - 100;\n                                h = h + 100;\n                            } else {\n                                y = y;\n                                h = h + 100;\n                            }\n\n                            this.context.beginPath();\n                                this.context.rect(x - 3, y - 3, w + 6, h + 6);\n                                this.context.lineWidth = 5;\n                            this.context.stroke();\n                        this.context.restore();\n                    }\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function handles highlighting an entire data-series for the interactive\n        // key\n        //\n        // @param int index The index of the data series to be highlighted\n        //\n        this.interactiveKeyHighlight = function (index)\n        {\n            var obj = this;\n\n            this.coords2.forEach(function (value, idx, arr)\n            {\n                if (typeof value[index] == 'object' && value[index]) {\n\n                    var x = value[index][0] - 0.5,\n                        y = value[index][1] - 0.5,\n                        w = value[index][2] + 1,\n                        h = value[index][3] + 1;\n\n                    obj.context.fillStyle   = properties.keyInteractiveHighlightChartFill;\n                    obj.context.strokeStyle = properties.keyInteractiveHighlightChartStroke;\n                    obj.context.lineWidth   = 2;\n                    obj.context.strokeRect(x, y, w, h);\n                    obj.context.fillRect(x, y, w, h);\n                }\n            });\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method chaining\n        //\n        // @param string   type The type of even to add\n        // @param function func\n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n              }\n\n            if (typeof this[type] !== 'function') {\n                this[type] = func;\n            } else {\n                RGraph.addCustomEventListener(this, type, func);\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        // Draws the above labels\n        this.drawLabelsAbove =\n        this.drawAboveLabels = function ()\n        {\n            var labels      = properties.labelsAbove,\n                specific    = properties.labelsAboveSpecific,\n                bold        = typeof properties.labelsAboveBold === 'boolean' ? properties.labelsAboveBold : properties.textBold,\n                italic      = typeof properties.labelsAboveItalic === 'boolean' ? properties.labelsAboveItalic : properties.textItalic,\n                color       = properties.labelsAboveColor || properties.textColor,\n                font        = properties.labelsAboveFont || properties.textFont,\n                size        = typeof properties.labelsAboveSize === 'number' ? properties.labelsAboveSize : properties.textSize,\n                background  = properties.labelsAboveBackground,\n                decimals    = properties.labelsAboveDecimals,\n                angle       = -1 * properties.labelsAboveAngle,\n                unitsPre    = properties.labelsAboveUnitsPre,\n                unitsPost   = properties.labelsAboveUnitsPost,\n                point       = properties.labelsAbovePoint,\n                thousand    = properties.labelsAboveThousand,\n                formatter   = properties.labelsAboveFormatter,\n                coords      = this.coords,\n                coords2     = this.coords2,\n                data        = this.data,\n                ldata       = RGraph.arrayLinearize(this.data),\n                offsetx     = properties.labelsAboveOffsetx,\n                offsety     = properties.labelsAboveOffsety,\n                text_italic = properties.textItalic,\n                text_bold   = properties.textBold,\n                text_color  = properties.textColor,\n                text_font   = properties.textFont,\n                text_size   = properties.textSize,\n                grouping    = properties.grouping;\n            \n            // BC\n            if (typeof properties.labelsAboveOffset === 'number') {\n                offsety = properties.labelsAboveOffset;\n            }\n            \n            var textConf = RGraph.getTextConf({\n                object: this,\n                prefix: 'labelsAbove'\n            });\n\n            // Turn off any shadow\n            RGraph.noShadow(this);\n\n            // Color\n            this.context.fillStyle = textConf.color;\n\n\n            // This bit draws the text labels that appear above the bars if requested\n            if (labels && grouping === 'grouped') {\n                for (var i=0,len=data.length,sequentialIndex=0; i<len; i+=1) {\n\n                    // Alignment for regular, positive bars\n                    if (typeof data[i] === 'number' && data[i] >= 0) {\n\n                        var angle  = angle;\n                        var halign = (angle ? 'left' : 'center');\n                        var valign = angle !== 0 ? 'center' : 'bottom';\n\n                        RGraph.text({\n                        \n                          object: this,\n\n                            font:   textConf.font,\n                            size:   textConf.size,\n                            color:  textConf.color,\n                            bold:   textConf.bold,\n                            italic: textConf.italic,\n\n                            x:    coords2[i][0][0] + (coords2[i][0][2] / 2) + offsetx,\n                            y:    coords2[i][0][1] - offsety,\n                            text: specific ? (specific[sequentialIndex] || '') : RGraph.numberFormat({\n                                object:    this,\n                                number:    Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n                                value:     Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n                                unitspre:  unitsPre,\n                                unitspost: unitsPost,\n                                point:     point,\n                                thousand:  thousand,\n                                formatter: formatter,\n                                dataset:   0,\n                                index:     i\n                            }),\n                            halign:            halign,\n                            valign:            valign,\n                            angle:             angle,\n                            marker:            false,\n                            bounding:          true,\n                            'bounding.fill':   background,\n                            'bounding.stroke': 'rgba(0,0,0,0)',\n                            tag:               'labels.above'\n                        });\n\n                        sequentialIndex++;\n\n\n\n\n\n\n                    // Alignment for regular, negative bars\n                    } else if (typeof data[i] === 'number' && data[i] < 0) {\n\n                        var angle  = angle;\n                        var halign = angle ? 'right' : 'center';\n                        var valign = angle !== 0 ? 'center' : 'top';\n\n\n                        RGraph.text({\n                        \n                          object: this,\n\n                            font:   textConf.font,\n                            size:   textConf.size,\n                            color:  textConf.color,\n                            bold:   textConf.bold,\n                            italic: textConf.italic,\n\n                            x:              coords2[i][0][0] + (coords2[i][0][2] / 2) + offsetx,\n                            y:              coords2[i][0][1] + coords2[i][0][3] + offsety,\n                            text: specific ? (specific[sequentialIndex] || '') : RGraph.numberFormat({\n                                object:    this,\n                                number:    Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n                                value:     Number(Number(typeof data[i] === 'object' ? data[i][0] : data[i]).toFixed(decimals)),\n                                unitspre:  unitsPre,\n                                unitspost: unitsPost,\n                                point:     point,\n                                thousand:  thousand,\n                                formatter: formatter,\n                                dataset:   0,\n                                index:     i,\n                            }),\n                            halign:         halign,\n                            valign:         valign,\n                            angle:          angle,\n                            bounding:       true,\n                            'bounding.fill':background,\n                            'bounding.stroke':'rgba(0,0,0,0)',\n                            marker:         false,\n                            tag:            'labels.above'\n                        });\n\n                        sequentialIndex++;\n\n\n\n\n\n\n                    // Alignment for grouped bars\n                    } else if (typeof data[i] === 'object') {\n\n                            for (var j=0,len2=data[i].length; j<len2; j+=1) {\n\n                                var angle  = angle;\n                                var halign = data[i][j] < 0 ? 'right' : 'left';\n                                    halign = angle === 0 ? 'center' : halign;\n                                var valign = data[i][j] < 0 ? 'top' : 'bottom';\n                                    valign = angle != 0 ? 'center' : valign;\n\n                                RGraph.text({\n                                \n                                  object: this,\n\n                                    font:   textConf.font,\n                                    size:   textConf.size,\n                                    color:  textConf.color,\n                                    bold:   textConf.bold,\n                                    italic: textConf.italic,\n\n                                    x:                  coords2[i][j][0] + (coords2[i][j][2] / 2) + offsetx,\n                                    y:                  properties.xaxisPosition === 'top' ? coords2[i][j][1] + coords2[i][j][3] + 5 : coords2[i][j][1] + (data[i][j] < 0 ? coords2[i][j][3] + offsety : -offsety),\n                                    text:               specific ? (specific[sequentialIndex] || '') : RGraph.numberFormat({\n                                                            object:    this,\n                                                            number:    Number(Number(data[i][j]).toFixed(decimals)),\n                                                            value:     Number(Number(data[i][j]).toFixed(decimals)),\n                                                            unitspre:  unitsPre,\n                                                            unitspost: unitsPost,\n                                                            point:     point,\n                                                            thousand:  thousand,\n                                                            formatter: formatter,\n                                                            dataset:   i,\n                                                            index:     j\n                                                        }),\n                                    halign:             halign,\n                                    valign:             properties.xaxisPosition === 'top' ? 'top' : valign,\n                                    angle:              angle,\n                                    bounding:           true,\n                                    'bounding.fill':    background,\n                                    'bounding.stroke':  'rgba(0,0,0,0)',\n                                    marker:             false,\n                                    tag:                'labels.above'\n                                });\n                                sequentialIndex++;\n                            }\n                    }\n                }\n\n\n\n\n\n            //\n            // STACKED bars\n            //\n            } else if (labels && grouping === 'stacked') {\n                for (var i=0,len=data.length,sequentialIndex=0; i<len; i+=1) {\n                    if (typeof data[i] === 'object') {\n\n                        var angle  = angle;\n                        var halign = angle != 0 ? 'left' : 'center';\n                        var valign = angle != 0 ? 'center' : 'bottom';\n\n                        RGraph.text({\n                        \n                          object: this,\n\n                            font:   textConf.font,\n                            size:   textConf.size,\n                            color:  textConf.color,\n                            bold:   textConf.bold,\n                            italic: textConf.italic,\n\n                            x:              coords2[i][0][0] + (coords2[i][0][2] / 2) + offsetx,\n                            y:              coords2[i][0][1] + (data[i][0] < 0 ? coords2[i][0][3] : 0) - offsety,\n                            text:           specific ? (specific[sequentialIndex] || '') : RGraph.numberFormat({\n                                                object:    this,\n                                                number:    Number(Number(RGraph.arraySum(data[i])).toFixed(decimals)),\n                                                value:     Number(Number(RGraph.arraySum(data[i])).toFixed(decimals)),\n                                                unitspre:  unitsPre,\n                                                unitspost: unitsPost,\n                                                point:     point,\n                                                thousand:  thousand,\n                                                formatter: formatter,\n                                                dataset:   i\n                                            }),\n                            halign:         halign,\n                            valign:         valign,\n                            angle:          angle,\n                            bounding:       true,\n                            'bounding.fill':background,\n                            'bounding.stroke': 'rgba(0,0,0,0)',\n                            marker:         false,\n                            tag:            'labels.above'\n                        });\n\n                        sequentialIndex += data[i].length;\n\n                    //\n                    // Regular numbers but in a stacked grouping\n                    //\n                    } else {\n\n                        var angle  = angle;\n                        var halign = angle != 0 ? 'left' : 'center';\n                        var valign = angle != 0 ? 'center' : 'bottom';\n\n                        RGraph.text({\n                        \n                          object: this,\n\n                            font:   textConf.font,\n                            size:   textConf.size,\n                            color:  textConf.color,\n                            bold:   textConf.bold,\n                            italic: textConf.italic,\n\n                            x:                  coords2[i][0][0] + (coords2[i][0][2] / 2) + offsetx,\n                            y:                  coords2[i][0][1] + (data[i][0] < 0 ? coords2[i][0][3] : 0) - offsety,\n                            text:               specific ? (specific[sequentialIndex] || '') : RGraph.numberFormat({\n                                                    object:    this,\n                                                    number:    Number(Number(data[i]).toFixed(decimals)),\n                                                    value:     Number(Number(data[i]).toFixed(decimals)),\n                                                    unitspre:  unitsPre,\n                                                    unitspost: unitsPost,\n                                                    point:     point,\n                                                    thousand:  thousand,\n                                                    formatter: formatter,\n                                                    dataset:   i\n                                                }),\n                            halign:             halign,\n                            valign:             valign,\n                            angle:              angle,\n                            bounding:           true,\n                            'bounding.fill':    background,\n                            'bounding.stroke':  'rgba(0,0,0,0)',\n                            marker:             false,\n                            tag:                'labels.above'\n                        });\n\n                        sequentialIndex++;\n                    }\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function runs once only\n        //\n        this.firstDrawFunc = function ()\n        {\n        };\n\n\n\n\n\n\n\n\n        //\n        // (new) Bar chart Wave effect. This is a rewrite that should be smoother\n        // because it just uses a single loop and not setTimeout\n        //\n        // @param object   OPTIONAL An object map of options. You specify 'frames' here to give the number of frames in the effect\n        // @param function OPTIONAL A function that will be called when the effect is complete\n        //\n        this.wave = function ()\n        {\n            // If there's only one bar call the grow function instead\n            if (this.data.length === 1) {\n                this.grow(arguments[0], arguments[1]);\n                return;\n            }\n\n            var obj = this,\n                opt = arguments[0] || {},\n                labelsAbove = this.get('labelsAbove');\n\n            opt.frames =  opt.frames || 60;\n            opt.startFrames = [];\n            opt.counters    = [];\n\n            var framesperbar   = opt.frames / 3,\n                frame          = -1,\n                callback       = arguments[1] || function () {},\n                original       = RGraph.arrayClone(this.original_data);\n\n            //\n            // turn off the labelsAbove option whilst animating\n            //\n            this.set('labelsAbove', false);\n\n            for (var i=0,len=obj.data.length; i<len; i+=1) {\n                opt.startFrames[i] = ((opt.frames / 2) / (obj.data.length - 1)) * i;\n\n                if (typeof obj.data[i] === 'object' && obj.data[i]) {\n                    opt.counters[i] = [];\n                    for (var j=0; j<obj.data[i].length; j++) {\n                        opt.counters[i][j] = 0;\n                    }\n                } else {\n                    opt.counters[i]    = 0;\n                }\n            }\n\n            //\n            // This stops the chart from jumping\n            //\n            obj.draw();\n            obj.set('yaxisScaleMax', obj.scale2.max);\n            RGraph.clear(obj.canvas);\n\n\n            function iterator ()\n            {\n                ++frame;\n\n                for (var i=0,len=obj.data.length; i<len; i+=1) {\n                        if (frame > opt.startFrames[i]) {\n                            if (typeof obj.data[i] === 'number') {\n\n                                obj.data[i] = Math.min(\n                                    Math.abs(original[i]),\n                                    Math.abs(original[i] * ( (opt.counters[i]++) / framesperbar))\n                                );\n\n                                // Make the number negative if the original was\n                                if (original[i] < 0) {\n                                    obj.data[i] *= -1;\n                                }\n                            } else if (!RGraph.isNull(obj.data[i])) {\n                                for (var j=0,len2=obj.data[i].length; j<len2; j+=1) {\n\n                                    obj.data[i][j] = Math.min(\n                                        Math.abs(original[i][j]),\n                                        Math.abs(original[i][j] * ( (opt.counters[i][j]++) / framesperbar))\n                                    );\n\n                                    // Make the number negative if the original was\n                                    if (original[i][j] < 0) {\n                                        obj.data[i][j] *= -1;\n                                    }\n                                }\n                            }\n                        } else {\n                            obj.data[i] = typeof obj.data[i] === 'object' && obj.data[i] ? RGraph.arrayPad([], obj.data[i].length, 0) : (RGraph.isNull(obj.data[i]) ? null : 0);\n                        }\n                }\n\n\n                if (frame >= opt.frames) {\n\n                    if (labelsAbove) {\n                        obj.set('labelsAbove', true);\n                        RGraph.redraw();\n                    }\n\n                    callback(obj);\n                } else {\n                    RGraph.redrawCanvas(obj.canvas);\n                    RGraph.Effects.updateCanvas(iterator);\n                }\n            }\n\n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Color Wave effect. This fades in color sequentially like the wave effect\n        // makes the bars grow.\n        //\n        // @param object   OPTIONAL An object map of options. You specify 'frames'\n        //                          here to give the number of frames in the effect\n        // @param function OPTIONAL A function that will be called when the effect\n        //                          is complete\n        //\n        this.colorwave =\n        this.colorWave = function ()\n        {\n            var obj = this,\n                opt = arguments[0] || {};\n                opt.frames =  opt.frames || 60;\n                opt.startFrames = [];\n                opt.counters    = [],\n                colors          = obj.properties.colors;\n\n            // If just one color is specified and colorsSequential is not, then\n            // pad the colors array out\n            if (colors.length <= obj.data.length) {\n                obj.set('colorsSequential', true);\n                colors =  RGraph.arrayPad(colors, obj.data.length, colors[colors.length - 1]);\n            }\n\n            var framesperbar   = opt.frames / 2,\n                frame          = -1,\n                callback       = arguments[1] || function () {},\n                originalColors = RGraph.arrayClone(obj.properties.colors);\n\n\n\n            for (var i=0,len=originalColors.length; i<len; i+=1) {\n                opt.startFrames[i] = ((opt.frames / 2) / (originalColors.length - 1)) * i;\n                opt.counters[i]    = 0;\n            }\n\n\n            function iterator ()\n            {\n                ++frame;\n\n                for (var i=0,len=colors.length; i<len; i+=1) {\n                    if (frame > opt.startFrames[i] && colors[i].match(/^rgba?\\(([0-9 ]+),([0-9 ]+),([0-9 ]+)(,([ 0-9.]+)?)\\)/)) {\n\n                        // DO NOT USE SPACES!\n                        colors[i] = 'rgba({1},{2},{3},{4})'.format(\n                            RegExp.$1,\n                            RegExp.$2,\n                            RegExp.$3,\n                            (frame - opt.startFrames[i]) / framesperbar\n                        );\n                    } else {\n                        colors[i] = colors[i].replace(/,[0-9. ]+\\)/, ',0)');\n                    }\n                }\n\n\n                if (frame >= opt.frames) {\n                    callback(obj);\n                } else {\n                    RGraph.redrawCanvas(obj.canvas);\n                    RGraph.Effects.updateCanvas(iterator);\n                }\n            }\n\n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Grow\n        //\n        // The Bar chart Grow effect gradually increases the values of the bars\n        //\n        // @param object       An object of options - eg: {frames: 30}\n        // @param function     A function to call when the effect is complete\n        //\n        this.grow = function ()\n        {\n            // Callback\n            var opt         = arguments[0] || {},\n                frames      = opt.frames || 30,\n                frame       = 0,\n                callback    = arguments[1] || function () {},\n                obj         = this,\n                labelsAbove = this.get('labelsAbove');\n\n\n            // Go through the data and change string arguments of the format +/-[0-9]\n            // to absolute numbers\n            if (RGraph.isArray(opt.data)) {\n\n                var ymax = 0;\n\n                for (var i=0; i<opt.data.length; ++i) {\n                    if (typeof opt.data[i] === 'object') {\n                        for (var j=0; j<opt.data[i].length; ++j) {\n                            if (typeof opt.data[i][j] === 'string'&& opt.data[i][j].match(/(\\+|\\-)([0-9]+)/)) {\n                                if (RegExp.$1 === '+') {\n                                    opt.data[i][j] = this.original_data[i][j] + parseInt(RegExp.$2);\n                                } else {\n                                    opt.data[i][j] = this.original_data[i][j] - parseInt(RegExp.$2);\n                                }\n                            }\n\n                            ymax = Math.max(ymax, opt.data[i][j]);\n                        }\n                    } else if (typeof opt.data[i] === 'string' && opt.data[i].match(/(\\+|\\-)([0-9]+)/)) {\n                        if (RegExp.$1 === '+') {\n                            opt.data[i] = this.original_data[i] + parseInt(RegExp.$2);\n                        } else {\n                            opt.data[i] = this.original_data[i] - parseInt(RegExp.$2);\n                        }\n                        ymax = Math.max(ymax, opt.data[i]);\n                    } else {\n                        ymax = Math.max(ymax, opt.data[i]);\n                    }\n                }\n\n\n                var scale = RGraph.getScale({object: this, options: {'scale.max':ymax}});\n\n                if (typeof properties.yaxisScaleMax !== 'number') {\n                    this.set('yaxisScaleMax', scale.max);\n                }\n            }\n\n            //\n            // turn off the labelsAbove option whilst animating\n            //\n            this.set('labelsAbove', false);\n\n\n            // Stop the scale from changing by setting yaxisScaleMax (if it's not already set)\n            if (properties.yaxisScaleMax == null) {\n\n                var ymax = 0;\n\n                for (var i=0; i<this.data.length; ++i) {\n                    if (RGraph.isArray(this.data[i]) && properties.grouping === 'stacked') {\n                        ymax = Math.max(ymax, Math.abs(RGraph.arraySum(this.data[i])));\n\n                    } else if (RGraph.isArray(this.data[i]) && properties.grouping === 'grouped') {\n\n                        for (var j=0,group=[]; j<this.data[i].length; j++) {\n                            group.push(Math.abs(this.data[i][j]));\n                        }\n\n                        ymax = Math.max(ymax, Math.abs(RGraph.arrayMax(group)));\n\n                    } else {\n                        ymax = Math.max(ymax, Math.abs(this.data[i]));\n                    }\n                }\n\n                var scale = RGraph.getScale({object: this, options: {'scale.max':ymax}});\n                this.set('yaxisScaleMax', scale.max);\n            }\n\n            // You can give a ymax to the grow function\n            if (typeof opt.ymax === 'number') {\n                this.set('yaxisScaleMax', opt.ymax);\n            }\n\n\n\n            var iterator = function ()\n            {\n                var easingMultiplier = RGraph.Effects.getEasingMultiplier(frames, frame);\n\n                // Alter the Bar chart data depending on the frame\n                for (var j=0,len=obj.original_data.length; j<len; ++j) {\n                    if (typeof obj.data[j] === 'object' && !RGraph.isNull(obj.data[j])) {\n                        for (var k=0,len2=obj.data[j].length; k<len2; ++k) {\n                            if (obj.firstDraw || !opt.data) {\n                                obj.data[j][k] = easingMultiplier * obj.original_data[j][k];\n                            } else if (opt.data && opt.data.length === obj.original_data.length) {\n                                var diff    = opt.data[j][k] - obj.original_data[j][k];\n                                obj.data[j][k] = (easingMultiplier * diff) + obj.original_data[j][k];\n                            }\n                        }\n                    } else {\n\n                        if (obj.firstDraw || !opt.data) {\n                            obj.data[j] = easingMultiplier * obj.original_data[j];\n                        } else if (opt.data && opt.data.length === obj.original_data.length) {\n                            var diff    = opt.data[j] - obj.original_data[j];\n                            obj.data[j] = (easingMultiplier * diff) + obj.original_data[j];\n                        }\n                    }\n                }\n\n\n\n\n                //RGraph.clear(obj.canvas);\n                RGraph.redrawCanvas(obj.canvas);\n\n\n\n\n                if (frame < frames) {\n                    frame += 1;\n\n                    RGraph.Effects.updateCanvas(iterator);\n\n                // Call the callback function\n                } else {\n\n                    // Do some housekeeping if new data was specified thats done in\n                    // the constructor - but needs to be redone because new data\n                    // has been specified\n                    if (RGraph.isArray(opt.data)) {\n\n                        var linear_data = RGraph.arrayLinearize(data);\n\n                        for (var i=0; i<linear_data.length; ++i) {\n                            if (!obj['$' + i]) {\n                                obj['$' + i] = {};\n                            }\n                        }\n                    }\n\n\n\n                    obj.data = data;\n                    obj.original_data = RGraph.arrayClone(data);\n\n\n\n\n                    if (labelsAbove) {\n                        obj.set('labelsAbove', true);\n                        RGraph.redraw();\n                    }\n                    callback(obj);\n                }\n            };\n\n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws error-bars for the Bar and Line charts\n        //\n        this.drawErrorbars = function ()\n        {\n            var coords = this.coords,\n                 color = properties.errorbarsColor || 'black',\n     default_halfwidth = Math.min(properties.errorbarsCappedWidth, coords[0][2]) / 2,\n                     x = 0,\n             errorbars = properties.errorbars,\n                length = 0;\n\n\n            // If not capped set the width of the cqap to zero\n            if (!properties.errorbarsCapped) {\n                properties.errorbarsCappedWidth = 0;\n                halfwidth = 0;\n            }\n\n            // Set the linewidth\n            this.context.lineWidth = properties.errorbarsLinewidth;\n\n\n\n\n            for (var i=0; i<coords.length; ++i) {\n            \n                var barX = coords[i][0],\n                    barY = coords[i][1],\n                    barW = coords[i][2],\n                    barH = coords[i][3];\n\n                // Get the grouped version of the index\n                var groupedIndexes = RGraph.sequentialIndexToGrouped(i, this.data);\n\n                // Determine if this is \n                if (typeof this.data[groupedIndexes[0]] === 'object' && !RGraph.isNull(this.data[groupedIndexes[0]])) {\n                    var isGrouped = true,\n                        group     = groupedIndexes[0],\n                        subgroup  = groupedIndexes[1];\n                }\n\n\n                // Default to black\n                color = properties.errorbarsColor || 'black';\n\n                // Set the perbar linewidth if the fourth option in the array\n                // is specified\n                if (errorbars[i] && typeof errorbars[i][3] === 'number') {\n                    this.context.lineWidth = errorbars[i][3];\n                }\n\n                // Set the halfwidth\n                var halfwidth = (errorbars[i]&& typeof errorbars[i][4] === 'number') ? errorbars[i][4] / 2 : default_halfwidth;\n\n                if (!properties.errorbarsCapped) {\n                    halfwidth = 0;\n                }\n\n\n\n                // Calulate the pixel size\n                if (typeof errorbars[i] === 'number') {\n\n                    length = Math.abs(this.getYCoord(errorbars[i]) - this.getYCoord(0));\n\n                    if (length) {\n                        this.path(\n                            'b % % l % % l % % l % % s %',\n                            barX + (barW / 2),\n                            (typeof this.data[i] === 'number' && this.data[i] < 0 || (isGrouped && this.data[group][subgroup] < 0) ) ? barY + barH : barY,\n                            barX + (barW / 2),\n                            (typeof this.data[i] === 'number' && this.data[i] < 0  || (isGrouped && this.data[group][subgroup] < 0)) ? barY + barH + length : barY - length,\n                            barX + (barW / 2) - halfwidth,\n                            (typeof this.data[i] === 'number' && this.data[i] < 0 || (isGrouped && this.data[group][subgroup] < 0)) ? Math.round(barY + barH + length) : Math.round(barY - length),\n                            barX + (barW / 2) + halfwidth,\n                            (typeof this.data[i] === 'number' && this.data[i] < 0  || (isGrouped && this.data[group][subgroup] < 0)) ? Math.round(barY + barH + length)  : Math.round(barY - length),\n                            color\n                        );\n                    }\n                } else if (typeof errorbars[i] === 'object' && !RGraph.isNull(errorbars[i])) {\n\n                    var positiveLength = Math.abs(this.getYCoord(errorbars[i][0]) - this.getYCoord(0));\n\n                    // Color\n                    if (typeof errorbars[i][1] === 'string') {\n                        color = errorbars[i][1];\n\n                    } else if (typeof errorbars[i][2] === 'string') {\n                        color = errorbars[i][2];\n                    }\n\n                    // Cap width\n                    halfwidth = typeof errorbars[i][4] === 'number' ? errorbars[i][4] / 2 : default_halfwidth;\n\n                    if (!properties.errorbarsCapped) {\n                        halfwidth = 0;\n                    }\n\n                    if (!RGraph.isNull(errorbars[i][0])) {\n\n                        this.path(\n                            'b m % % l % % l % % l % % s %',\n                            barX + (barW / 2),\n                            barY + (this.data[i] < 0 ? barH : 0) +  ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2),\n                            barY - positiveLength + (this.data[i] < 0 ? barH : 0)+ ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2) - halfwidth,\n                            Math.round(barY - positiveLength) + (this.data[i] < 0 ? barH : 0) + ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2) + halfwidth,\n                            Math.round(barY - positiveLength) + (this.data[i] < 0 ? barH : 0) + ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            color\n                        );\n                    }\n\n                    if (typeof errorbars[i][1] === 'number') {\n\n                        var negativeLength = Math.abs(this.getYCoord(errorbars[i][1]) - this.getYCoord(0));\n\n                        this.path(\n                            'b m % % l % % l % % l % % s %',\n                            barX + (barW / 2),\n                            barY + (this.data[i] < 0 ? barH : 0)+ ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2),\n                            barY + negativeLength + (this.data[i] < 0 ? barH : 0)+ ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2) - halfwidth,\n                            Math.round(coords[i][1] + negativeLength) + (this.data[i] < 0 ? barH : 0)+ ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            barX + (barW / 2) + halfwidth,\n                            Math.round(barY + negativeLength) + (this.data[i] < 0 ? barH : 0)+ ((isGrouped && this.data[group][subgroup] < 0) ? barH : 0),\n                            color\n                        );\n                    }\n                }\n\n\n                // Reset the perbar linewidth to the default if the fourth option\n                // in the array was specified specified\n                if (errorbars[i] && typeof errorbars[i][3] === 'number') {\n                    this.context.lineWidth = properties.errorbarsLinewidth;\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // A per-object to test whether a particular bar is adjustable or not\n        //\n        // @param shape The shape object\n        //\n        this.isAdjustable = function (shape)\n        {\n            if (RGraph.isNull(properties.adjustableOnly) || !RGraph.isArray(properties.adjustableOnly)) {\n                return true;\n            }\n\n            if (RGraph.isArray(properties.adjustableOnly) && properties.adjustableOnly[shape.sequentialIndex]) {\n                return true;\n            }\n\n            return false;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that handles Bar chart specific tooltip substitutions\n        //\n        this.tooltipSubstitutions = function (opt)\n        {\n            var indexes = RGraph.sequentialIndexToGrouped(opt.index, this.data);\n            var values = this.data[indexes[0]];\n            \n            if (typeof values === 'number') {\n                values = [values];\n            }\n\n            return {\n                  index: indexes[1],\n                dataset: indexes[0],\n        sequentialIndex: opt.index,\n                  value: this.data_arr[opt.index],\n                 values: values\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that returns the correct color/label/value\n        //\n        // @param object specific The indexes that are applicable\n        // @param number index    The appropriate index\n        //\n        this.tooltipsFormattedCustom = function (specific, index)\n        {\n            var label;\n\n            if (this.stackedOrGrouped) {\n                label = (!RGraph.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[index])\n                             ? properties.tooltipsFormattedKeyLabels[index]\n                             : '';\n\n            } else {\n\n                label = (   !RGraph.isNull(properties.tooltipsFormattedKeyLabels)\n                         && typeof properties.tooltipsFormattedKeyLabels === 'object'\n                         && properties.tooltipsFormattedKeyLabels[specific.index])\n                             ? properties.tooltipsFormattedKeyLabels[specific.index]\n                             : '';\n            }\n\n            return {\n                label: label\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for static tooltip positioning\n        //\n        this.positionTooltipStatic = function (args)\n        {\n            var obj        = args.object,\n                e          = args.event,\n                tooltip    = args.tooltip,\n                index      = args.index,\n                canvasXY   = RGraph.getCanvasXY(obj.canvas)\n                coords     = this.coords[args.index];\n\n            // Position the tooltip in the X direction\n            args.tooltip.style.left = (\n                  canvasXY[0]                    // The X coordinate of the canvas\n                + coords[0]                      // The X coordinate of the bar on the chart\n                - (tooltip.offsetWidth / 2)      // Subtract half of the tooltip width\n                + (coords[2] / 2)                // Add half of the bar width\n                + obj.properties.tooltipsOffsetx // Add any user defined offset\n            ) + 'px';\n\n            args.tooltip.style.top  = (\n                  canvasXY[1]                    // The Y coordinate of the canvas\n                + coords[1]                      // The Y coordinate of the bar on the chart\n                - tooltip.offsetHeight           // The height of the tooltip\n                - 10                             // An arbitrary amount\n                + obj.properties.tooltipsOffsety // Add any user defined offset\n            ) + 'px';\n\n            // If the chart is a 3D version the tooltip Y position needs this\n            // adjustment\n            if (properties.variant === '3d') {\n            \n                var left = coords[0];\n                var top  = coords[1];\n                var angle = properties.variantThreedAngle;\n                \n                var adjustment = Math.tan(angle) * left;\n            \n                args.tooltip.style.top = parseInt(args.tooltip.style.top) + adjustment - 5 + 'px';\n            }\n\n\n            // If the bar is a negative one, add half the height to the Y coord\n            if (this.data_arr[index] < 0) {\n                args.tooltip.style.top = \n                       parseFloat(args.tooltip.style.top)\n                    + (coords[3] / 2)\n                    + 'px';\n            }\n\n\n            \n            // If the top of the tooltip is off the top of the page\n            // then move the tooltip down\n            //if(parseFloat(args.tooltip.style.top) < 0) {\n                //args.tooltip.style.top = 5 + 'px';\n            //}\n        };\n\n\n\n\n\n\n\n\n        //\r\n        // This adds a roundedRect(x, y, width, height, radius) function to the drawing context.\r\n        // The radius argument dictates by how much the corners are rounded.\r\n        // \r\n        // @param number x      The X coordinate\r\n        // @param number y      The Y coordinate\r\n        // @param number width  The width of the rectangle\r\n        // @param number height The height of the rectangle\r\n        // @param number radius The radius of the corners. Bigger values mean more rounded corners\r\n        //\n        this.roundedCornersRect = function (x, y, width, height)\r\n        {\n            var radius = properties.cornersRoundRadius;\r\n\n            radius = Math.min(width / 2, height / 2, radius);\n\r\n            \r\n            // Save the existing state of the canvas so that it can be restored later\r\n            this.context.save();\r\n            \r\n                // Translate to the given X/Y coordinates\r\n                this.context.translate(x, y);\r\n    \r\n                // Move to the center of the top horizontal line\r\n                this.context.moveTo(width / 2,0);\r\n\r\n                // Draw the rounded corners. The connecting lines in between them are drawn automatically\r\n                this.context.arcTo(width,0,width,height, Math.min(height / 2, radius));\r\n                this.context.arcTo(width, height, 0, height, 0);\r\n                this.context.arcTo(0, height, 0, 0, 0);\r\n                this.context.arcTo(0, 0, radius, 0, Math.min(height / 2, radius));\r\n    \r\n                // Draw a line back to the start coordinates\r\n                this.context.lineTo(width / 2,0);\r\n    \r\n            // Restore the state of the canvas to as it was before the save()\r\n            this.context.restore();\r\n        };\n\n\n\n\n\n\n\n\n        //\r\n        // This adds a roundedRectNegative(x, y, width, height, radius) function to the drawing context.\r\n        // The radius argument dictates by how much the corners are rounded.\n        // This function handles negative bars whereas the above\n        // function handles positive ones.\r\n        // \r\n        // @param number x      The X coordinate\r\n        // @param number y      The Y coordinate\r\n        // @param number width  The width of the rectangle\r\n        // @param number height The height of the rectangle\r\n        // @param number radius The radius of the corners. Bigger values mean more rounded corners\r\n        //\n        this.roundedCornersRectNegative = function (x, y, width, height)\r\n        {\n            if (height < 0) {\n                height = Math.abs(height);\n                y     -= height;\n            }\n\n            var radius = properties.cornersRoundRadius;\r\n\n            radius = Math.min(\n                Math.abs(width / 2),\n                Math.abs(height / 2),\n                Math.abs(radius)\n            );\r\n\r\n            // Save the existing state of the canvas so that it can be restored later\r\n            this.context.save();\r\n\r\n                // Translate to the given X/Y coordinates\r\n                this.context.translate(x, y);\r\n    \r\n                // Move to the center of the top horizontal line\r\n                this.context.moveTo(width / 2,0);\r\n\r\n                // Draw the rounded corners. The connecting lines in\n                // between them are drawn automatically\r\n                this.context.arcTo(width,0,width,height, 0);\r\n                this.context.arcTo(width, height, 0, height, radius);\r\n                this.context.arcTo(0, height, 0, 0, radius);\r\n                this.context.arcTo(0, 0, width, 0, 0);\r\n    \r\n                // Draw a line back to the start coordinates\r\n                this.context.lineTo(width / 2,0);\r\n    \r\n            // Restore the state of the canvas to as it was before the save()\r\n            this.context.restore();\r\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function is NOT currently used - it installs an\n        // appropriate clipping region for the lower half of 3D\n        // Bar charts when the X axis is in the middle. It's\n        // used like this:\n        //\n        // this.context.save();\n        //     this.context.install3DAxisClip();\n        //     ...\n        // this.context.restore();\n        //\n        this.install3DAxisNegativeClip = function ()\n        {\n            this.path(\n                'b m % % l % % l % % l % % l % % l % % c cl',\n                this.marginLeft, this.getYCoord(0),\n                this.marginLeft, this.canvas.height - this.marginBottom,\n                this.canvas.width - this.marginRight, this.canvas.height - this.marginBottom,\n                this.canvas.width - this.marginRight + this.properties.variantThreedOffsetx, this.canvas.height - this.marginBottom - this.properties.variantThreedOffsety,\n                this.canvas.width - this.marginRight + this.properties.variantThreedOffsetx, this.getYCoord(0) - this.properties.variantThreedOffsety,\n                this.canvas.width - this.marginRight, this.getYCoord(0)\n            );\n        };\n\n\n\n\n\n\n\n\n        //\n        // Register the object\n        //\n        RGraph.register(this);\n\n\n\n\n        //\n        // This is the 'end' of the constructor so if the first argument\n        // contains configuration dsta - handle that.\n        //\n        RGraph.parseObjectStyleConfig(this, conf.options);\n    };\n\n\n\n\n\n    //\n    // This is the combined bar and Line class which makes creating bar/line combo charts a little bit easier\n    //\n\n\n\n\n\n\n\n    RGraph.CombinedChart = function ()\n    {\n        //\n        // Create a default empty array for the objects\n        //\n        this.objects = [];\n        var objects  = [];\n\n        if (RGraph.isArray(arguments[0])) {\n            objects = arguments[0];\n        } else {\n            for (var i=0; i<arguments.length; i+=1) {\n                objects[i] = arguments[i];\n            }\n        }\n\n        for (var i=0; i<objects.length; ++i) {\n\n            this.objects[i] = objects[i];\n\n            //\n            // Set the Line chart margins to match the Bar chart margins\n            //\n            this.objects[i].set({\n                marginLeft:   this.objects[0].get('marginLeft'), // Needs to use the dot form to skirt an IE9 bug\n                marginRight:  this.objects[0].get('marginRight'), // Needs to use the dot form to skirt an IE9 bug\n                marginTop:    this.objects[0].get('marginTop'), // Needs to use the dot form to skirt an IE9 bug\n                marginBottom: this.objects[0].get('marginBottom') // Needs to use the dot form to skirt an IE9 bug\n            });\n\n            if (this.objects[i].type == 'line') {\n\n                var obj = this.objects[i];\n\n                //\n                // Set the line chart marginInner\n                //\n                obj.set('marginInner', ((this.objects[0].canvas.width - this.objects[0].get('marginRight') - this.objects[0].get('marginLeft')) / this.objects[0].data.length) / 2 );\n\n\n                //\n                // No labels, axes or grid on the Line chart\n                //\n                obj.set('yaxis', false);\n                obj.set('xaxis', false);\n                obj.set('backgroundGrid', false);\n                obj.set('yaxisScale', false);\n            }\n\n            //\n            // Resizing\n            //\n            if (this.objects[i].get('resizable')) {\n                var resizable_object = obj;\n            }\n        }\n\n        //\n        // Resizing\n        //\n        if (resizable_object) {\n            //\n            // This recalculates the Line chart marginInner when the chart is resized\n            //\n            function myOnresizebeforedraw (obj)\n            {\n                var marginLeft  = obj.get('marginLeft');\n                var marginRight = obj.get('marginRight');\n\n                obj.set('marginInner', (obj.canvas.width - marginLeft - marginRight) / (obj.original_data[0].length * 2));\n            }\n\n            RGraph.addCustomEventListener(\n                resizable_object,\n                'onresizebeforedraw',\n                myOnresizebeforedraw\n            );\n        }\n        \n        return this;\n    };\n\n\n\n\n\n\n\n\n    //\n    // The Add method can be used to add methods to the CombinedChart object.\n    //\n    RGraph.CombinedChart.prototype.add = function (obj)\n    {\n        this.objects.push(obj);\n        \n        return this;\n    };\n\n\n\n\n\n\n\n\n    //\n    // The Draw method goes through all of the objects drawing them (sequentially)\n    //\n    RGraph.CombinedChart.prototype.draw = function ()\n    {\n        if (RGraph.isArray(this.objects)) {\n            for (var i=0; i<this.objects.length; ++i) {\n                if (this.objects[i].properties['combinedEffect']) {\n    \n                    // The options must be given as a string because of the\n                    // RGraph configuration system\n                    var options  = this.objects[i].properties['combinedEffectOptions'] ? eval('(' + this.objects[i].properties['combinedEffectOptions'] + ')') : null,\n                        callback = this.objects[i].properties['combinedEffectCallback'],\n                        func     = this.objects[i].properties['combinedEffect'];\n    \n                    (this.objects[i][func])(options, callback);\n                } else {\n                    this.objects[i].draw();\n                }\n            }\n        }\n        \n        return this;\n    };\n\n\n\n\n\n\n\n\n\n    //\n    // Provides an easy way to get a segmented Bar chart. See the Bar chart\n    // documentation page for more details.\n    //\n    RGraph.SegmentedBar = function (conf)\n    {\n        this.config     = conf;\n        this.properties = {};\n\n        // Process the data\n        this.config.data.forEach(function (v, k, arr)\n        {\n            arr[k] = RGraph.arrayPad([], v, 1);\n        });\n\n        // Set the options on the segmentedBar object\n        for (i in this.config.options) {\n            if (typeof i === 'string') {\n                this.properties[i] = this.config.options[i];\n            }\n        }\n        \n        \n        \n        // Prevent any 'this' madness\n        var seg = this;\n\n        this.background = new RGraph.Bar({\n            id: conf.id[0],\n            data: RGraph.arrayPad([], conf.data.length),\n            options: {\n                backgroundGridHlinesCount: seg.properties.segmentsCount,\n                colors: ['rgba(0,0,0,0)'],\n                xaxis: false,\n                yaxis: false,\n                yaxisLabels: false,\n                xaxis: false,\n                yaxis: false,\n                yaxisScale: false\n            }\n        });\n\n\n        this.foreground = new RGraph.Bar({\n            id: conf.id[1],\n            data: conf.data,\n            options: {\n                grouping: 'stacked',\n                xaxis: false,\n                yaxis: false,\n                backgroundGrid: false,\n                yaxisLabelsOffsetx: -3,\n                yaxisLabelsOffsety: 20\n            }\n        }).on('draw', function (obj)\n        {\n            var lw    = seg.properties.segmentsLinewidth;\n            var count = seg.properties.segmentsCount;\n\n            for (var i=0; i<=count; ++i) {\n                obj.path(\n                    'cr 0 % 1000 %',\n                    obj.getYCoord(i / count * seg.foreground.scale2.max) - (lw / 2), lw);\n            }\n        });\n\n        // Set the Y label Offset\n        this.foreground.set({\n            yaxisLabelsOffsety:\n            (this.foreground.canvas.height - this.foreground.properties.marginTop - this.foreground.properties.marginBottom) / seg.properties.segmentsCount / 2\n        });\n\n\n\n\n\n\n\n        // Draw the Bar chart\n        this.draw = function ()\n        {\n            this.background.draw();\n            this.foreground.draw();\n\n            return this;\n        }\n\n\n\n\n\n\n\n        // Animate the Bar chart (only the foreground chart though)\n        this.grow = function ()\n        {\n            this.background.draw();\n            this.foreground.grow(arguments[0], arguments[1]);\n\n            return this;\n        }\n\n\n\n\n\n\n\n        // Animate the Bar chart (only the foreground chart though)\n        this.wave = function ()\n        {\n            this.background.draw();\n            this.foreground.wave(arguments[0], arguments[1]);\n            \n            return this;\n        }\n\n\n\n\n\n\n\n        // This allows you to add responsive configuration to the chart by\n        // passing the configuration throough to the underlying objects.\n        this.responsive = function (conf)\n        {\n            this.foreground.responsive(conf);\n            this.background.responsive(conf);\n\n            return this;\n        }\n    }"]},"metadata":{},"sourceType":"module"}