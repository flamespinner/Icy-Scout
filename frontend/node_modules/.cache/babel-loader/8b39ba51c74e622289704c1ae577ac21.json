{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport { attachEventListners, dispatch } from \"../events\";\nimport { colorParse } from \"../colorHelper\";\n/**\r\n * Reusable 3D Bar Chart Component\r\n *\r\n * @module\r\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 2\n  };\n  let colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\n  let classed = \"d3X3dBars\";\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let colorScale;\n  /**\r\n   * Initialise Data and Scales\r\n   *\r\n   * @private\r\n   * @param {Array} data - Chart data.\r\n   */\n\n  const init = function (data) {\n    const {\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY\n    } = dimensions;\n\n    if (typeof xScale === \"undefined\") {\n      xScale = d3.scaleBand().domain(columnKeys).rangeRound([0, dimensionX]).padding(0.3);\n    }\n\n    if (typeof yScale === \"undefined\") {\n      yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]);\n    }\n\n    if (typeof colorScale === \"undefined\") {\n      colorScale = d3.scaleOrdinal().domain(columnKeys).range(colors);\n    }\n  };\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @alias bars\r\n   * @param {d3.selection} selection - The chart holder D3 selection.\r\n   */\n\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      init(data);\n      const element = d3.select(this).classed(classed, true).attr(\"id\", d => d.key);\n\n      const shape = el => {\n        const shape = el.append(\"Shape\");\n        attachEventListners(shape);\n        shape.append(\"Box\").attr(\"size\", \"1.0 1.0 1.0\");\n        shape.append(\"Appearance\").append(\"Material\").attr(\"diffuseColor\", d => colorParse(colorScale(d.key))).attr(\"ambientIntensity\", 0.1);\n        return shape;\n      };\n\n      const bars = element.selectAll(\".bar\").data(d => d.values, d => d.key);\n      bars.enter().append(\"Transform\").classed(\"bar\", true).call(shape).merge(bars).transition().attr(\"scale\", d => {\n        let x = xScale.bandwidth();\n        let y = yScale(d.value);\n        let z = dimensions.z;\n        return x + \" \" + y + \" \" + z;\n      }).attr(\"translation\", d => {\n        let x = xScale(d.key);\n        let y = yScale(d.value) / 2;\n        let z = 0.0;\n        return x + \" \" + y + \" \" + z;\n      });\n      bars.exit().remove();\n    });\n  };\n  /**\r\n   * Dimensions Getter / Setter\r\n   *\r\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n   * @returns {*}\r\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\r\n   * X Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\r\n   * Y Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\r\n   * Color Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\r\n   * Colors Getter / Setter\r\n   *\r\n   * @param {Array} _v - Array of colours used by color scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\r\n   * Dispatch On Getter\r\n   *\r\n   * @returns {*}\r\n   */\n\n\n  my.on = function () {\n    let value = dispatch.on.apply(dispatch, arguments);\n    return value === dispatch ? my : value;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/src/components/bars.js"],"names":["d3","dataTransform","attachEventListners","dispatch","colorParse","dimensions","x","y","z","colors","classed","xScale","yScale","colorScale","init","data","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","scaleBand","domain","rangeRound","padding","scaleLinear","range","scaleOrdinal","my","selection","each","element","select","attr","d","key","shape","el","append","bars","selectAll","values","enter","call","merge","transition","bandwidth","value","exit","remove","_v","arguments","length","on","apply"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\r\nimport dataTransform from \"../dataTransform\";\r\nimport { attachEventListners, dispatch } from \"../events\";\r\nimport { colorParse } from \"../colorHelper\";\r\n\r\n/**\r\n * Reusable 3D Bar Chart Component\r\n *\r\n * @module\r\n */\r\nexport default function() {\r\n\r\n\t/* Default Properties */\r\n\tlet dimensions = { x: 40, y: 40, z: 2 };\r\n\tlet colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\r\n\tlet classed = \"d3X3dBars\";\r\n\r\n\t/* Scales */\r\n\tlet xScale;\r\n\tlet yScale;\r\n\tlet colorScale;\r\n\r\n\t/**\r\n\t * Initialise Data and Scales\r\n\t *\r\n\t * @private\r\n\t * @param {Array} data - Chart data.\r\n\t */\r\n\tconst init = function(data) {\r\n\t\tconst { columnKeys, valueMax } = dataTransform(data).summary();\r\n\t\tconst valueExtent = [0, valueMax];\r\n\t\tconst { x: dimensionX, y: dimensionY } = dimensions;\r\n\r\n\t\tif (typeof xScale === \"undefined\") {\r\n\t\t\txScale = d3.scaleBand()\r\n\t\t\t\t.domain(columnKeys)\r\n\t\t\t\t.rangeRound([0, dimensionX])\r\n\t\t\t\t.padding(0.3);\r\n\t\t}\r\n\r\n\t\tif (typeof yScale === \"undefined\") {\r\n\t\t\tyScale = d3.scaleLinear()\r\n\t\t\t\t.domain(valueExtent)\r\n\t\t\t\t.range([0, dimensionY]);\r\n\t\t}\r\n\r\n\t\tif (typeof colorScale === \"undefined\") {\r\n\t\t\tcolorScale = d3.scaleOrdinal()\r\n\t\t\t\t.domain(columnKeys)\r\n\t\t\t\t.range(colors);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @constructor\r\n\t * @alias bars\r\n\t * @param {d3.selection} selection - The chart holder D3 selection.\r\n\t */\r\n\tconst my = function(selection) {\r\n\t\tselection.each(function(data) {\r\n\t\t\tinit(data);\r\n\r\n\t\t\tconst element = d3.select(this)\r\n\t\t\t\t.classed(classed, true)\r\n\t\t\t\t.attr(\"id\", (d) => d.key);\r\n\r\n\t\t\tconst shape = (el) => {\r\n\t\t\t\tconst shape = el.append(\"Shape\");\r\n\r\n\t\t\t\tattachEventListners(shape);\r\n\r\n\t\t\t\tshape.append(\"Box\")\r\n\t\t\t\t\t.attr(\"size\", \"1.0 1.0 1.0\");\r\n\r\n\t\t\t\tshape.append(\"Appearance\")\r\n\t\t\t\t\t.append(\"Material\")\r\n\t\t\t\t\t.attr(\"diffuseColor\", (d) => colorParse(colorScale(d.key)))\r\n\t\t\t\t\t.attr(\"ambientIntensity\", 0.1);\r\n\r\n\t\t\t\treturn shape;\r\n\t\t\t};\r\n\r\n\t\t\tconst bars = element.selectAll(\".bar\")\r\n\t\t\t\t.data((d) => d.values, (d) => d.key);\r\n\r\n\t\t\tbars.enter()\r\n\t\t\t\t.append(\"Transform\")\r\n\t\t\t\t.classed(\"bar\", true)\r\n\t\t\t\t.call(shape)\r\n\t\t\t\t.merge(bars)\r\n\t\t\t\t.transition()\r\n\t\t\t\t.attr(\"scale\", (d) => {\r\n\t\t\t\t\tlet x = xScale.bandwidth();\r\n\t\t\t\t\tlet y = yScale(d.value);\r\n\t\t\t\t\tlet z = dimensions.z;\r\n\t\t\t\t\treturn x + \" \" + y + \" \" + z;\r\n\t\t\t\t})\r\n\t\t\t\t.attr(\"translation\", (d) => {\r\n\t\t\t\t\tlet x = xScale(d.key);\r\n\t\t\t\t\tlet y = yScale(d.value) / 2;\r\n\t\t\t\t\tlet z = 0.0;\r\n\t\t\t\t\treturn x + \" \" + y + \" \" + z;\r\n\t\t\t\t});\r\n\r\n\t\t\tbars.exit()\r\n\t\t\t\t.remove();\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Dimensions Getter / Setter\r\n\t *\r\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.dimensions = function(_v) {\r\n\t\tif (!arguments.length) return dimensions;\r\n\t\tdimensions = _v;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * X Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.xScale = function(_v) {\r\n\t\tif (!arguments.length) return xScale;\r\n\t\txScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Y Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.yScale = function(_v) {\r\n\t\tif (!arguments.length) return yScale;\r\n\t\tyScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Color Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colorScale = function(_v) {\r\n\t\tif (!arguments.length) return colorScale;\r\n\t\tcolorScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Colors Getter / Setter\r\n\t *\r\n\t * @param {Array} _v - Array of colours used by color scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colors = function(_v) {\r\n\t\tif (!arguments.length) return colors;\r\n\t\tcolors = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Dispatch On Getter\r\n\t *\r\n\t * @returns {*}\r\n\t */\r\n\tmy.on = function() {\r\n\t\tlet value = dispatch.on.apply(dispatch, arguments);\r\n\t\treturn value === dispatch ? my : value;\r\n\t};\r\n\r\n\treturn my;\r\n}"]},"metadata":{},"sourceType":"module"}