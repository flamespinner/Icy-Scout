{"ast":null,"code":"import * as d3 from \"d3\";\nimport componentAxis from \"./axis\";\n/**\n * Reusable 3D Multi Plane Axis Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"blue\", \"red\", \"green\"];\n  let classed = \"d3X3dAxisThreePlane\";\n  let labelPosition = \"proximal\";\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  /* Components */\n\n  const xzAxis = componentAxis();\n  const yzAxis = componentAxis();\n  const yxAxis = componentAxis();\n  const zxAxis = componentAxis();\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias axisThreePlane\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n  const my = function (selection) {\n    selection.each(function () {\n      const element = d3.select(this).classed(classed, true);\n      const layers = [\"xzAxis\", \"yzAxis\", \"yxAxis\", \"zxAxis\"];\n      element.selectAll(\"group\").data(layers).enter().append(\"Group\").attr(\"class\", d => d);\n      xzAxis.scale(xScale).direction(\"x\").tickDirection(\"z\").tickSize(zScale.range()[1] - zScale.range()[0]).color(\"blue\").labelPosition(labelPosition);\n      yzAxis.scale(yScale).direction(\"y\").tickDirection(\"z\").tickSize(zScale.range()[1] - zScale.range()[0]).color(\"red\").labelPosition(labelPosition);\n      yxAxis.scale(yScale).direction(\"y\").tickDirection(\"x\").tickSize(xScale.range()[1] - xScale.range()[0]).color(\"red\").labelPosition(labelPosition);\n      zxAxis.scale(zScale).direction(\"z\").tickDirection(\"x\").tickSize(xScale.range()[1] - xScale.range()[0]).color(\"black\").labelPosition(labelPosition); // We only want 2 sets of labels on the y axis if they are in distal position.\n\n      if (labelPosition === \"proximal\") {\n        yxAxis.tickFormat(\"\");\n      } else {\n        yxAxis.tickFormat(d => d);\n      }\n\n      element.select(\".xzAxis\").call(xzAxis);\n      element.select(\".yzAxis\").call(yzAxis);\n      element.select(\".yxAxis\").call(yxAxis);\n      element.select(\".zxAxis\").call(zxAxis);\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Label Position Getter / Setter\n   *\n   * @param {string} _v - Position (\"proximal\" or \"distal\")\n   * @returns {*}\n   */\n\n\n  my.labelPosition = function (_v) {\n    if (!arguments.length) return labelPosition;\n    labelPosition = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/axisThreePlane.js"],"names":["d3","componentAxis","dimensions","x","y","z","colors","classed","labelPosition","xScale","yScale","zScale","xzAxis","yzAxis","yxAxis","zxAxis","my","selection","each","element","select","layers","selectAll","data","enter","append","attr","d","scale","direction","tickDirection","tickSize","range","color","tickFormat","call","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport componentAxis from \"./axis\";\n\n/**\n * Reusable 3D Multi Plane Axis Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = [\"blue\", \"red\", \"green\"];\n\tlet classed = \"d3X3dAxisThreePlane\";\n\tlet labelPosition = \"proximal\";\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\n\t/* Components */\n\tconst xzAxis = componentAxis();\n\tconst yzAxis = componentAxis();\n\tconst yxAxis = componentAxis();\n\tconst zxAxis = componentAxis();\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias axisThreePlane\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function() {\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true);\n\n\t\t\tconst layers = [\"xzAxis\", \"yzAxis\", \"yxAxis\", \"zxAxis\"];\n\t\t\telement.selectAll(\"group\")\n\t\t\t\t.data(layers)\n\t\t\t\t.enter()\n\t\t\t\t.append(\"Group\")\n\t\t\t\t.attr(\"class\", (d) => d);\n\n\t\t\txzAxis.scale(xScale)\n\t\t\t\t.direction(\"x\")\n\t\t\t\t.tickDirection(\"z\")\n\t\t\t\t.tickSize(zScale.range()[1] - zScale.range()[0])\n\t\t\t\t.color(\"blue\")\n\t\t\t\t.labelPosition(labelPosition);\n\n\t\t\tyzAxis.scale(yScale)\n\t\t\t\t.direction(\"y\")\n\t\t\t\t.tickDirection(\"z\")\n\t\t\t\t.tickSize(zScale.range()[1] - zScale.range()[0])\n\t\t\t\t.color(\"red\")\n\t\t\t\t.labelPosition(labelPosition);\n\n\t\t\tyxAxis.scale(yScale)\n\t\t\t\t.direction(\"y\")\n\t\t\t\t.tickDirection(\"x\")\n\t\t\t\t.tickSize(xScale.range()[1] - xScale.range()[0])\n\t\t\t\t.color(\"red\")\n\t\t\t\t.labelPosition(labelPosition);\n\n\t\t\tzxAxis.scale(zScale)\n\t\t\t\t.direction(\"z\")\n\t\t\t\t.tickDirection(\"x\")\n\t\t\t\t.tickSize(xScale.range()[1] - xScale.range()[0])\n\t\t\t\t.color(\"black\")\n\t\t\t\t.labelPosition(labelPosition);\n\n\t\t\t// We only want 2 sets of labels on the y axis if they are in distal position.\n\t\t\tif (labelPosition === \"proximal\") {\n\t\t\t\tyxAxis.tickFormat(\"\");\n\t\t\t} else {\n\t\t\t\tyxAxis.tickFormat((d) => d);\n\t\t\t}\n\n\t\t\telement.select(\".xzAxis\")\n\t\t\t\t.call(xzAxis);\n\n\t\t\telement.select(\".yzAxis\")\n\t\t\t\t.call(yzAxis);\n\n\t\t\telement.select(\".yxAxis\")\n\t\t\t\t.call(yxAxis);\n\n\t\t\telement.select(\".zxAxis\")\n\t\t\t\t.call(zxAxis);\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Label Position Getter / Setter\n\t *\n\t * @param {string} _v - Position (\"proximal\" or \"distal\")\n\t * @returns {*}\n\t */\n\tmy.labelPosition = function(_v) {\n\t\tif (!arguments.length) return labelPosition;\n\t\tlabelPosition = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}