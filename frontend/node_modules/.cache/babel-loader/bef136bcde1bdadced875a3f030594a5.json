{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport componentRibbon from \"./ribbon\";\nimport { dispatch } from \"../events\";\n/**\n * Reusable 3D Multi Series Ribbon Chart Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\n  let classed = \"d3X3dRibbonMultiSeries\";\n  let smoothed = d3.curveBasis;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  let colorDomain = [];\n  /* Components */\n\n  const ribbon = componentRibbon();\n  /**\n   * Unique Array\n   *\n   * @param {array} array1\n   * @param {array} array2\n   * @returns {array}\n   */\n\n  const arrayUnique = function (array1, array2) {\n    let array = array1.concat(array2);\n    let a = array.concat();\n\n    for (let i = 0; i < a.length; ++i) {\n      for (let j = i + 1; j < a.length; ++j) {\n        if (a[i] === a[j]) {\n          a.splice(j--, 1);\n        }\n      }\n    }\n\n    return a;\n  };\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n\n  const init = function (data) {\n    const {\n      rowKeys,\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    xScale = d3.scalePoint().domain(columnKeys).range([0, dimensionX]);\n    yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]);\n    zScale = d3.scaleBand().domain(rowKeys).range([0, dimensionZ]).padding(0.4);\n    colorDomain = arrayUnique(colorDomain, rowKeys);\n    colorScale = d3.scaleOrdinal().domain(colorDomain).range(colors);\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias ribbonMultiSeries\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      init(data);\n      const element = d3.select(this).classed(classed, true);\n      ribbon.xScale(xScale).yScale(yScale).dimensions({\n        x: dimensions.x,\n        y: dimensions.y,\n        z: zScale.bandwidth()\n      }).smoothed(smoothed);\n\n      const addRibbon = function (d) {\n        const color = colorScale(d.key);\n        ribbon.color(color);\n        d3.select(this).call(ribbon);\n      };\n\n      const ribbonGroup = element.selectAll(\".ribbonGroup\").data(d => d, d => d.key);\n      ribbonGroup.enter().append(\"Transform\").classed(\"ribbonGroup\", true).merge(ribbonGroup).transition().attr(\"translation\", d => {\n        const x = 0;\n        const y = 0;\n        const z = zScale(d.key);\n        return x + \" \" + y + \" \" + z;\n      }).each(addRibbon);\n      ribbonGroup.exit().remove();\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Smooth Interpolation Getter / Setter\n   *\n   * Options:\n   *   d3.curveBasis\n   *   d3.curveLinear\n   *   d3.curveMonotoneX\n   *\n   * @param {d3.curve} _v.\n   * @returns {*}\n   */\n\n\n  my.smoothed = function (_v) {\n    if (!arguments.length) return smoothed;\n    smoothed = _v;\n    return my;\n  };\n  /**\n   * Dispatch On Getter\n   *\n   * @returns {*}\n   */\n\n\n  my.on = function () {\n    let value = dispatch.on.apply(dispatch, arguments);\n    return value === dispatch ? my : value;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/ribbonMultiSeries.js"],"names":["d3","dataTransform","componentRibbon","dispatch","dimensions","x","y","z","colors","classed","smoothed","curveBasis","xScale","yScale","zScale","colorScale","colorDomain","ribbon","arrayUnique","array1","array2","array","concat","a","i","length","j","splice","init","data","rowKeys","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","dimensionZ","scalePoint","domain","range","scaleLinear","scaleBand","padding","scaleOrdinal","my","selection","each","element","select","bandwidth","addRibbon","d","color","key","call","ribbonGroup","selectAll","enter","append","merge","transition","attr","exit","remove","_v","arguments","on","value","apply"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport componentRibbon from \"./ribbon\";\nimport { dispatch } from \"../events\";\n\n/**\n * Reusable 3D Multi Series Ribbon Chart Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\n\tlet classed = \"d3X3dRibbonMultiSeries\";\n\tlet smoothed = d3.curveBasis;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\tlet colorDomain = [];\n\n\t/* Components */\n\tconst ribbon = componentRibbon();\n\n\t/**\n\t * Unique Array\n\t *\n\t * @param {array} array1\n\t * @param {array} array2\n\t * @returns {array}\n\t */\n\tconst arrayUnique = function(array1, array2) {\n\t\tlet array = array1.concat(array2);\n\n\t\tlet a = array.concat();\n\t\tfor (let i = 0; i < a.length; ++i) {\n\t\t\tfor (let j = i + 1; j < a.length; ++j) {\n\t\t\t\tif (a[i] === a[j]) {\n\t\t\t\t\ta.splice(j--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t};\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { rowKeys, columnKeys, valueMax } = dataTransform(data).summary();\n\t\tconst valueExtent = [0, valueMax];\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\txScale = d3.scalePoint()\n\t\t\t.domain(columnKeys)\n\t\t\t.range([0, dimensionX]);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain(valueExtent)\n\t\t\t.range([0, dimensionY]);\n\n\t\tzScale = d3.scaleBand()\n\t\t\t.domain(rowKeys)\n\t\t\t.range([0, dimensionZ])\n\t\t\t.padding(0.4);\n\n\t\tcolorDomain = arrayUnique(colorDomain, rowKeys);\n\t\tcolorScale = d3.scaleOrdinal()\n\t\t\t.domain(colorDomain)\n\t\t\t.range(colors);\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias ribbonMultiSeries\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function(data) {\n\t\t\tinit(data);\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true);\n\n\t\t\tribbon.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.dimensions({\n\t\t\t\t\tx: dimensions.x,\n\t\t\t\t\ty: dimensions.y,\n\t\t\t\t\tz: zScale.bandwidth()\n\t\t\t\t})\n\t\t\t\t.smoothed(smoothed);\n\n\t\t\tconst addRibbon = function(d) {\n\t\t\t\tconst color = colorScale(d.key);\n\t\t\t\tribbon.color(color);\n\t\t\t\td3.select(this).call(ribbon);\n\t\t\t};\n\n\t\t\tconst ribbonGroup = element.selectAll(\".ribbonGroup\")\n\t\t\t\t.data((d) => d, (d) => d.key);\n\n\t\t\tribbonGroup.enter()\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.classed(\"ribbonGroup\", true)\n\t\t\t\t.merge(ribbonGroup)\n\t\t\t\t.transition()\n\t\t\t\t.attr(\"translation\", (d) => {\n\t\t\t\t\tconst x = 0;\n\t\t\t\t\tconst y = 0;\n\t\t\t\t\tconst z = zScale(d.key);\n\t\t\t\t\treturn x + \" \" + y + \" \" + z;\n\t\t\t\t})\n\t\t\t\t.each(addRibbon);\n\n\t\t\tribbonGroup.exit()\n\t\t\t\t.remove();\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Smooth Interpolation Getter / Setter\n\t *\n\t * Options:\n\t *   d3.curveBasis\n\t *   d3.curveLinear\n\t *   d3.curveMonotoneX\n\t *\n\t * @param {d3.curve} _v.\n\t * @returns {*}\n\t */\n\tmy.smoothed = function(_v) {\n\t\tif (!arguments.length) return smoothed;\n\t\tsmoothed = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Dispatch On Getter\n\t *\n\t * @returns {*}\n\t */\n\tmy.on = function() {\n\t\tlet value = dispatch.on.apply(dispatch, arguments);\n\t\treturn value === dispatch ? my : value;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}