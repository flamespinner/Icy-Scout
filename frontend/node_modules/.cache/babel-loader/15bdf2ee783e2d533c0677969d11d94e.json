{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\n/**\n * Reusable 3D Volume Slice Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let classed = \"d3X3dVolumeSlice\";\n  /* Other Volume Properties */\n\n  let imageUrl;\n  let numberOfSlices;\n  let slicesOverX;\n  let slicesOverY;\n  let volumeStyle = \"OpacityMap\";\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias volumeSlice\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      const element = d3.select(this).classed(classed, true).attr(\"id\", d => d.key);\n      const {\n        x: dimensionX,\n        y: dimensionY,\n        z: dimensionZ\n      } = dimensions;\n      const volumedata = element.append(\"Transform\").append(\"VolumeData\").attr(\"dimensions\", `${dimensionX} ${dimensionY} ${dimensionZ}`);\n      volumedata.append(\"ImageTextureAtlas\").attr(\"crossOrigin\", \"anonymous\").attr(\"containerField\", \"voxels\").attr(\"url\", imageUrl).attr(\"numberOfSlices\", numberOfSlices).attr(\"slicesOverX\", slicesOverX).attr(\"slicesOverY\", slicesOverY);\n\n      switch (volumeStyle) {\n        case \"MPRVolume\":\n          volumedata.append(\"MPRVolumeStyle\").attr(\"forceOpaic\", true).selectAll(\".plane\").data(d => d.values).enter().append(\"MPRPlane\").classed(\"plane\", true).attr(\"normal\", d => `${d.x} ${d.y} ${d.z}`).attr(\"position\", d => d.value);\n          break;\n\n        case \"OpacityMap\":\n        default:\n          volumedata.append(\"OpacityMapVolumeStyle\").attr(\"lightFactor\", 1.2).attr(\"opacityFactor\", 6.0);\n          break;\n      }\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * Image URL Getter / Setter\n   *\n   * @param {string} _v - Image URL path.\n   * @returns {*}\n   */\n\n\n  my.imageUrl = function (_v) {\n    if (!arguments.length) return imageUrl;\n    imageUrl = _v;\n    return this;\n  };\n  /**\n   * Number of Slices Getter / Setter\n   *\n   * @param {number} _v - Total number of slices.\n   * @returns {*}\n   */\n\n\n  my.numberOfSlices = function (_v) {\n    if (!arguments.length) return numberOfSlices;\n    numberOfSlices = _v;\n    return this;\n  };\n  /**\n   * X Slices Getter / Setter\n   *\n   * @param {number} _v - Number of slices over X axis.\n   * @returns {*}\n   */\n\n\n  my.slicesOverX = function (_v) {\n    if (!arguments.length) return slicesOverX;\n    slicesOverX = _v;\n    return this;\n  };\n  /**\n   * Y Slices Getter / Setter\n   *\n   * @param {number} _v - Number of slices over Y axis.\n   * @returns {*}\n   */\n\n\n  my.slicesOverY = function (_v) {\n    if (!arguments.length) return slicesOverY;\n    slicesOverY = _v;\n    return this;\n  };\n  /**\n   * Volume Style Getter / Setter\n   *\n   * @param {string} _v - Volume render style (either \"MPRVolume\" or \"OpacityMap\")\n   * @returns {*}\n   */\n\n\n  my.volumeStyle = function (_v) {\n    if (!arguments.length) return volumeStyle;\n    volumeStyle = _v;\n    return this;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/volumeSlice.js"],"names":["d3","dataTransform","dimensions","x","y","z","classed","imageUrl","numberOfSlices","slicesOverX","slicesOverY","volumeStyle","my","selection","each","data","element","select","attr","d","key","dimensionX","dimensionY","dimensionZ","volumedata","append","selectAll","values","enter","value","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\n\n/**\n * Reusable 3D Volume Slice Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet classed = \"d3X3dVolumeSlice\";\n\n\t/* Other Volume Properties */\n\tlet imageUrl;\n\tlet numberOfSlices;\n\tlet slicesOverX;\n\tlet slicesOverY;\n\tlet volumeStyle = \"OpacityMap\";\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias volumeSlice\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function(data) {\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true)\n\t\t\t\t.attr(\"id\", (d) => d.key);\n\n\t\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\t\tconst volumedata = element.append(\"Transform\")\n\t\t\t\t.append(\"VolumeData\")\n\t\t\t\t.attr(\"dimensions\", `${dimensionX} ${dimensionY} ${dimensionZ}`);\n\n\t\t\tvolumedata.append(\"ImageTextureAtlas\")\n\t\t\t\t.attr(\"crossOrigin\", \"anonymous\")\n\t\t\t\t.attr(\"containerField\", \"voxels\")\n\t\t\t\t.attr(\"url\", imageUrl)\n\t\t\t\t.attr(\"numberOfSlices\", numberOfSlices)\n\t\t\t\t.attr(\"slicesOverX\", slicesOverX)\n\t\t\t\t.attr(\"slicesOverY\", slicesOverY);\n\n\t\t\tswitch (volumeStyle) {\n\t\t\t\tcase \"MPRVolume\":\n\t\t\t\t\tvolumedata.append(\"MPRVolumeStyle\")\n\t\t\t\t\t\t.attr(\"forceOpaic\", true)\n\t\t\t\t\t\t.selectAll(\".plane\")\n\t\t\t\t\t\t.data((d) => d.values)\n\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t.append(\"MPRPlane\")\n\t\t\t\t\t\t.classed(\"plane\", true)\n\t\t\t\t\t\t.attr(\"normal\", (d) => `${d.x} ${d.y} ${d.z}`)\n\t\t\t\t\t\t.attr(\"position\", (d) => d.value);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"OpacityMap\":\n\t\t\t\tdefault:\n\t\t\t\t\tvolumedata.append(\"OpacityMapVolumeStyle\")\n\t\t\t\t\t\t.attr(\"lightFactor\", 1.2)\n\t\t\t\t\t\t.attr(\"opacityFactor\", 6.0);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Image URL Getter / Setter\n\t *\n\t * @param {string} _v - Image URL path.\n\t * @returns {*}\n\t */\n\tmy.imageUrl = function(_v) {\n\t\tif (!arguments.length) return imageUrl;\n\t\timageUrl = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Number of Slices Getter / Setter\n\t *\n\t * @param {number} _v - Total number of slices.\n\t * @returns {*}\n\t */\n\tmy.numberOfSlices = function(_v) {\n\t\tif (!arguments.length) return numberOfSlices;\n\t\tnumberOfSlices = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Slices Getter / Setter\n\t *\n\t * @param {number} _v - Number of slices over X axis.\n\t * @returns {*}\n\t */\n\tmy.slicesOverX = function(_v) {\n\t\tif (!arguments.length) return slicesOverX;\n\t\tslicesOverX = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Y Slices Getter / Setter\n\t *\n\t * @param {number} _v - Number of slices over Y axis.\n\t * @returns {*}\n\t */\n\tmy.slicesOverY = function(_v) {\n\t\tif (!arguments.length) return slicesOverY;\n\t\tslicesOverY = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Volume Style Getter / Setter\n\t *\n\t * @param {string} _v - Volume render style (either \"MPRVolume\" or \"OpacityMap\")\n\t * @returns {*}\n\t */\n\tmy.volumeStyle = function(_v) {\n\t\tif (!arguments.length) return volumeStyle;\n\t\tvolumeStyle = _v;\n\t\treturn this;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}