{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { dispatch } from \"../events\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Particle Plot Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.particlePlot();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/3d-scatterplot/\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"orange\"];\n  let color;\n  let classed = \"d3X3dParticlePlot\";\n  let mappings;\n  let debug = false;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.axisThreePlane();\n  const particles = component.particles();\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n  const init = function (data) {\n    let newData = {};\n    ['x', 'y', 'z', 'color'].forEach(dimension => {\n      let set = {\n        key: dimension,\n        values: []\n      };\n      data.values.forEach(d => {\n        let key = mappings[dimension];\n        let value = d.values.find(v => v.key === key).value;\n        set.values.push({\n          key: key,\n          value: value\n        });\n      });\n      newData[dimension] = dataTransform(set).summary();\n    });\n    let extentX = newData.x.valueExtent;\n    let extentY = newData.y.valueExtent;\n    let extentZ = newData.z.valueExtent;\n    let extentColor = newData.color.valueExtent;\n    xScale = d3.scaleLinear().domain(extentX).range([0, dimensions.x]);\n    yScale = d3.scaleLinear().domain(extentY).range([0, dimensions.y]);\n    zScale = d3.scaleLinear().domain(extentZ).range([0, dimensions.z]);\n\n    if (color) {\n      colorScale = d3.scaleQuantize().domain(extentColor).range([color, color]);\n    } else {\n      colorScale = d3.scaleQuantize().domain(extentColor).range(colors);\n    }\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias particlePlot\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"particles\", \"crosshair\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.xScale(xScale).yScale(yScale).zScale(zScale);\n      scene.select(\".axis\").call(axis); // Add Particles\n\n      particles.xScale(xScale).mappings(mappings).yScale(yScale).zScale(zScale).colorScale(colorScale);\n      scene.select(\".particles\").datum(data).call(particles);\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Color Getter / Setter\n   *\n   * @param {string} _v - Color (e.g. \"red\" or \"#ff0000\").\n   * @returns {*}\n   */\n\n\n  my.color = function (_v) {\n    if (!arguments.length) return color;\n    color = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Mappings Getter / Setter\n   *\n   * @param {Object} _v - Map properties to colour etc.\n   * @returns {*}\n   */\n\n\n  my.mappings = function (_v) {\n    if (!arguments.length) return mappings;\n    mappings = _v;\n    return my;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n  /**\n   * Dispatch On Getter\n   *\n   * @returns {*}\n   */\n\n\n  my.on = function () {\n    let value = dispatch.on.apply(dispatch, arguments);\n    return value === dispatch ? my : value;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/particlePlot.js"],"names":["d3","dataTransform","component","dispatch","createScene","width","height","dimensions","x","y","z","colors","color","classed","mappings","debug","xScale","yScale","zScale","colorScale","viewpoint","axis","axisThreePlane","particles","init","data","newData","forEach","dimension","set","key","values","d","value","find","v","push","summary","extentX","valueExtent","extentY","extentZ","extentColor","scaleLinear","domain","range","scaleQuantize","my","selection","layers","scene","each","centerOfRotation","call","select","datum","_v","arguments","length","on","apply"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { dispatch } from \"../events\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Particle Plot Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.particlePlot();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/3d-scatterplot/\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = [\"orange\"];\n\tlet color;\n\tlet classed = \"d3X3dParticlePlot\";\n\tlet mappings;\n\tlet debug = false;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst axis = component.axisThreePlane();\n\tconst particles = component.particles();\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\n\t\tlet newData = {};\n\t\t['x', 'y', 'z', 'color'].forEach((dimension) => {\n\t\t\tlet set = {\n\t\t\t\tkey: dimension,\n\t\t\t\tvalues: []\n\t\t\t};\n\n\t\t\tdata.values.forEach((d) => {\n\t\t\t\tlet key = mappings[dimension];\n\t\t\t\tlet value = d.values.find((v) => v.key === key).value;\n\t\t\t\tset.values.push({ key: key, value: value });\n\t\t\t});\n\n\t\t\tnewData[dimension] = dataTransform(set).summary();\n\t\t});\n\n\t\tlet extentX = newData.x.valueExtent;\n\t\tlet extentY = newData.y.valueExtent;\n\t\tlet extentZ = newData.z.valueExtent;\n\t\tlet extentColor = newData.color.valueExtent;\n\n\t\txScale = d3.scaleLinear()\n\t\t\t.domain(extentX)\n\t\t\t.range([0, dimensions.x]);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain(extentY)\n\t\t\t.range([0, dimensions.y]);\n\n\t\tzScale = d3.scaleLinear()\n\t\t\t.domain(extentZ)\n\t\t\t.range([0, dimensions.z]);\n\n\t\tif (color) {\n\t\t\tcolorScale = d3.scaleQuantize()\n\t\t\t\t.domain(extentColor)\n\t\t\t\t.range([color, color]);\n\t\t} else {\n\t\t\tcolorScale = d3.scaleQuantize()\n\t\t\t\t.domain(extentColor)\n\t\t\t\t.range(colors);\n\t\t}\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias particlePlot\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"axis\", \"particles\", \"crosshair\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\t\t\tinit(data);\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\taxis.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale);\n\n\t\t\tscene.select(\".axis\")\n\t\t\t\t.call(axis);\n\n\t\t\t// Add Particles\n\t\t\tparticles.xScale(xScale)\n\t\t\t\t.mappings(mappings)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale)\n\t\t\t\t.colorScale(colorScale);\n\n\t\t\tscene.select(\".particles\")\n\t\t\t\t.datum(data)\n\t\t\t\t.call(particles);\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Getter / Setter\n\t *\n\t * @param {string} _v - Color (e.g. \"red\" or \"#ff0000\").\n\t * @returns {*}\n\t */\n\tmy.color = function(_v) {\n\t\tif (!arguments.length) return color;\n\t\tcolor = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Mappings Getter / Setter\n\t *\n\t * @param {Object} _v - Map properties to colour etc.\n\t * @returns {*}\n\t */\n\tmy.mappings = function(_v) {\n\t\tif (!arguments.length) return mappings;\n\t\tmappings = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Dispatch On Getter\n\t *\n\t * @returns {*}\n\t */\n\tmy.on = function() {\n\t\tlet value = dispatch.on.apply(dispatch, arguments);\n\t\treturn value === dispatch ? my : value;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}