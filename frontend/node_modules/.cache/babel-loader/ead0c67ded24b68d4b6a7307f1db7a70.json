{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\"; //import component from \"../components\";\n\nimport { createScene } from \"../base\";\n/**\r\n * Reusable 3D Multi Series Area Chart\r\n *\r\n * @module\r\n *\r\n * @example\r\n * let chartHolder = d3.select(\"#chartholder\");\r\n *\r\n * let myData = [...];\r\n *\r\n * let myChart = d3.x3d.chart.areaChartMultiSeries();\r\n *\r\n * chartHolder.datum(myData).call(myChart);\r\n *\r\n * @see https://datavizproject.com/data-type/nested-area-chart/\r\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 60,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\n  let classed = \"d3X3dAreaChartMultiSeries\";\n  let debug = false;\n  let smoothed = d3.curveMonotoneX;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.axisThreePlane().labelPosition(\"distal\");\n  const areas = component.areaMultiSeries();\n  const light = component.light();\n  /**\r\n   * Initialise Data and Scales\r\n   *\r\n   * @private\r\n   * @param {Array} data - Chart data.\r\n   */\n\n  const init = function (data) {\n    const {\n      rowKeys,\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    xScale = d3.scalePoint().domain(columnKeys).range([0, dimensionX]);\n    yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]).nice();\n    zScale = d3.scaleBand().domain(rowKeys).range([0, dimensionZ]).padding(0.4);\n    colorScale = d3.scaleOrdinal().domain(columnKeys).range(colors);\n  };\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @alias areaChartMultiSeries\r\n   * @param {d3.selection} selection - The chart holder D3 selection.\r\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"areas\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]).viewOrientation([-0.61021, 0.77568, 0.16115, 0.65629]).viewPosition([77.63865, 54.69470, 104.38314]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.xScale(xScale).yScale(yScale).zScale(zScale);\n      scene.select(\".axis\").call(axis); // Add Areas\n\n      areas.xScale(xScale).yScale(yScale).zScale(zScale).colors(colors).smoothed(smoothed).dimensions(dimensions);\n      scene.select(\".areas\").datum(data).call(areas); // Add Light\n\n      scene.call(light);\n    });\n  };\n  /**\r\n   * Width Getter / Setter\r\n   *\r\n   * @param {number} _v - X3D canvas width in px.\r\n   * @returns {*}\r\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\r\n   * Height Getter / Setter\r\n   *\r\n   * @param {number} _v - X3D canvas height in px.\r\n   * @returns {*}\r\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\r\n   * Dimensions Getter / Setter\r\n   *\r\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n   * @returns {*}\r\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\r\n   * X Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\r\n   * Y Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\r\n   * Z Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\r\n   * Color Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 color scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\r\n   * Colors Getter / Setter\r\n   *\r\n   * @param {Array} _v - Array of colours used by color scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\r\n   * Smooth Interpolation Getter / Setter\r\n   *\r\n   * Options:\r\n   *   d3.curveBasis\r\n   *   d3.curveLinear\r\n   *   d3.curveMonotoneX\r\n   *\r\n   * @param {d3.curve} _v.\r\n   * @returns {*}\r\n   */\n\n\n  my.smoothed = function (_v) {\n    if (!arguments.length) return smoothed;\n    smoothed = _v;\n    return my;\n  };\n  /**\r\n   * Debug Getter / Setter\r\n   *\r\n   * @param {boolean} _v - Show debug log and stats. True/False.\r\n   * @returns {*}\r\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/src/components/graph.js"],"names":["d3","dataTransform","createScene","width","height","dimensions","x","y","z","colors","classed","debug","smoothed","curveMonotoneX","xScale","yScale","zScale","colorScale","viewpoint","component","axis","axisThreePlane","labelPosition","areas","areaMultiSeries","light","init","data","rowKeys","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","dimensionZ","scalePoint","domain","range","scaleLinear","nice","scaleBand","padding","scaleOrdinal","my","selection","layers","scene","each","centerOfRotation","viewOrientation","viewPosition","call","select","datum","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\r\nimport dataTransform from \"../dataTransform\";\r\n//import component from \"../components\";\r\nimport { createScene } from \"../base\";\r\n\r\n/**\r\n * Reusable 3D Multi Series Area Chart\r\n *\r\n * @module\r\n *\r\n * @example\r\n * let chartHolder = d3.select(\"#chartholder\");\r\n *\r\n * let myData = [...];\r\n *\r\n * let myChart = d3.x3d.chart.areaChartMultiSeries();\r\n *\r\n * chartHolder.datum(myData).call(myChart);\r\n *\r\n * @see https://datavizproject.com/data-type/nested-area-chart/\r\n */\r\nexport default function() {\r\n\r\n\t/* Default Properties */\r\n\tlet width = 500;\r\n\tlet height = 500;\r\n\tlet dimensions = { x: 60, y: 40, z: 40 };\r\n\tlet colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\r\n\tlet classed = \"d3X3dAreaChartMultiSeries\";\r\n\tlet debug = false;\r\n\tlet smoothed = d3.curveMonotoneX;\r\n\r\n\t/* Scales */\r\n\tlet xScale;\r\n\tlet yScale;\r\n\tlet zScale;\r\n\tlet colorScale;\r\n\r\n\t/* Components */\r\n\tconst viewpoint = component.viewpoint();\r\n\tconst axis = component.axisThreePlane().labelPosition(\"distal\");\r\n\tconst areas = component.areaMultiSeries();\r\n\tconst light = component.light();\r\n\r\n\t/**\r\n\t * Initialise Data and Scales\r\n\t *\r\n\t * @private\r\n\t * @param {Array} data - Chart data.\r\n\t */\r\n\tconst init = function(data) {\r\n\t\tconst { rowKeys, columnKeys, valueMax } = dataTransform(data).summary();\r\n\t\tconst valueExtent = [0, valueMax];\r\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\r\n\r\n\t\txScale = d3.scalePoint()\r\n\t\t\t.domain(columnKeys)\r\n\t\t\t.range([0, dimensionX]);\r\n\r\n\t\tyScale = d3.scaleLinear()\r\n\t\t\t.domain(valueExtent)\r\n\t\t\t.range([0, dimensionY])\r\n\t\t\t.nice();\r\n\r\n\t\tzScale = d3.scaleBand()\r\n\t\t\t.domain(rowKeys)\r\n\t\t\t.range([0, dimensionZ])\r\n\t\t\t.padding(0.4);\r\n\r\n\t\tcolorScale = d3.scaleOrdinal()\r\n\t\t\t.domain(columnKeys)\r\n\t\t\t.range(colors);\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @constructor\r\n\t * @alias areaChartMultiSeries\r\n\t * @param {d3.selection} selection - The chart holder D3 selection.\r\n\t */\r\n\tconst my = function(selection) {\r\n\t\tconst layers = [\"axis\", \"areas\"];\r\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\r\n\r\n\t\tselection.each((data) => {\r\n\t\t\tinit(data);\r\n\r\n\t\t\t// Add Viewpoint\r\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2])\r\n\t\t\t\t.viewOrientation([-0.61021, 0.77568, 0.16115, 0.65629])\r\n\t\t\t\t.viewPosition([77.63865, 54.69470, 104.38314]);\r\n\r\n\t\t\tscene.call(viewpoint);\r\n\r\n\t\t\t// Add Axis\r\n\t\t\taxis.xScale(xScale)\r\n\t\t\t\t.yScale(yScale)\r\n\t\t\t\t.zScale(zScale);\r\n\r\n\t\t\tscene.select(\".axis\")\r\n\t\t\t\t.call(axis);\r\n\r\n\t\t\t// Add Areas\r\n\t\t\tareas.xScale(xScale)\r\n\t\t\t\t.yScale(yScale)\r\n\t\t\t\t.zScale(zScale)\r\n\t\t\t\t.colors(colors)\r\n\t\t\t\t.smoothed(smoothed)\r\n\t\t\t\t.dimensions(dimensions);\r\n\r\n\t\t\tscene.select(\".areas\")\r\n\t\t\t\t.datum(data)\r\n\t\t\t\t.call(areas);\r\n\r\n\t\t\t// Add Light\r\n\t\t\tscene.call(light);\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Width Getter / Setter\r\n\t *\r\n\t * @param {number} _v - X3D canvas width in px.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.width = function(_v) {\r\n\t\tif (!arguments.length) return width;\r\n\t\twidth = _v;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Height Getter / Setter\r\n\t *\r\n\t * @param {number} _v - X3D canvas height in px.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.height = function(_v) {\r\n\t\tif (!arguments.length) return height;\r\n\t\theight = _v;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Dimensions Getter / Setter\r\n\t *\r\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.dimensions = function(_v) {\r\n\t\tif (!arguments.length) return dimensions;\r\n\t\tdimensions = _v;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * X Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.xScale = function(_v) {\r\n\t\tif (!arguments.length) return xScale;\r\n\t\txScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Y Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.yScale = function(_v) {\r\n\t\tif (!arguments.length) return yScale;\r\n\t\tyScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Z Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.zScale = function(_v) {\r\n\t\tif (!arguments.length) return zScale;\r\n\t\tzScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Color Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 color scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colorScale = function(_v) {\r\n\t\tif (!arguments.length) return colorScale;\r\n\t\tcolorScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Colors Getter / Setter\r\n\t *\r\n\t * @param {Array} _v - Array of colours used by color scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colors = function(_v) {\r\n\t\tif (!arguments.length) return colors;\r\n\t\tcolors = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Smooth Interpolation Getter / Setter\r\n\t *\r\n\t * Options:\r\n\t *   d3.curveBasis\r\n\t *   d3.curveLinear\r\n\t *   d3.curveMonotoneX\r\n\t *\r\n\t * @param {d3.curve} _v.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.smoothed = function(_v) {\r\n\t\tif (!arguments.length) return smoothed;\r\n\t\tsmoothed = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Debug Getter / Setter\r\n\t *\r\n\t * @param {boolean} _v - Show debug log and stats. True/False.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.debug = function(_v) {\r\n\t\tif (!arguments.length) return debug;\r\n\t\tdebug = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\treturn my;\r\n}"]},"metadata":{},"sourceType":"module"}