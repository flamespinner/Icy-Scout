{"ast":null,"code":"import * as d3 from \"d3\";\nimport { colorParse } from \"../colorHelper\";\n/**\n * Reusable 3D Crosshair Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"blue\", \"red\", \"green\"];\n  let classed = \"d3X3dCrosshair\";\n  let radius = 0.1;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias crosshair\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      const element = d3.select(this).classed(classed, true).attr(\"id\", d => d.key);\n      const xOff = dimensions[\"x\"] / 2;\n      const yOff = dimensions[\"y\"] / 2;\n      const zOff = dimensions[\"z\"] / 2;\n      const xVal = xScale(data.x);\n      const yVal = yScale(data.y);\n      const zVal = zScale(data.z);\n      const positionVectors = {\n        x: [xOff, yVal, zVal],\n        y: [xVal, yOff, zVal],\n        z: [xVal, yVal, zOff]\n      };\n\n      function getPositionVector(axisDir) {\n        return positionVectors[axisDir].join(\" \");\n      }\n\n      const rotationVectors = {\n        x: [1, 1, 0, Math.PI],\n        y: [0, 0, 0, 0],\n        z: [0, 1, 1, Math.PI]\n      };\n\n      function getRotationVector(axisDir) {\n        return rotationVectors[axisDir].join(\" \");\n      }\n\n      const colorScale = d3.scaleOrdinal().domain(Object.keys(dimensions)).range(colors); // Origin Ball\n\n      const ballSelect = element.selectAll(\".ball\").data([data]);\n      let ball = ballSelect.enter().append(\"Transform\").attr(\"translation\", d => xScale(d.x) + \" \" + yScale(d.y) + \" \" + zScale(d.z)).classed(\"ball\", true).append(\"Shape\");\n      ball.append(\"Appearance\").append(\"Material\").attr(\"diffuseColor\", colorParse(\"blue\"));\n      ball.append(\"Sphere\").attr(\"radius\", 0.3);\n      ball.merge(ballSelect);\n      ballSelect.transition().ease(d3.easeQuadOut).attr(\"translation\", d => xScale(d.x) + \" \" + yScale(d.y) + \" \" + zScale(d.z)); // Crosshair Lines\n\n      const lineSelect = element.selectAll(\".line\").data(Object.keys(dimensions));\n      const line = lineSelect.enter().append(\"Transform\").classed(\"line\", true).attr(\"translation\", d => getPositionVector(d)).attr(\"rotation\", d => getRotationVector(d)).append(\"Shape\");\n      line.append(\"cylinder\").attr(\"radius\", radius).attr(\"height\", d => dimensions[d]);\n      line.append(\"Appearance\").append(\"Material\").attr(\"diffuseColor\", d => colorParse(colorScale(d)));\n      line.merge(lineSelect);\n      lineSelect.transition().ease(d3.easeQuadOut).attr(\"translation\", d => getPositionVector(d));\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/crosshair.js"],"names":["d3","colorParse","dimensions","x","y","z","colors","classed","radius","xScale","yScale","zScale","my","selection","each","data","element","select","attr","d","key","xOff","yOff","zOff","xVal","yVal","zVal","positionVectors","getPositionVector","axisDir","join","rotationVectors","Math","PI","getRotationVector","colorScale","scaleOrdinal","domain","Object","keys","range","ballSelect","selectAll","ball","enter","append","merge","transition","ease","easeQuadOut","lineSelect","line","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport { colorParse } from \"../colorHelper\";\n\n/**\n * Reusable 3D Crosshair Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = [\"blue\", \"red\", \"green\"];\n\tlet classed = \"d3X3dCrosshair\";\n\tlet radius = 0.1;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias crosshair\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function(data) {\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true)\n\t\t\t\t.attr(\"id\", (d) => d.key);\n\n\t\t\tconst xOff = dimensions[\"x\"] / 2;\n\t\t\tconst yOff = dimensions[\"y\"] / 2;\n\t\t\tconst zOff = dimensions[\"z\"] / 2;\n\t\t\tconst xVal = xScale(data.x);\n\t\t\tconst yVal = yScale(data.y);\n\t\t\tconst zVal = zScale(data.z);\n\n\t\t\tconst positionVectors = {\n\t\t\t\tx: [xOff, yVal, zVal],\n\t\t\t\ty: [xVal, yOff, zVal],\n\t\t\t\tz: [xVal, yVal, zOff]\n\t\t\t};\n\n\t\t\tfunction getPositionVector(axisDir) {\n\t\t\t\treturn positionVectors[axisDir].join(\" \");\n\t\t\t}\n\n\t\t\tconst rotationVectors = {\n\t\t\t\tx: [1, 1, 0, Math.PI],\n\t\t\t\ty: [0, 0, 0, 0],\n\t\t\t\tz: [0, 1, 1, Math.PI]\n\t\t\t};\n\n\t\t\tfunction getRotationVector(axisDir) {\n\t\t\t\treturn rotationVectors[axisDir].join(\" \");\n\t\t\t}\n\n\t\t\tconst colorScale = d3.scaleOrdinal()\n\t\t\t\t.domain(Object.keys(dimensions))\n\t\t\t\t.range(colors);\n\n\t\t\t// Origin Ball\n\t\t\tconst ballSelect = element.selectAll(\".ball\")\n\t\t\t\t.data([data]);\n\n\t\t\tlet ball = ballSelect.enter()\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.attr(\"translation\", (d) => (xScale(d.x) + \" \" + yScale(d.y) + \" \" + zScale(d.z)))\n\t\t\t\t.classed(\"ball\", true)\n\t\t\t\t.append(\"Shape\");\n\n\t\t\tball.append(\"Appearance\")\n\t\t\t\t.append(\"Material\")\n\t\t\t\t.attr(\"diffuseColor\", colorParse(\"blue\"));\n\n\t\t\tball.append(\"Sphere\")\n\t\t\t\t.attr(\"radius\", 0.3);\n\n\t\t\tball.merge(ballSelect);\n\n\t\t\tballSelect.transition()\n\t\t\t\t.ease(d3.easeQuadOut)\n\t\t\t\t.attr(\"translation\", (d) => (xScale(d.x) + \" \" + yScale(d.y) + \" \" + zScale(d.z)));\n\n\t\t\t// Crosshair Lines\n\t\t\tconst lineSelect = element.selectAll(\".line\")\n\t\t\t\t.data(Object.keys(dimensions));\n\n\t\t\tconst line = lineSelect.enter()\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.classed(\"line\", true)\n\t\t\t\t.attr(\"translation\", (d) => getPositionVector(d))\n\t\t\t\t.attr(\"rotation\", (d) => getRotationVector(d))\n\t\t\t\t.append(\"Shape\");\n\n\t\t\tline.append(\"cylinder\")\n\t\t\t\t.attr(\"radius\", radius)\n\t\t\t\t.attr(\"height\", (d) => dimensions[d]);\n\n\t\t\tline.append(\"Appearance\")\n\t\t\t\t.append(\"Material\")\n\t\t\t\t.attr(\"diffuseColor\", (d) => colorParse(colorScale(d)));\n\n\t\t\tline.merge(lineSelect);\n\n\t\t\tlineSelect.transition()\n\t\t\t\t.ease(d3.easeQuadOut)\n\t\t\t\t.attr(\"translation\", (d) => getPositionVector(d));\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}