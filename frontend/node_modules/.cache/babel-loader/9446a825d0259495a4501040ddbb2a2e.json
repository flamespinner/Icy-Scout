{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport { dispatch } from \"../events\";\nimport { colorParse } from \"../colorHelper\";\n/**\n * Reusable 3D Particle Plot Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = d3.schemeRdYlGn[8];\n  let color;\n  let classed = \"d3X3dBubbles\";\n  let mappings;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  /**\n   * Array to String\n   *\n   * @private\n   * @param {array} arr\n   * @returns {string}\n   */\n\n  const array2dToString = function (arr) {\n    return arr.reduce((a, b) => a.concat(b), []).reduce((a, b) => a.concat(b), []).join(\" \");\n  };\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n\n  const init = function (data) {\n    let newData = {};\n    ['x', 'y', 'z', 'color'].forEach(dimension => {\n      let set = {\n        key: dimension,\n        values: []\n      };\n      data.values.forEach(d => {\n        let key = mappings[dimension];\n        let value = d.values.find(v => v.key === key).value;\n        set.values.push({\n          key: key,\n          value: value\n        });\n      });\n      newData[dimension] = dataTransform(set).summary();\n    });\n    let extentX = newData.x.valueExtent;\n    let extentY = newData.y.valueExtent;\n    let extentZ = newData.z.valueExtent;\n    let extentColor = newData.color.valueExtent;\n\n    if (typeof xScale === \"undefined\") {\n      xScale = d3.scaleLinear().domain(extentX).range([0, dimensions.x]);\n    }\n\n    if (typeof yScale === \"undefined\") {\n      yScale = d3.scaleLinear().domain(extentY).range([0, dimensions.y]);\n    }\n\n    if (typeof zScale === \"undefined\") {\n      zScale = d3.scaleLinear().domain(extentZ).range([0, dimensions.z]);\n    }\n\n    if (color) {\n      colorScale = d3.scaleQuantize().domain(extentColor).range([color, color]);\n    } else if (typeof colorScale === \"undefined\") {\n      colorScale = d3.scaleQuantize().domain(extentColor).range(colors);\n    }\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias particles\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      init(data);\n      const element = d3.select(this).classed(classed, true).attr(\"id\", d => d.key);\n\n      const particleData = function (data) {\n        const pointCoords = function (Y) {\n          return Y.values.map(function (d) {\n            let xVal = d.values.find(v => v.key === mappings.x).value;\n            let yVal = d.values.find(v => v.key === mappings.y).value;\n            let zVal = d.values.find(v => v.key === mappings.z).value;\n            return [xScale(xVal), yScale(yVal), zScale(zVal)];\n          });\n        };\n\n        const pointColors = function (Y) {\n          return Y.values.map(function (d) {\n            let colorVal = d.values.find(v => v.key === mappings.color).value;\n            let color = d3.color(colorScale(colorVal));\n            return colorParse(color);\n          });\n        };\n\n        data.point = array2dToString(pointCoords(data));\n        data.color = array2dToString(pointColors(data));\n        return [data];\n      };\n\n      const shape = el => {\n        const shape = el.append(\"Shape\");\n        /*\n        // FIXME: x3dom cannot have empty IFS nodes, we must to use .html() rather than .append() & .attr().\n        const appearance = shape.append(\"Appearance\");\n        appearance.append(\"PointProperties\")\n        \t.attr(\"colorMode\", \"POINT_COLOR\")\n        \t.attr(\"pointSizeMinValue\", 1)\n        \t.attr(\"pointSizeMaxValue\", 100)\n        \t.attr(\"pointSizeScaleFactor\", 5);\n        \tconst pointset = shape.append(\"PointSet\");\n        pointset.append(\"Coordinate\")\n        \t.attr(\"point\", (d) => d.point);\n        pointset.append(\"Color\")\n        \t.attr(\"color\", (d) => d.color);\n        */\n\n        shape.html(d => `\n\t\t\t\t\t<Appearance>\n\t\t\t\t\t\t<PointProperties colorMode=\"POINT_COLOR\" pointSizeMinValue=\"1\" pointSizeMaxValue=\"100\" pointSizeScaleFactor=\"5\"></PointProperties>\n\t\t\t\t\t</Appearance>\n\t\t\t\t\t<PointSet>\n\t\t\t\t\t\t<Coordinate point=\"${d.point}\"></Coordinate>\n\t\t\t\t\t\t<Color color=\"${d.color}\"></Color>\n\t\t\t\t\t</IndexedFaceset>\n\t\t\t\t  `);\n      };\n\n      const particles = element.selectAll(\".particle\").data(d => particleData(d), d => d.key);\n      particles.enter().append(\"Group\").classed(\"particle\", true).call(shape).merge(particles);\n      const particleTransition = particles.transition().select(\"Shape\");\n      particleTransition.select(\"PointSet\").select(\"Coordinate\").attr(\"point\", d => d.point);\n      particleTransition.select(\"PointSet\").select(\"Color\").attr(\"color\", d => d.color);\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Color Getter / Setter\n   *\n   * @param {string} _v - Color (e.g. \"red\" or \"#ff0000\").\n   * @returns {*}\n   */\n\n\n  my.color = function (_v) {\n    if (!arguments.length) return color;\n    color = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Mappings Getter / Setter\n   *\n   * @param {Object} _v - Map properties to colour etc.\n   * @returns {*}\n   */\n\n\n  my.mappings = function (_v) {\n    if (!arguments.length) return mappings;\n    mappings = _v;\n    return my;\n  };\n  /**\n   * Dispatch On Getter\n   *\n   * @returns {*}\n   */\n\n\n  my.on = function () {\n    let value = dispatch.on.apply(dispatch, arguments);\n    return value === dispatch ? my : value;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/particles.js"],"names":["d3","dataTransform","dispatch","colorParse","dimensions","x","y","z","colors","schemeRdYlGn","color","classed","mappings","xScale","yScale","zScale","colorScale","array2dToString","arr","reduce","a","b","concat","join","init","data","newData","forEach","dimension","set","key","values","d","value","find","v","push","summary","extentX","valueExtent","extentY","extentZ","extentColor","scaleLinear","domain","range","scaleQuantize","my","selection","each","element","select","attr","particleData","pointCoords","Y","map","xVal","yVal","zVal","pointColors","colorVal","point","shape","el","append","html","particles","selectAll","enter","call","merge","particleTransition","transition","_v","arguments","length","on","apply"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport { dispatch } from \"../events\";\nimport { colorParse } from \"../colorHelper\";\n\n/**\n * Reusable 3D Particle Plot Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = d3.schemeRdYlGn[8];\n\tlet color;\n\tlet classed = \"d3X3dBubbles\";\n\tlet mappings;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\n\t/**\n\t * Array to String\n\t *\n\t * @private\n\t * @param {array} arr\n\t * @returns {string}\n\t */\n\tconst array2dToString = function(arr) {\n\t\treturn arr.reduce((a, b) => a.concat(b), [])\n\t\t\t.reduce((a, b) => a.concat(b), [])\n\t\t\t.join(\" \");\n\t};\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tlet newData = {};\n\t\t['x', 'y', 'z', 'color'].forEach((dimension) => {\n\t\t\tlet set = {\n\t\t\t\tkey: dimension,\n\t\t\t\tvalues: []\n\t\t\t};\n\n\t\t\tdata.values.forEach((d) => {\n\t\t\t\tlet key = mappings[dimension];\n\t\t\t\tlet value = d.values.find((v) => v.key === key).value;\n\t\t\t\tset.values.push({ key: key, value: value });\n\t\t\t});\n\n\t\t\tnewData[dimension] = dataTransform(set).summary();\n\t\t});\n\n\t\tlet extentX = newData.x.valueExtent;\n\t\tlet extentY = newData.y.valueExtent;\n\t\tlet extentZ = newData.z.valueExtent;\n\t\tlet extentColor = newData.color.valueExtent;\n\n\t\tif (typeof xScale === \"undefined\") {\n\t\t\txScale = d3.scaleLinear()\n\t\t\t\t.domain(extentX)\n\t\t\t\t.range([0, dimensions.x]);\n\t\t}\n\n\t\tif (typeof yScale === \"undefined\") {\n\t\t\tyScale = d3.scaleLinear()\n\t\t\t\t.domain(extentY)\n\t\t\t\t.range([0, dimensions.y]);\n\t\t}\n\n\t\tif (typeof zScale === \"undefined\") {\n\t\t\tzScale = d3.scaleLinear()\n\t\t\t\t.domain(extentZ)\n\t\t\t\t.range([0, dimensions.z]);\n\t\t}\n\n\t\tif (color) {\n\t\t\tcolorScale = d3.scaleQuantize()\n\t\t\t\t.domain(extentColor)\n\t\t\t\t.range([color, color]);\n\t\t} else if (typeof colorScale === \"undefined\") {\n\t\t\tcolorScale = d3.scaleQuantize()\n\t\t\t\t.domain(extentColor)\n\t\t\t\t.range(colors);\n\t\t}\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias particles\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function(data) {\n\t\t\tinit(data);\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true)\n\t\t\t\t.attr(\"id\", (d) => d.key);\n\n\t\t\tconst particleData = function(data) {\n\t\t\t\tconst pointCoords = function(Y) {\n\t\t\t\t\treturn Y.values.map(function(d) {\n\t\t\t\t\t\tlet xVal = d.values.find((v) => v.key === mappings.x).value;\n\t\t\t\t\t\tlet yVal = d.values.find((v) => v.key === mappings.y).value;\n\t\t\t\t\t\tlet zVal = d.values.find((v) => v.key === mappings.z).value;\n\t\t\t\t\t\treturn [xScale(xVal), yScale(yVal), zScale(zVal)];\n\t\t\t\t\t})\n\t\t\t\t};\n\n\t\t\t\tconst pointColors = function(Y) {\n\t\t\t\t\treturn Y.values.map(function(d) {\n\t\t\t\t\t\tlet colorVal = d.values.find((v) => v.key === mappings.color).value;\n\t\t\t\t\t\tlet color = d3.color(colorScale(colorVal));\n\t\t\t\t\t\treturn colorParse(color);\n\t\t\t\t\t})\n\t\t\t\t};\n\n\t\t\t\tdata.point = array2dToString(pointCoords(data));\n\t\t\t\tdata.color = array2dToString(pointColors(data));\n\n\t\t\t\treturn [data];\n\t\t\t};\n\n\t\t\tconst shape = (el) => {\n\t\t\t\tconst shape = el.append(\"Shape\");\n\n\t\t\t\t/*\n\t\t\t\t// FIXME: x3dom cannot have empty IFS nodes, we must to use .html() rather than .append() & .attr().\n\t\t\t\tconst appearance = shape.append(\"Appearance\");\n\t\t\t\tappearance.append(\"PointProperties\")\n\t\t\t\t\t.attr(\"colorMode\", \"POINT_COLOR\")\n\t\t\t\t\t.attr(\"pointSizeMinValue\", 1)\n\t\t\t\t\t.attr(\"pointSizeMaxValue\", 100)\n\t\t\t\t\t.attr(\"pointSizeScaleFactor\", 5);\n\n\t\t\t\tconst pointset = shape.append(\"PointSet\");\n\t\t\t\tpointset.append(\"Coordinate\")\n\t\t\t\t\t.attr(\"point\", (d) => d.point);\n\t\t\t\tpointset.append(\"Color\")\n\t\t\t\t\t.attr(\"color\", (d) => d.color);\n\t\t\t\t*/\n\n\t\t\t\tshape.html((d) => `\n\t\t\t\t\t<Appearance>\n\t\t\t\t\t\t<PointProperties colorMode=\"POINT_COLOR\" pointSizeMinValue=\"1\" pointSizeMaxValue=\"100\" pointSizeScaleFactor=\"5\"></PointProperties>\n\t\t\t\t\t</Appearance>\n\t\t\t\t\t<PointSet>\n\t\t\t\t\t\t<Coordinate point=\"${d.point}\"></Coordinate>\n\t\t\t\t\t\t<Color color=\"${d.color}\"></Color>\n\t\t\t\t\t</IndexedFaceset>\n\t\t\t\t  `);\n\t\t\t};\n\n\t\t\tconst particles = element.selectAll(\".particle\")\n\t\t\t\t.data((d) => particleData(d), (d) => d.key);\n\n\t\t\tparticles.enter()\n\t\t\t\t.append(\"Group\")\n\t\t\t\t.classed(\"particle\", true)\n\t\t\t\t.call(shape)\n\t\t\t\t.merge(particles);\n\n\t\t\tconst particleTransition = particles.transition().select(\"Shape\");\n\n\t\t\tparticleTransition.select(\"PointSet\")\n\t\t\t\t.select(\"Coordinate\")\n\t\t\t\t.attr(\"point\", (d) => d.point);\n\n\t\t\tparticleTransition.select(\"PointSet\")\n\t\t\t\t.select(\"Color\")\n\t\t\t\t.attr(\"color\", (d) => d.color);\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Getter / Setter\n\t *\n\t * @param {string} _v - Color (e.g. \"red\" or \"#ff0000\").\n\t * @returns {*}\n\t */\n\tmy.color = function(_v) {\n\t\tif (!arguments.length) return color;\n\t\tcolor = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Mappings Getter / Setter\n\t *\n\t * @param {Object} _v - Map properties to colour etc.\n\t * @returns {*}\n\t */\n\tmy.mappings = function(_v) {\n\t\tif (!arguments.length) return mappings;\n\t\tmappings = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Dispatch On Getter\n\t *\n\t * @returns {*}\n\t */\n\tmy.on = function() {\n\t\tlet value = dispatch.on.apply(dispatch, arguments);\n\t\treturn value === dispatch ? my : value;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}