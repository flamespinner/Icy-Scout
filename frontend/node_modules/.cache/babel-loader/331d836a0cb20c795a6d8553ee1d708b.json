{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport { dispatch } from \"../events\";\nimport { colorParse } from \"../colorHelper\";\nimport * as glMatrix from \"gl-matrix\";\n/**\n * Reusable 3D Vector Fields Component\n *\n * @module\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = d3.schemeRdYlGn[8];\n  let classed = \"d3X3dVectorFields\";\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  let sizeScale;\n  let sizeRange = [2.0, 5.0];\n  /**\n   * Vector Field Function\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @param {number} value\n   * @returns {{vx: number, vy: number, vz: number}}\n   */\n\n  let vectorFunction = function (x, y, z) {\n    let value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    return {\n      vx: x,\n      vy: y,\n      vz: z\n    };\n  };\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n\n  const init = function (data) {\n    const {\n      coordinatesMax,\n      coordinatesMin\n    } = dataTransform(data).summary();\n    const {\n      x: minX,\n      y: minY,\n      z: minZ\n    } = coordinatesMin;\n    const {\n      x: maxX,\n      y: maxY,\n      z: maxZ\n    } = coordinatesMax;\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    const extent = d3.extent(data.values.map(f => {\n      let vx, vy, vz;\n\n      if (\"vx\" in f) {\n        ({\n          vx,\n          vy,\n          vz\n        } = f);\n      } else {\n        ({\n          vx,\n          vy,\n          vz\n        } = vectorFunction(f.x, f.y, f.z, f.value));\n      }\n\n      let vector = glMatrix.vec3.fromValues(vx, vy, vz);\n      return glMatrix.vec3.length(vector);\n    }));\n\n    if (typeof xScale === \"undefined\") {\n      xScale = d3.scaleLinear().domain([minX, maxX]).range([0, dimensionX]);\n    }\n\n    if (typeof yScale === \"undefined\") {\n      yScale = d3.scaleLinear().domain([minY, maxY]).range([0, dimensionY]);\n    }\n\n    if (typeof zScale === \"undefined\") {\n      zScale = d3.scaleLinear().domain([minZ, maxZ]).range([0, dimensionZ]);\n    }\n\n    if (typeof sizeScale === \"undefined\") {\n      sizeScale = d3.scaleLinear().domain(extent).range(sizeRange);\n    }\n\n    if (typeof colorScale === \"undefined\") {\n      colorScale = d3.scaleQuantize().domain(extent).range(colors);\n    }\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias vectorFields\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      init(data);\n      const element = d3.select(this).classed(classed, true).attr(\"id\", d => d.key);\n\n      const vectorData = function (d) {\n        return d.values.map(f => {\n          let vx, vy, vz;\n\n          if (\"vx\" in f) {\n            ({\n              vx,\n              vy,\n              vz\n            } = f);\n          } else {\n            ({\n              vx,\n              vy,\n              vz\n            } = vectorFunction(f.x, f.y, f.z, f.value));\n          }\n\n          const vecStart = glMatrix.vec3.fromValues(0, 1, 0);\n          const vecEnd = glMatrix.vec3.fromValues(vx, vy, vz);\n          const vecLen = glMatrix.vec3.length(vecEnd); // rotationTo required unit vectors\n\n          const vecNormal = glMatrix.vec3.create();\n          glMatrix.vec3.normalize(vecNormal, vecEnd);\n          const quat = glMatrix.quat.create();\n          glMatrix.quat.rotationTo(quat, vecStart, vecNormal);\n          const vecRotate = glMatrix.vec3.create();\n          const angleRotate = glMatrix.quat.getAxisAngle(vecRotate, quat);\n\n          if (!vecLen) {\n            // If there is no vector length return null (and filter them out after)\n            return null;\n          } // Calculate transform-translation attr\n\n\n          f.translation = xScale(f.x) + \" \" + yScale(f.y) + \" \" + zScale(f.z); // Calculate vector length\n\n          f.value = vecLen; // Calculate transform-rotation attr\n\n          f.rotation = [...vecRotate, angleRotate].join(\" \");\n          return f;\n        }).filter(function (f) {\n          return f !== null;\n        });\n      };\n\n      const arrows = element.selectAll(\".arrow\").data(vectorData);\n      const arrowsEnter = arrows.enter().append(\"Transform\").attr(\"translation\", d => d.translation).attr(\"rotation\", d => d.rotation).attr(\"class\", \"arrow\").append(\"Transform\").attr(\"translation\", d => {\n        let offset = sizeScale(d.value) / 2;\n        return \"0 \" + offset + \" 0\";\n      }).append(\"Group\");\n      const arrowHead = arrowsEnter.append(\"Shape\");\n      arrowHead.append(\"Appearance\").append(\"Material\").attr(\"diffuseColor\", d => colorParse(colorScale(d.value)));\n      arrowHead.append(\"Cylinder\").attr(\"height\", d => sizeScale(d.value)).attr(\"radius\", 0.1);\n      const arrowShaft = arrowsEnter.append(\"Transform\").attr(\"translation\", d => {\n        let offset = sizeScale(d.value) / 2;\n        return \"0 \" + offset + \" 0\";\n      }).append(\"Shape\");\n      arrowShaft.append(\"Appearance\").append(\"Material\").attr(\"diffuseColor\", d => colorParse(colorScale(d.value)));\n      arrowShaft.append(\"Cone\").attr(\"height\", 1).attr(\"bottomRadius\", 0.4);\n      arrowsEnter.merge(arrows);\n      arrows.transition().attr(\"translation\", d => d.translation);\n      arrows.exit().remove();\n    });\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Size Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.sizeScale = function (_v) {\n    if (!arguments.length) return sizeScale;\n    sizeScale = _v;\n    return my;\n  };\n  /**\n   * Size Range Getter / Setter\n   *\n   * @param {number[]} _v - Size min and max (e.g. [1, 9]).\n   * @returns {*}\n   */\n\n\n  my.sizeRange = function (_v) {\n    if (!arguments.length) return sizeRange;\n    sizeRange = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Vector Function Getter / Setter\n   *\n   * @param {function} _f - Vector Function.\n   * @returns {*}\n   */\n\n\n  my.vectorFunction = function (_f) {\n    if (!arguments.length) return vectorFunction;\n    vectorFunction = _f;\n    return my;\n  };\n  /**\n   * Dispatch On Getter\n   *\n   * @returns {*}\n   */\n\n\n  my.on = function () {\n    let value = dispatch.on.apply(dispatch, arguments);\n    return value === dispatch ? my : value;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/component/vectorFields.js"],"names":["d3","dataTransform","dispatch","colorParse","glMatrix","dimensions","x","y","z","colors","schemeRdYlGn","classed","xScale","yScale","zScale","colorScale","sizeScale","sizeRange","vectorFunction","value","vx","vy","vz","init","data","coordinatesMax","coordinatesMin","summary","minX","minY","minZ","maxX","maxY","maxZ","dimensionX","dimensionY","dimensionZ","extent","values","map","f","vector","vec3","fromValues","length","scaleLinear","domain","range","scaleQuantize","my","selection","each","element","select","attr","d","key","vectorData","vecStart","vecEnd","vecLen","vecNormal","create","normalize","quat","rotationTo","vecRotate","angleRotate","getAxisAngle","translation","rotation","join","filter","arrows","selectAll","arrowsEnter","enter","append","offset","arrowHead","arrowShaft","merge","transition","exit","remove","_v","arguments","_f","on","apply"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport { dispatch } from \"../events\";\nimport { colorParse } from \"../colorHelper\";\nimport * as glMatrix from \"gl-matrix\";\n\n/**\n * Reusable 3D Vector Fields Component\n *\n * @module\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = d3.schemeRdYlGn[8];\n\tlet classed = \"d3X3dVectorFields\";\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\tlet sizeScale;\n\tlet sizeRange = [2.0, 5.0];\n\n\t/**\n\t * Vector Field Function\n\t *\n\t * @param {number} x\n\t * @param {number} y\n\t * @param {number} z\n\t * @param {number} value\n\t * @returns {{vx: number, vy: number, vz: number}}\n\t */\n\tlet vectorFunction = function(x, y, z, value = null) {\n\t\treturn {\n\t\t\tvx: x,\n\t\t\tvy: y,\n\t\t\tvz: z\n\t\t};\n\t};\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { coordinatesMax, coordinatesMin } = dataTransform(data).summary();\n\t\tconst { x: minX, y: minY, z: minZ } = coordinatesMin;\n\t\tconst { x: maxX, y: maxY, z: maxZ } = coordinatesMax;\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\tconst extent = d3.extent(data.values.map((f) => {\n\t\t\tlet vx, vy, vz;\n\t\t\tif (\"vx\" in f) {\n\t\t\t\t({ vx, vy, vz } = f);\n\t\t\t} else {\n\t\t\t\t({ vx, vy, vz } = vectorFunction(f.x, f.y, f.z, f.value));\n\t\t\t}\n\n\t\t\tlet vector = glMatrix.vec3.fromValues(vx, vy, vz);\n\t\t\treturn glMatrix.vec3.length(vector);\n\t\t}));\n\n\t\tif (typeof xScale === \"undefined\") {\n\t\t\txScale = d3.scaleLinear()\n\t\t\t\t.domain([minX, maxX])\n\t\t\t\t.range([0, dimensionX]);\n\t\t}\n\n\t\tif (typeof yScale === \"undefined\") {\n\t\t\tyScale = d3.scaleLinear()\n\t\t\t\t.domain([minY, maxY])\n\t\t\t\t.range([0, dimensionY]);\n\t\t}\n\n\t\tif (typeof zScale === \"undefined\") {\n\t\t\tzScale = d3.scaleLinear()\n\t\t\t\t.domain([minZ, maxZ])\n\t\t\t\t.range([0, dimensionZ]);\n\t\t}\n\n\t\tif (typeof sizeScale === \"undefined\") {\n\t\t\tsizeScale = d3.scaleLinear()\n\t\t\t\t.domain(extent)\n\t\t\t\t.range(sizeRange);\n\t\t}\n\n\t\tif (typeof colorScale === \"undefined\") {\n\t\t\tcolorScale = d3.scaleQuantize()\n\t\t\t\t.domain(extent)\n\t\t\t\t.range(colors);\n\t\t}\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias vectorFields\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tselection.each(function(data) {\n\t\t\tinit(data);\n\n\t\t\tconst element = d3.select(this)\n\t\t\t\t.classed(classed, true)\n\t\t\t\t.attr(\"id\", (d) => d.key);\n\n\t\t\tconst vectorData = function(d) {\n\t\t\t\treturn d.values.map((f) => {\n\n\t\t\t\t\tlet vx, vy, vz;\n\t\t\t\t\tif (\"vx\" in f) {\n\t\t\t\t\t\t({ vx, vy, vz } = f);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t({ vx, vy, vz } = vectorFunction(f.x, f.y, f.z, f.value));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst vecStart = glMatrix.vec3.fromValues(0, 1, 0);\n\t\t\t\t\tconst vecEnd = glMatrix.vec3.fromValues(vx, vy, vz);\n\t\t\t\t\tconst vecLen = glMatrix.vec3.length(vecEnd);\n\n\t\t\t\t\t// rotationTo required unit vectors\n\t\t\t\t\tconst vecNormal = glMatrix.vec3.create();\n\t\t\t\t\tglMatrix.vec3.normalize(vecNormal, vecEnd);\n\n\t\t\t\t\tconst quat = glMatrix.quat.create();\n\t\t\t\t\tglMatrix.quat.rotationTo(quat, vecStart, vecNormal);\n\t\t\t\t\tconst vecRotate = glMatrix.vec3.create();\n\t\t\t\t\tconst angleRotate = glMatrix.quat.getAxisAngle(vecRotate, quat);\n\n\t\t\t\t\tif (!vecLen) {\n\t\t\t\t\t\t// If there is no vector length return null (and filter them out after)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calculate transform-translation attr\n\t\t\t\t\tf.translation = xScale(f.x) + \" \" + yScale(f.y) + \" \" + zScale(f.z);\n\n\t\t\t\t\t// Calculate vector length\n\t\t\t\t\tf.value = vecLen;\n\n\t\t\t\t\t// Calculate transform-rotation attr\n\t\t\t\t\tf.rotation = [...vecRotate, angleRotate].join(\" \");\n\n\t\t\t\t\treturn f;\n\t\t\t\t}).filter(function(f) {\n\t\t\t\t\treturn f !== null;\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst arrows = element.selectAll(\".arrow\")\n\t\t\t\t.data(vectorData);\n\n\t\t\tconst arrowsEnter = arrows.enter()\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.attr(\"translation\", (d) => d.translation)\n\t\t\t\t.attr(\"rotation\", (d) => d.rotation)\n\t\t\t\t.attr(\"class\", \"arrow\")\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.attr(\"translation\", (d) => {\n\t\t\t\t\tlet offset = sizeScale(d.value) / 2;\n\t\t\t\t\treturn \"0 \" + offset + \" 0\";\n\t\t\t\t})\n\t\t\t\t.append(\"Group\");\n\n\t\t\tconst arrowHead = arrowsEnter.append(\"Shape\");\n\n\t\t\tarrowHead.append(\"Appearance\")\n\t\t\t\t.append(\"Material\")\n\t\t\t\t.attr(\"diffuseColor\", (d) => colorParse(colorScale(d.value)));\n\n\t\t\tarrowHead.append(\"Cylinder\")\n\t\t\t\t.attr(\"height\", (d) => sizeScale(d.value))\n\t\t\t\t.attr(\"radius\", 0.1);\n\n\t\t\tconst arrowShaft = arrowsEnter\n\t\t\t\t.append(\"Transform\")\n\t\t\t\t.attr(\"translation\", (d) => {\n\t\t\t\t\tlet offset = sizeScale(d.value) / 2;\n\t\t\t\t\treturn \"0 \" + offset + \" 0\";\n\t\t\t\t})\n\t\t\t\t.append(\"Shape\");\n\n\t\t\tarrowShaft.append(\"Appearance\")\n\t\t\t\t.append(\"Material\")\n\t\t\t\t.attr(\"diffuseColor\", (d) => colorParse(colorScale(d.value)));\n\n\t\t\tarrowShaft\n\t\t\t\t.append(\"Cone\")\n\t\t\t\t.attr(\"height\", 1)\n\t\t\t\t.attr(\"bottomRadius\", 0.4);\n\n\t\t\tarrowsEnter.merge(arrows);\n\n\t\t\tarrows.transition()\n\t\t\t\t.attr(\"translation\", (d) => d.translation);\n\n\t\t\tarrows.exit()\n\t\t\t\t.remove();\n\t\t});\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Size Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.sizeScale = function(_v) {\n\t\tif (!arguments.length) return sizeScale;\n\t\tsizeScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Size Range Getter / Setter\n\t *\n\t * @param {number[]} _v - Size min and max (e.g. [1, 9]).\n\t * @returns {*}\n\t */\n\tmy.sizeRange = function(_v) {\n\t\tif (!arguments.length) return sizeRange;\n\t\tsizeRange = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Vector Function Getter / Setter\n\t *\n\t * @param {function} _f - Vector Function.\n\t * @returns {*}\n\t */\n\tmy.vectorFunction = function(_f) {\n\t\tif (!arguments.length) return vectorFunction;\n\t\tvectorFunction = _f;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Dispatch On Getter\n\t *\n\t * @returns {*}\n\t */\n\tmy.on = function() {\n\t\tlet value = dispatch.on.apply(dispatch, arguments);\n\t\treturn value === dispatch ? my : value;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}