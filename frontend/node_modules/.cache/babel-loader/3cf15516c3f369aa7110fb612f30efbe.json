{"ast":null,"code":"import * as d3 from \"d3\";\n/**\n * List of Countries\n *\n * @type {Array}\n */\n\nexport const countries = [\"UK\", \"France\", \"Spain\", \"Germany\", \"Italy\", \"Portugal\"];\n/**\n * List of Fruit\n *\n * @type {Array}\n */\n\nexport const fruit = [\"Apples\", \"Oranges\", \"Pears\", \"Bananas\"];\n/**\n * Random Number Generator between 1 and 10\n *\n * @returns {number}\n */\n\nexport function randomNum() {\n  return Math.floor(Math.random() * 10) + 1;\n}\n/**\n * Random Dataset - Single Series\n *\n * @returns {Array}\n */\n\nexport function dataset1() {\n  return {\n    key: \"Fruit\",\n    values: fruit.map(function (d) {\n      return {\n        key: d,\n        value: randomNum(),\n        x: randomNum(),\n        y: randomNum(),\n        z: randomNum()\n      };\n    })\n  };\n}\n/**\n * Random Dataset - Multi Series\n *\n * @returns {Array}\n */\n\nexport function dataset2() {\n  return countries.map(function (d) {\n    return {\n      key: d,\n      values: fruit.map(function (d) {\n        return {\n          key: d,\n          value: randomNum(),\n          x: randomNum(),\n          y: randomNum(),\n          z: randomNum()\n        };\n      })\n    };\n  });\n}\n/**\n * Random Dataset - Single Series Scatter Plot\n *\n * @param {number} points - Number of data points.\n * @returns {Array}\n */\n\nexport function dataset3() {\n  let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n  return {\n    key: \"Bubbles\",\n    values: d3.range(points).map(function (d, i) {\n      return {\n        key: \"Point\" + i,\n        value: randomNum(),\n        x: randomNum(),\n        y: randomNum(),\n        z: randomNum()\n      };\n    })\n  };\n}\n/**\n * Convert Bubble/Particle Dataset Format\n *\n * @param {Array} data\n * @returns {Array}\n */\n\nexport function convert(data) {\n  return {\n    key: data.key,\n    values: data.values.map(function (d) {\n      return {\n        key: d.key,\n        values: [{\n          key: \"size\",\n          value: d.value\n        }, {\n          key: \"color\",\n          value: d.value\n        }, {\n          key: \"x\",\n          value: d.x\n        }, {\n          key: \"y\",\n          value: d.y\n        }, {\n          key: \"z\",\n          value: d.z\n        }]\n      };\n    })\n  };\n}\n/**\n * Random Dataset - Single Series Scatter Plot (with size and color values)\n *\n * @param {number} points - Number of data points.\n * @returns {Array}\n */\n\nexport function dataset6() {\n  let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n  return convert(dataset3(points));\n}\n/**\n * Random Dataset - Surface Plot 1\n *\n * @returns {Array}\n */\n\nexport function dataset4() {\n  return [{\n    key: \"a\",\n    values: [{\n      key: \"1\",\n      value: 4\n    }, {\n      key: \"2\",\n      value: 0\n    }, {\n      key: \"3\",\n      value: 2\n    }, {\n      key: \"4\",\n      value: 0\n    }, {\n      key: \"5\",\n      value: 0\n    }]\n  }, {\n    key: \"b\",\n    values: [{\n      key: \"1\",\n      value: 4\n    }, {\n      key: \"2\",\n      value: 0\n    }, {\n      key: \"3\",\n      value: 2\n    }, {\n      key: \"4\",\n      value: 0\n    }, {\n      key: \"5\",\n      value: 0\n    }]\n  }, {\n    key: \"c\",\n    values: [{\n      key: \"1\",\n      value: 1\n    }, {\n      key: \"2\",\n      value: 0\n    }, {\n      key: \"3\",\n      value: 1\n    }, {\n      key: \"4\",\n      value: 0\n    }, {\n      key: \"5\",\n      value: 0\n    }]\n  }, {\n    key: \"d\",\n    values: [{\n      key: \"1\",\n      value: 4\n    }, {\n      key: \"2\",\n      value: 0\n    }, {\n      key: \"3\",\n      value: 2\n    }, {\n      key: \"4\",\n      value: 0\n    }, {\n      key: \"5\",\n      value: 0\n    }]\n  }, {\n    key: \"e\",\n    values: [{\n      key: \"1\",\n      value: 1\n    }, {\n      key: \"2\",\n      value: 1\n    }, {\n      key: \"3\",\n      value: 1\n    }, {\n      key: \"4\",\n      value: 1\n    }, {\n      key: \"5\",\n      value: 1\n    }]\n  }];\n}\n/**\n * Random Dataset - Surface Plot 2\n *\n * @returns {Array}\n */\n\nexport function dataset5() {\n  let cx = 0.8;\n  let cy = 0.3;\n\n  let f = function (vx, vz) {\n    return ((vx - cx) * (vx - cx) + (vz - cy) * (vx - cx)) * Math.random();\n  };\n\n  let xRange = d3.range(0, 1.05, 0.1);\n  let zRange = d3.range(0, 1.05, 0.1);\n  let nx = xRange.length;\n  let nz = zRange.length;\n  return d3.range(nx).map(function (i) {\n    let values = d3.range(nz).map(function (j) {\n      return {\n        key: j,\n        value: f(xRange[i], zRange[j])\n      };\n    });\n    return {\n      key: i,\n      values: values\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/randomData.js"],"names":["d3","countries","fruit","randomNum","Math","floor","random","dataset1","key","values","map","d","value","x","y","z","dataset2","dataset3","points","range","i","convert","data","dataset6","dataset4","dataset5","cx","cy","f","vx","vz","xRange","zRange","nx","length","nz","j"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\n/**\n * List of Countries\n *\n * @type {Array}\n */\nexport const countries = [\"UK\", \"France\", \"Spain\", \"Germany\", \"Italy\", \"Portugal\"];\n\n/**\n * List of Fruit\n *\n * @type {Array}\n */\nexport const fruit = [\"Apples\", \"Oranges\", \"Pears\", \"Bananas\"];\n\n/**\n * Random Number Generator between 1 and 10\n *\n * @returns {number}\n */\nexport function randomNum() {\n\treturn Math.floor(Math.random() * 10) + 1;\n}\n\n/**\n * Random Dataset - Single Series\n *\n * @returns {Array}\n */\nexport function dataset1() {\n\treturn {\n\t\tkey: \"Fruit\",\n\t\tvalues: fruit.map(function(d) {\n\t\t\treturn {\n\t\t\t\tkey: d,\n\t\t\t\tvalue: randomNum(),\n\t\t\t\tx: randomNum(),\n\t\t\t\ty: randomNum(),\n\t\t\t\tz: randomNum()\n\t\t\t};\n\t\t})\n\t};\n}\n\n/**\n * Random Dataset - Multi Series\n *\n * @returns {Array}\n */\nexport function dataset2() {\n\treturn countries.map(function(d) {\n\t\treturn {\n\t\t\tkey: d,\n\t\t\tvalues: fruit.map(function(d) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: d,\n\t\t\t\t\tvalue: randomNum(),\n\t\t\t\t\tx: randomNum(),\n\t\t\t\t\ty: randomNum(),\n\t\t\t\t\tz: randomNum()\n\t\t\t\t};\n\t\t\t})\n\t\t}\n\t});\n}\n\n/**\n * Random Dataset - Single Series Scatter Plot\n *\n * @param {number} points - Number of data points.\n * @returns {Array}\n */\nexport function dataset3(points = 10) {\n\treturn {\n\t\tkey: \"Bubbles\",\n\t\tvalues: d3.range(points).map(function(d, i) {\n\t\t\treturn {\n\t\t\t\tkey: \"Point\" + i,\n\t\t\t\tvalue: randomNum(),\n\t\t\t\tx: randomNum(),\n\t\t\t\ty: randomNum(),\n\t\t\t\tz: randomNum()\n\t\t\t};\n\t\t})\n\t};\n}\n\n/**\n * Convert Bubble/Particle Dataset Format\n *\n * @param {Array} data\n * @returns {Array}\n */\nexport function convert(data) {\n\treturn {\n\t\tkey: data.key,\n\t\tvalues: data.values.map(function(d) {\n\t\t\treturn {\n\t\t\t\tkey: d.key,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ key: \"size\", value: d.value },\n\t\t\t\t\t{ key: \"color\", value: d.value },\n\t\t\t\t\t{ key: \"x\", value: d.x },\n\t\t\t\t\t{ key: \"y\", value: d.y },\n\t\t\t\t\t{ key: \"z\", value: d.z }\n\t\t\t\t]\n\t\t\t};\n\t\t})\n\t};\n}\n\n/**\n * Random Dataset - Single Series Scatter Plot (with size and color values)\n *\n * @param {number} points - Number of data points.\n * @returns {Array}\n */\nexport function dataset6(points = 10) {\n\treturn convert(dataset3(points));\n}\n\n/**\n * Random Dataset - Surface Plot 1\n *\n * @returns {Array}\n */\nexport function dataset4() {\n\treturn [\n\t\t{\n\t\t\tkey: \"a\",\n\t\t\tvalues: [\n\t\t\t\t{ key: \"1\", value: 4 },\n\t\t\t\t{ key: \"2\", value: 0 },\n\t\t\t\t{ key: \"3\", value: 2 },\n\t\t\t\t{ key: \"4\", value: 0 },\n\t\t\t\t{ key: \"5\", value: 0 }\n\t\t\t]\n\t\t}, {\n\t\t\tkey: \"b\",\n\t\t\tvalues: [\n\t\t\t\t{ key: \"1\", value: 4 },\n\t\t\t\t{ key: \"2\", value: 0 },\n\t\t\t\t{ key: \"3\", value: 2 },\n\t\t\t\t{ key: \"4\", value: 0 },\n\t\t\t\t{ key: \"5\", value: 0 }\n\t\t\t]\n\t\t}, {\n\t\t\tkey: \"c\",\n\t\t\tvalues: [\n\t\t\t\t{ key: \"1\", value: 1 },\n\t\t\t\t{ key: \"2\", value: 0 },\n\t\t\t\t{ key: \"3\", value: 1 },\n\t\t\t\t{ key: \"4\", value: 0 },\n\t\t\t\t{ key: \"5\", value: 0 }\n\t\t\t]\n\t\t}, {\n\t\t\tkey: \"d\",\n\t\t\tvalues: [\n\t\t\t\t{ key: \"1\", value: 4 },\n\t\t\t\t{ key: \"2\", value: 0 },\n\t\t\t\t{ key: \"3\", value: 2 },\n\t\t\t\t{ key: \"4\", value: 0 },\n\t\t\t\t{ key: \"5\", value: 0 }\n\t\t\t]\n\t\t}, {\n\t\t\tkey: \"e\",\n\t\t\tvalues: [\n\t\t\t\t{ key: \"1\", value: 1 },\n\t\t\t\t{ key: \"2\", value: 1 },\n\t\t\t\t{ key: \"3\", value: 1 },\n\t\t\t\t{ key: \"4\", value: 1 },\n\t\t\t\t{ key: \"5\", value: 1 }\n\t\t\t]\n\t\t}\n\t];\n}\n\n/**\n * Random Dataset - Surface Plot 2\n *\n * @returns {Array}\n */\nexport function dataset5() {\n\tlet cx = 0.8;\n\tlet cy = 0.3;\n\tlet f = function(vx, vz) {\n\t\treturn ((vx - cx) * (vx - cx) + (vz - cy) * (vx - cx)) * Math.random();\n\t};\n\n\tlet xRange = d3.range(0, 1.05, 0.1);\n\tlet zRange = d3.range(0, 1.05, 0.1);\n\tlet nx = xRange.length;\n\tlet nz = zRange.length;\n\n\treturn d3.range(nx).map(function(i) {\n\t\tlet values = d3.range(nz).map(\n\t\t\tfunction(j) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: j,\n\t\t\t\t\tvalue: f(xRange[i], zRange[j])\n\t\t\t\t};\n\t\t\t});\n\n\t\treturn {\n\t\t\tkey: i,\n\t\t\tvalues: values\n\t\t};\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}