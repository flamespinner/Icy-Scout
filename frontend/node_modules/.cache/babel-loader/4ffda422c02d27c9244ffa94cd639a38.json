{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Crosshair Plot (Experimental) Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.crosshairPlot();\n *\n * chartHolder.datum(myData).call(myChart);\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let classed = \"d3X3dCrosshairPlot\";\n  let debug = false;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.axisThreePlane();\n  const crosshair = component.crosshair();\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n  const init = function (data) {\n    const {\n      coordinatesMax\n    } = dataTransform(data).summary();\n    const {\n      x: maxX,\n      y: maxY,\n      z: maxZ\n    } = coordinatesMax;\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    xScale = d3.scaleLinear().domain([0, maxX]).range([0, dimensionX]);\n    yScale = d3.scaleLinear().domain([0, maxY]).range([0, dimensionY]);\n    zScale = d3.scaleLinear().domain([0, maxZ]).range([0, dimensionZ]);\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias crosshairPlot\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"crosshairs\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.xScale(xScale).yScale(yScale).zScale(zScale).dimensions(dimensions);\n      scene.select(\".axis\").call(axis); // Add Crosshair\n\n      crosshair.xScale(xScale).yScale(yScale).zScale(zScale);\n      let crosshairs = scene.select(\".crosshairs\").datum(data).selectAll(\".crosshair\").data(d => d.values);\n      crosshairs.enter().append(\"group\").classed(\"crosshair\", true).merge(crosshairs).transition().each(function () {\n        d3.select(this).call(crosshair);\n      });\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/crosshairPlot.js"],"names":["d3","dataTransform","component","createScene","width","height","dimensions","x","y","z","classed","debug","xScale","yScale","zScale","viewpoint","axis","axisThreePlane","crosshair","init","data","coordinatesMax","summary","maxX","maxY","maxZ","dimensionX","dimensionY","dimensionZ","scaleLinear","domain","range","my","selection","layers","scene","each","centerOfRotation","call","select","crosshairs","datum","selectAll","d","values","enter","append","merge","transition","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Crosshair Plot (Experimental) Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.crosshairPlot();\n *\n * chartHolder.datum(myData).call(myChart);\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet classed = \"d3X3dCrosshairPlot\";\n\tlet debug = false;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst axis = component.axisThreePlane();\n\tconst crosshair = component.crosshair();\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { coordinatesMax } = dataTransform(data).summary();\n\t\tconst { x: maxX, y: maxY, z: maxZ } = coordinatesMax;\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\txScale = d3.scaleLinear()\n\t\t\t.domain([0, maxX])\n\t\t\t.range([0, dimensionX]);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain([0, maxY])\n\t\t\t.range([0, dimensionY]);\n\n\t\tzScale = d3.scaleLinear()\n\t\t\t.domain([0, maxZ])\n\t\t\t.range([0, dimensionZ]);\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias crosshairPlot\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"axis\", \"crosshairs\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\t\t\tinit(data);\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\taxis.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale)\n\t\t\t\t.dimensions(dimensions);\n\n\t\t\tscene.select(\".axis\")\n\t\t\t\t.call(axis);\n\n\t\t\t// Add Crosshair\n\t\t\tcrosshair.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale);\n\n\t\t\tlet crosshairs = scene.select(\".crosshairs\")\n\t\t\t\t.datum(data)\n\t\t\t\t.selectAll(\".crosshair\")\n\t\t\t\t.data((d) => d.values);\n\n\t\t\tcrosshairs.enter()\n\t\t\t\t.append(\"group\")\n\t\t\t\t.classed(\"crosshair\", true)\n\t\t\t\t.merge(crosshairs)\n\t\t\t\t.transition()\n\t\t\t\t.each(function() {\n\t\t\t\t\td3.select(this).call(crosshair);\n\t\t\t\t});\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}