{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport * as glMatrix from \"gl-matrix\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Vector Field Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let vectorFunction = (x, y, z, value) => {\n *    return {\n *       vx: Math.pow(x, 2) + y * Math.pow(x, 2),\n *       vy: Math.pow(y, 2) - x * Math.pow(z, 2),\n *       vz: Math.pow(z, 2)\n *    };\n * };\n *\n * let myChart = d3.x3d.chart.vectorFieldChart()\n *    .vectorFunction(vectorFunction);\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://mathinsight.org/vector_field_overview\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = d3.schemeRdYlGn[8];\n  let classed = \"d3X3dVectorFieldChart\";\n  let debug = false;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  let sizeScale;\n  let sizeRange = [2.0, 5.0];\n  let origin = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.crosshair();\n  const vectorFields = component.vectorFields();\n  /**\n   * Vector Field Function\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   * @param {number} value\n   * @returns {{vx: number, vy: number, vz: number}}\n   */\n\n  let vectorFunction = function (x, y, z) {\n    let value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    return {\n      vx: x,\n      vy: y,\n      vz: z\n    };\n  };\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n\n  const init = function (data) {\n    const {\n      coordinatesMax,\n      coordinatesMin\n    } = dataTransform(data).summary();\n    const {\n      x: minX,\n      y: minY,\n      z: minZ\n    } = coordinatesMin;\n    const {\n      x: maxX,\n      y: maxY,\n      z: maxZ\n    } = coordinatesMax;\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    const extent = d3.extent(data.values.map(f => {\n      let vx, vy, vz;\n\n      if (\"vx\" in f) {\n        ({\n          vx,\n          vy,\n          vz\n        } = f);\n      } else {\n        ({\n          vx,\n          vy,\n          vz\n        } = vectorFunction(f.x, f.y, f.z, f.value));\n      }\n\n      let vector = glMatrix.vec3.fromValues(vx, vy, vz);\n      return glMatrix.vec3.length(vector);\n    }));\n    xScale = d3.scaleLinear().domain([minX, maxX]).range([0, dimensionX]);\n    yScale = d3.scaleLinear().domain([minY, maxY]).range([0, dimensionY]);\n    zScale = d3.scaleLinear().domain([minZ, maxZ]).range([0, dimensionZ]);\n    sizeScale = d3.scaleLinear().domain(extent).range(sizeRange);\n    colorScale = d3.scaleQuantize().domain(extent).range(colors); // TODO: Have a think about whether this is appropriate?\n    // Or, do we always want the origin to be 0,0,0 ?\n\n    origin = {\n      x: minX < 0 ? 0 : minX,\n      y: minY < 0 ? 0 : minY,\n      z: minZ < 0 ? 0 : minZ\n    };\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias vectorFieldChart\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"vectorFields\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.xScale(xScale).yScale(yScale).zScale(zScale).dimensions(dimensions);\n      scene.select(\".axis\").datum(origin).call(axis); // Add Vector Fields\n\n      vectorFields.xScale(xScale).yScale(yScale).zScale(zScale).colorScale(colorScale).sizeScale(sizeScale).vectorFunction(vectorFunction);\n      scene.select(\".vectorFields\").datum(data).call(vectorFields);\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Size Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.sizeScale = function (_v) {\n    if (!arguments.length) return sizeScale;\n    sizeScale = _v;\n    return my;\n  };\n  /**\n   * Size Range Getter / Setter\n   *\n   * @param {number[]} _v - Size min and max (e.g. [0.5, 3.0]).\n   * @returns {*}\n   */\n\n\n  my.sizeRange = function (_v) {\n    if (!arguments.length) return sizeRange;\n    sizeRange = _v;\n    return my;\n  };\n  /**\n   * Vector Function Getter / Setter\n   *\n   * @param {function} _f - Vector Function.\n   * @returns {*}\n   */\n\n\n  my.vectorFunction = function (_f) {\n    if (!arguments.length) return vectorFunction;\n    vectorFunction = _f;\n    return my;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/vectorFieldChart.js"],"names":["d3","dataTransform","component","glMatrix","createScene","width","height","dimensions","x","y","z","colors","schemeRdYlGn","classed","debug","xScale","yScale","zScale","colorScale","sizeScale","sizeRange","origin","viewpoint","axis","crosshair","vectorFields","vectorFunction","value","vx","vy","vz","init","data","coordinatesMax","coordinatesMin","summary","minX","minY","minZ","maxX","maxY","maxZ","dimensionX","dimensionY","dimensionZ","extent","values","map","f","vector","vec3","fromValues","length","scaleLinear","domain","range","scaleQuantize","my","selection","layers","scene","each","centerOfRotation","call","select","datum","_v","arguments","_f"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport * as glMatrix from \"gl-matrix\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Vector Field Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let vectorFunction = (x, y, z, value) => {\n *    return {\n *       vx: Math.pow(x, 2) + y * Math.pow(x, 2),\n *       vy: Math.pow(y, 2) - x * Math.pow(z, 2),\n *       vz: Math.pow(z, 2)\n *    };\n * };\n *\n * let myChart = d3.x3d.chart.vectorFieldChart()\n *    .vectorFunction(vectorFunction);\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://mathinsight.org/vector_field_overview\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = d3.schemeRdYlGn[8];\n\tlet classed = \"d3X3dVectorFieldChart\";\n\tlet debug = false;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\tlet sizeScale;\n\tlet sizeRange = [2.0, 5.0];\n\tlet origin = { x: 0, y: 0, z: 0 };\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst axis = component.crosshair();\n\tconst vectorFields = component.vectorFields();\n\n\t/**\n\t * Vector Field Function\n\t *\n\t * @param {number} x\n\t * @param {number} y\n\t * @param {number} z\n\t * @param {number} value\n\t * @returns {{vx: number, vy: number, vz: number}}\n\t */\n\tlet vectorFunction = function(x, y, z, value = null) {\n\t\treturn {\n\t\t\tvx: x,\n\t\t\tvy: y,\n\t\t\tvz: z\n\t\t};\n\t};\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { coordinatesMax, coordinatesMin } = dataTransform(data).summary();\n\t\tconst { x: minX, y: minY, z: minZ } = coordinatesMin;\n\t\tconst { x: maxX, y: maxY, z: maxZ } = coordinatesMax;\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\tconst extent = d3.extent(data.values.map((f) => {\n\t\t\tlet vx, vy, vz;\n\t\t\tif (\"vx\" in f) {\n\t\t\t\t({ vx, vy, vz } = f);\n\t\t\t} else {\n\t\t\t\t({ vx, vy, vz } = vectorFunction(f.x, f.y, f.z, f.value));\n\t\t\t}\n\n\t\t\tlet vector = glMatrix.vec3.fromValues(vx, vy, vz);\n\t\t\treturn glMatrix.vec3.length(vector);\n\t\t}));\n\n\t\txScale = d3.scaleLinear()\n\t\t\t.domain([minX, maxX])\n\t\t\t.range([0, dimensionX]);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain([minY, maxY])\n\t\t\t.range([0, dimensionY]);\n\n\t\tzScale = d3.scaleLinear()\n\t\t\t.domain([minZ, maxZ])\n\t\t\t.range([0, dimensionZ]);\n\n\t\tsizeScale = d3.scaleLinear()\n\t\t\t.domain(extent)\n\t\t\t.range(sizeRange);\n\n\t\tcolorScale = d3.scaleQuantize()\n\t\t\t.domain(extent)\n\t\t\t.range(colors);\n\n\t\t// TODO: Have a think about whether this is appropriate?\n\t\t// Or, do we always want the origin to be 0,0,0 ?\n\t\torigin = {\n\t\t\tx: (minX < 0) ? 0 : minX,\n\t\t\ty: (minY < 0) ? 0 : minY,\n\t\t\tz: (minZ < 0) ? 0 : minZ\n\t\t};\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias vectorFieldChart\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"axis\", \"vectorFields\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\t\t\tinit(data);\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]);\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\taxis.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale)\n\t\t\t\t.dimensions(dimensions);\n\n\t\t\tscene.select(\".axis\")\n\t\t\t\t.datum(origin)\n\t\t\t\t.call(axis);\n\n\t\t\t// Add Vector Fields\n\t\t\tvectorFields.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale)\n\t\t\t\t.colorScale(colorScale)\n\t\t\t\t.sizeScale(sizeScale)\n\t\t\t\t.vectorFunction(vectorFunction);\n\n\t\t\tscene.select(\".vectorFields\")\n\t\t\t\t.datum(data)\n\t\t\t\t.call(vectorFields);\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Size Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.sizeScale = function(_v) {\n\t\tif (!arguments.length) return sizeScale;\n\t\tsizeScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Size Range Getter / Setter\n\t *\n\t * @param {number[]} _v - Size min and max (e.g. [0.5, 3.0]).\n\t * @returns {*}\n\t */\n\tmy.sizeRange = function(_v) {\n\t\tif (!arguments.length) return sizeRange;\n\t\tsizeRange = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Vector Function Getter / Setter\n\t *\n\t * @param {function} _f - Vector Function.\n\t * @returns {*}\n\t */\n\tmy.vectorFunction = function(_f) {\n\t\tif (!arguments.length) return vectorFunction;\n\t\tvectorFunction = _f;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}