{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport componentBars from \"./bars\";\n/**\r\n * Reusable 3D Multi Series Bar Chart Component\r\n *\r\n * @module\r\n */\n\nexport default function () {\n  /* Default Properties */\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\n  let classed = \"d3X3dBarsMultiSeries\";\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  /* Components */\n\n  const bars = componentBars();\n  /**\r\n   * Initialise Data and Scales\r\n   *\r\n   * @private\r\n   * @param {Array} data - Chart data.\r\n   */\n\n  const init = function (data) {\n    const {\n      rowKeys,\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    xScale = d3.scaleBand().domain(columnKeys).rangeRound([0, dimensionX]).padding(0.5);\n    yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]).nice();\n    zScale = d3.scaleBand().domain(rowKeys).range([0, dimensionZ]).padding(0.7);\n    colorScale = d3.scaleOrdinal().domain(columnKeys).range(colors);\n  };\n  /**\r\n   * Constructor\r\n   *\r\n   * @constructor\r\n   * @alias barsMultiSeries\r\n   * @param {d3.selection} selection - The chart holder D3 selection.\r\n   */\n\n\n  const my = function (selection) {\n    selection.each(function (data) {\n      init(data);\n      const element = d3.select(this).classed(classed, true);\n      bars.xScale(xScale).yScale(yScale).dimensions({\n        x: dimensions.x,\n        y: dimensions.y,\n        z: zScale.bandwidth()\n      }).colors(colors);\n\n      const addBars = function () {\n        d3.select(this).call(bars);\n      };\n\n      const barGroup = element.selectAll(\".barGroup\").data(d => d, d => d.key);\n      barGroup.enter().append(\"Transform\").classed(\"barGroup\", true).merge(barGroup).transition().attr(\"translation\", d => {\n        const x = 0;\n        const y = 0;\n        const z = zScale(d.key);\n        return x + \" \" + y + \" \" + z;\n      }).each(addBars);\n      barGroup.exit().remove();\n    });\n  };\n  /**\r\n   * Dimensions Getter / Setter\r\n   *\r\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n   * @returns {*}\r\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\r\n   * X Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\r\n   * Y Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\r\n   * Z Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\r\n   * Color Scale Getter / Setter\r\n   *\r\n   * @param {d3.scale} _v - D3 color scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\r\n   * Colors Getter / Setter\r\n   *\r\n   * @param {Array} _v - Array of colours used by color scale.\r\n   * @returns {*}\r\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/src/components/barsMultiSeries.js"],"names":["d3","dataTransform","componentBars","dimensions","x","y","z","colors","classed","xScale","yScale","zScale","colorScale","bars","init","data","rowKeys","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","dimensionZ","scaleBand","domain","rangeRound","padding","scaleLinear","range","nice","scaleOrdinal","my","selection","each","element","select","bandwidth","addBars","call","barGroup","selectAll","d","key","enter","append","merge","transition","attr","exit","remove","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\r\nimport dataTransform from \"../dataTransform\";\r\nimport componentBars from \"./bars\";\r\n\r\n/**\r\n * Reusable 3D Multi Series Bar Chart Component\r\n *\r\n * @module\r\n */\r\nexport default function() {\r\n\r\n\t/* Default Properties */\r\n\tlet dimensions = { x: 40, y: 40, z: 40 };\r\n\tlet colors = [\"orange\", \"red\", \"yellow\", \"steelblue\", \"green\"];\r\n\tlet classed = \"d3X3dBarsMultiSeries\";\r\n\r\n\t/* Scales */\r\n\tlet xScale;\r\n\tlet yScale;\r\n\tlet zScale;\r\n\tlet colorScale;\r\n\r\n\t/* Components */\r\n\tconst bars = componentBars();\r\n\r\n\t/**\r\n\t * Initialise Data and Scales\r\n\t *\r\n\t * @private\r\n\t * @param {Array} data - Chart data.\r\n\t */\r\n\tconst init = function(data) {\r\n\t\tconst { rowKeys, columnKeys, valueMax } = dataTransform(data).summary();\r\n\t\tconst valueExtent = [0, valueMax];\r\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\r\n\r\n\t\txScale = d3.scaleBand()\r\n\t\t\t.domain(columnKeys)\r\n\t\t\t.rangeRound([0, dimensionX])\r\n\t\t\t.padding(0.5);\r\n\r\n\t\tyScale = d3.scaleLinear()\r\n\t\t\t.domain(valueExtent)\r\n\t\t\t.range([0, dimensionY])\r\n\t\t\t.nice();\r\n\r\n\t\tzScale = d3.scaleBand()\r\n\t\t\t.domain(rowKeys)\r\n\t\t\t.range([0, dimensionZ])\r\n\t\t\t.padding(0.7);\r\n\r\n\t\tcolorScale = d3.scaleOrdinal()\r\n\t\t\t.domain(columnKeys)\r\n\t\t\t.range(colors);\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @constructor\r\n\t * @alias barsMultiSeries\r\n\t * @param {d3.selection} selection - The chart holder D3 selection.\r\n\t */\r\n\tconst my = function(selection) {\r\n\t\tselection.each(function(data) {\r\n\t\t\tinit(data);\r\n\r\n\t\t\tconst element = d3.select(this)\r\n\t\t\t\t.classed(classed, true);\r\n\r\n\t\t\tbars.xScale(xScale)\r\n\t\t\t\t.yScale(yScale)\r\n\t\t\t\t.dimensions({\r\n\t\t\t\t\tx: dimensions.x,\r\n\t\t\t\t\ty: dimensions.y,\r\n\t\t\t\t\tz: zScale.bandwidth()\r\n\t\t\t\t})\r\n\t\t\t\t.colors(colors);\r\n\r\n\t\t\tconst addBars = function() {\r\n\t\t\t\td3.select(this).call(bars);\r\n\t\t\t};\r\n\r\n\t\t\tconst barGroup = element.selectAll(\".barGroup\")\r\n\t\t\t\t.data((d) => d, (d) => d.key);\r\n\r\n\t\t\tbarGroup.enter()\r\n\t\t\t\t.append(\"Transform\")\r\n\t\t\t\t.classed(\"barGroup\", true)\r\n\t\t\t\t.merge(barGroup)\r\n\t\t\t\t.transition()\r\n\t\t\t\t.attr(\"translation\", (d) => {\r\n\t\t\t\t\tconst x = 0;\r\n\t\t\t\t\tconst y = 0;\r\n\t\t\t\t\tconst z = zScale(d.key);\r\n\t\t\t\t\treturn x + \" \" + y + \" \" + z;\r\n\t\t\t\t})\r\n\t\t\t\t.each(addBars);\r\n\r\n\t\t\tbarGroup.exit()\r\n\t\t\t\t.remove();\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Dimensions Getter / Setter\r\n\t *\r\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.dimensions = function(_v) {\r\n\t\tif (!arguments.length) return dimensions;\r\n\t\tdimensions = _v;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * X Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.xScale = function(_v) {\r\n\t\tif (!arguments.length) return xScale;\r\n\t\txScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Y Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.yScale = function(_v) {\r\n\t\tif (!arguments.length) return yScale;\r\n\t\tyScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Z Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.zScale = function(_v) {\r\n\t\tif (!arguments.length) return zScale;\r\n\t\tzScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Color Scale Getter / Setter\r\n\t *\r\n\t * @param {d3.scale} _v - D3 color scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colorScale = function(_v) {\r\n\t\tif (!arguments.length) return colorScale;\r\n\t\tcolorScale = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\t/**\r\n\t * Colors Getter / Setter\r\n\t *\r\n\t * @param {Array} _v - Array of colours used by color scale.\r\n\t * @returns {*}\r\n\t */\r\n\tmy.colors = function(_v) {\r\n\t\tif (!arguments.length) return colors;\r\n\t\tcolors = _v;\r\n\t\treturn my;\r\n\t};\r\n\r\n\treturn my;\r\n}"]},"metadata":{},"sourceType":"module"}