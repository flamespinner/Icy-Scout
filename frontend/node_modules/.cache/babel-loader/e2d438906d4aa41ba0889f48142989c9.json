{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Multi Series Ribbon Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.ribbonChartMultiSeries();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/waterfall-plot/\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 60,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\n  let classed = \"d3X3dRibbonChartMultiSeries\";\n  let debug = false;\n  let smoothed = d3.curveBasis;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let zScale;\n  let colorScale;\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const axis = component.axisThreePlane();\n  const ribbons = component.ribbonMultiSeries();\n  const light = component.light();\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n  const init = function (data) {\n    const {\n      rowKeys,\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY,\n      z: dimensionZ\n    } = dimensions;\n    xScale = d3.scalePoint().domain(columnKeys).range([0, dimensionX]);\n    yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]).nice();\n    zScale = d3.scaleBand().domain(rowKeys).range([0, dimensionZ]).padding(0.4);\n    colorScale = d3.scaleOrdinal().domain(columnKeys).range(colors);\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias ribbonChartMultiSeries\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"axis\", \"ribbons\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2]).viewOrientation([-0.61021, 0.77568, 0.16115, 0.65629]).viewPosition([77.63865, 54.69470, 104.38314]);\n      scene.call(viewpoint); // Add Axis\n\n      axis.xScale(xScale).yScale(yScale).zScale(zScale);\n      scene.select(\".axis\").call(axis); // Add Ribbons\n\n      ribbons.xScale(xScale).yScale(yScale).zScale(zScale).colors(colors).smoothed(smoothed).dimensions(dimensions);\n      scene.select(\".ribbons\").datum(data).call(ribbons); // Add Light\n\n      scene.call(light);\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Z Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.zScale = function (_v) {\n    if (!arguments.length) return zScale;\n    zScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Smooth Interpolation Getter / Setter\n   *\n   * Options:\n   *   d3.curveBasis\n   *   d3.curveLinear\n   *   d3.curveMonotoneX\n   *\n   * @param {d3.curve} _v.\n   * @returns {*}\n   */\n\n\n  my.smoothed = function (_v) {\n    if (!arguments.length) return smoothed;\n    smoothed = _v;\n    return my;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/ribbonChartMultiSeries.js"],"names":["d3","dataTransform","component","createScene","width","height","dimensions","x","y","z","colors","classed","debug","smoothed","curveBasis","xScale","yScale","zScale","colorScale","viewpoint","axis","axisThreePlane","ribbons","ribbonMultiSeries","light","init","data","rowKeys","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","dimensionZ","scalePoint","domain","range","scaleLinear","nice","scaleBand","padding","scaleOrdinal","my","selection","layers","scene","each","centerOfRotation","viewOrientation","viewPosition","call","select","datum","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Multi Series Ribbon Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.ribbonChartMultiSeries();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/waterfall-plot/\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 60, y: 40, z: 40 };\n\tlet colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\n\tlet classed = \"d3X3dRibbonChartMultiSeries\";\n\tlet debug = false;\n\tlet smoothed = d3.curveBasis;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet zScale;\n\tlet colorScale;\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst axis = component.axisThreePlane();\n\tconst ribbons = component.ribbonMultiSeries();\n\tconst light = component.light();\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { rowKeys, columnKeys, valueMax } = dataTransform(data).summary();\n\t\tconst valueExtent = [0, valueMax];\n\t\tconst { x: dimensionX, y: dimensionY, z: dimensionZ } = dimensions;\n\n\t\txScale = d3.scalePoint()\n\t\t\t.domain(columnKeys)\n\t\t\t.range([0, dimensionX]);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain(valueExtent)\n\t\t\t.range([0, dimensionY])\n\t\t\t.nice();\n\n\t\tzScale = d3.scaleBand()\n\t\t\t.domain(rowKeys)\n\t\t\t.range([0, dimensionZ])\n\t\t\t.padding(0.4);\n\n\t\tcolorScale = d3.scaleOrdinal()\n\t\t\t.domain(columnKeys)\n\t\t\t.range(colors);\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias ribbonChartMultiSeries\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"axis\", \"ribbons\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\t\t\tinit(data);\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.centerOfRotation([dimensions.x / 2, dimensions.y / 2, dimensions.z / 2])\n\t\t\t\t.viewOrientation([-0.61021, 0.77568, 0.16115, 0.65629])\n\t\t\t\t.viewPosition([77.63865, 54.69470, 104.38314]);\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\taxis.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale);\n\n\t\t\tscene.select(\".axis\")\n\t\t\t\t.call(axis);\n\n\t\t\t// Add Ribbons\n\t\t\tribbons.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.zScale(zScale)\n\t\t\t\t.colors(colors)\n\t\t\t\t.smoothed(smoothed)\n\t\t\t\t.dimensions(dimensions);\n\n\t\t\tscene.select(\".ribbons\")\n\t\t\t\t.datum(data)\n\t\t\t\t.call(ribbons);\n\n\t\t\t// Add Light\n\t\t\tscene.call(light);\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Z Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.zScale = function(_v) {\n\t\tif (!arguments.length) return zScale;\n\t\tzScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Smooth Interpolation Getter / Setter\n\t *\n\t * Options:\n\t *   d3.curveBasis\n\t *   d3.curveLinear\n\t *   d3.curveMonotoneX\n\t *\n\t * @param {d3.curve} _v.\n\t * @returns {*}\n\t */\n\tmy.smoothed = function(_v) {\n\t\tif (!arguments.length) return smoothed;\n\t\tsmoothed = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}