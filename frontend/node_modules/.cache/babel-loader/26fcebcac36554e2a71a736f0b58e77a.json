{"ast":null,"code":"import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n/**\n * Reusable 3D Vertical Bar Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.barChartVertical();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/3d-bar-chart/\n */\n\nexport default function () {\n  /* Default Properties */\n  let width = 500;\n  let height = 500;\n  let dimensions = {\n    x: 40,\n    y: 40,\n    z: 40\n  };\n  let colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\n  let classed = \"d3X3dBarChartVertical\";\n  let debug = false;\n  /* Scales */\n\n  let xScale;\n  let yScale;\n  let colorScale;\n  /* Components */\n\n  const viewpoint = component.viewpoint();\n  const xAxis = component.axis();\n  const yAxis = component.axis();\n  const bars = component.bars();\n  const light = component.light();\n  /**\n   * Initialise Data and Scales\n   *\n   * @private\n   * @param {Array} data - Chart data.\n   */\n\n  const init = function (data) {\n    const {\n      columnKeys,\n      valueMax\n    } = dataTransform(data).summary();\n    const valueExtent = [0, valueMax];\n    const {\n      x: dimensionX,\n      y: dimensionY\n    } = dimensions;\n    xScale = d3.scaleBand().domain(columnKeys).range([0, dimensionX]).padding(0.5).align(0.75);\n    yScale = d3.scaleLinear().domain(valueExtent).range([0, dimensionY]).nice();\n    colorScale = d3.scaleOrdinal().domain(columnKeys).range(colors);\n  };\n  /**\n   * Constructor\n   *\n   * @constructor\n   * @alias barChartVertical\n   * @param {d3.selection} selection - The chart holder D3 selection.\n   */\n\n\n  const my = function (selection) {\n    const layers = [\"xAxis\", \"yAxis\", \"bars\"];\n    const scene = createScene(selection, layers, classed, width, height, debug);\n    selection.each(data => {\n      init(data); // Add Viewpoint\n\n      viewpoint.quickView(\"left\");\n      scene.call(viewpoint); // Add Axis\n\n      xAxis.scale(xScale).direction(\"x\").tickDirection(\"y\").tickSize(0);\n      yAxis.scale(yScale).direction(\"y\").tickDirection(\"x\").tickSize(yScale.range()[1] - yScale.range()[0]);\n      scene.select(\".xAxis\").call(xAxis);\n      scene.select(\".yAxis\").call(yAxis); // Add Bars\n\n      bars.xScale(xScale).yScale(yScale).colors(colors);\n      scene.select(\".bars\").datum(data).call(bars); // Add Light\n\n      scene.call(light);\n    });\n  };\n  /**\n   * Width Getter / Setter\n   *\n   * @param {number} _v - X3D canvas width in px.\n   * @returns {*}\n   */\n\n\n  my.width = function (_v) {\n    if (!arguments.length) return width;\n    width = _v;\n    return this;\n  };\n  /**\n   * Height Getter / Setter\n   *\n   * @param {number} _v - X3D canvas height in px.\n   * @returns {*}\n   */\n\n\n  my.height = function (_v) {\n    if (!arguments.length) return height;\n    height = _v;\n    return this;\n  };\n  /**\n   * Dimensions Getter / Setter\n   *\n   * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n   * @returns {*}\n   */\n\n\n  my.dimensions = function (_v) {\n    if (!arguments.length) return dimensions;\n    dimensions = _v;\n    return this;\n  };\n  /**\n   * X Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.xScale = function (_v) {\n    if (!arguments.length) return xScale;\n    xScale = _v;\n    return my;\n  };\n  /**\n   * Y Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 scale.\n   * @returns {*}\n   */\n\n\n  my.yScale = function (_v) {\n    if (!arguments.length) return yScale;\n    yScale = _v;\n    return my;\n  };\n  /**\n   * Color Scale Getter / Setter\n   *\n   * @param {d3.scale} _v - D3 color scale.\n   * @returns {*}\n   */\n\n\n  my.colorScale = function (_v) {\n    if (!arguments.length) return colorScale;\n    colorScale = _v;\n    return my;\n  };\n  /**\n   * Colors Getter / Setter\n   *\n   * @param {Array} _v - Array of colours used by color scale.\n   * @returns {*}\n   */\n\n\n  my.colors = function (_v) {\n    if (!arguments.length) return colors;\n    colors = _v;\n    return my;\n  };\n  /**\n   * Debug Getter / Setter\n   *\n   * @param {boolean} _v - Show debug log and stats. True/False.\n   * @returns {*}\n   */\n\n\n  my.debug = function (_v) {\n    if (!arguments.length) return debug;\n    debug = _v;\n    return my;\n  };\n\n  return my;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/chart/barChartVertical.js"],"names":["d3","dataTransform","component","createScene","width","height","dimensions","x","y","z","colors","classed","debug","xScale","yScale","colorScale","viewpoint","xAxis","axis","yAxis","bars","light","init","data","columnKeys","valueMax","summary","valueExtent","dimensionX","dimensionY","scaleBand","domain","range","padding","align","scaleLinear","nice","scaleOrdinal","my","selection","layers","scene","each","quickView","call","scale","direction","tickDirection","tickSize","select","datum","_v","arguments","length"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport dataTransform from \"../dataTransform\";\nimport component from \"../component\";\nimport { createScene } from \"../base\";\n\n/**\n * Reusable 3D Vertical Bar Chart\n *\n * @module\n *\n * @example\n * let chartHolder = d3.select(\"#chartholder\");\n *\n * let myData = [...];\n *\n * let myChart = d3.x3d.chart.barChartVertical();\n *\n * chartHolder.datum(myData).call(myChart);\n *\n * @see https://datavizproject.com/data-type/3d-bar-chart/\n */\nexport default function() {\n\n\t/* Default Properties */\n\tlet width = 500;\n\tlet height = 500;\n\tlet dimensions = { x: 40, y: 40, z: 40 };\n\tlet colors = [\"green\", \"red\", \"yellow\", \"steelblue\", \"orange\"];\n\tlet classed = \"d3X3dBarChartVertical\";\n\tlet debug = false;\n\n\t/* Scales */\n\tlet xScale;\n\tlet yScale;\n\tlet colorScale;\n\n\t/* Components */\n\tconst viewpoint = component.viewpoint();\n\tconst xAxis = component.axis();\n\tconst yAxis = component.axis();\n\tconst bars = component.bars();\n\tconst light = component.light();\n\n\t/**\n\t * Initialise Data and Scales\n\t *\n\t * @private\n\t * @param {Array} data - Chart data.\n\t */\n\tconst init = function(data) {\n\t\tconst { columnKeys, valueMax } = dataTransform(data).summary();\n\t\tconst valueExtent = [0, valueMax];\n\t\tconst { x: dimensionX, y: dimensionY } = dimensions;\n\n\t\txScale = d3.scaleBand()\n\t\t\t.domain(columnKeys)\n\t\t\t.range([0, dimensionX])\n\t\t\t.padding(0.5)\n\t\t\t.align(0.75);\n\n\t\tyScale = d3.scaleLinear()\n\t\t\t.domain(valueExtent)\n\t\t\t.range([0, dimensionY])\n\t\t\t.nice();\n\n\t\tcolorScale = d3.scaleOrdinal()\n\t\t\t.domain(columnKeys)\n\t\t\t.range(colors);\n\t};\n\n\t/**\n\t * Constructor\n\t *\n\t * @constructor\n\t * @alias barChartVertical\n\t * @param {d3.selection} selection - The chart holder D3 selection.\n\t */\n\tconst my = function(selection) {\n\t\tconst layers = [\"xAxis\", \"yAxis\", \"bars\"];\n\t\tconst scene = createScene(selection, layers, classed, width, height, debug);\n\n\t\tselection.each((data) => {\n\t\t\tinit(data);\n\n\t\t\t// Add Viewpoint\n\t\t\tviewpoint.quickView(\"left\");\n\n\t\t\tscene.call(viewpoint);\n\n\t\t\t// Add Axis\n\t\t\txAxis.scale(xScale)\n\t\t\t\t.direction(\"x\")\n\t\t\t\t.tickDirection(\"y\")\n\t\t\t\t.tickSize(0);\n\n\t\t\tyAxis.scale(yScale)\n\t\t\t\t.direction(\"y\")\n\t\t\t\t.tickDirection(\"x\")\n\t\t\t\t.tickSize(yScale.range()[1] - yScale.range()[0]);\n\n\t\t\tscene.select(\".xAxis\")\n\t\t\t\t.call(xAxis);\n\n\t\t\tscene.select(\".yAxis\")\n\t\t\t\t.call(yAxis);\n\n\t\t\t// Add Bars\n\t\t\tbars.xScale(xScale)\n\t\t\t\t.yScale(yScale)\n\t\t\t\t.colors(colors);\n\n\t\t\tscene.select(\".bars\")\n\t\t\t\t.datum(data)\n\t\t\t\t.call(bars);\n\n\t\t\t// Add Light\n\t\t\tscene.call(light);\n\t\t});\n\t};\n\n\t/**\n\t * Width Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas width in px.\n\t * @returns {*}\n\t */\n\tmy.width = function(_v) {\n\t\tif (!arguments.length) return width;\n\t\twidth = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Height Getter / Setter\n\t *\n\t * @param {number} _v - X3D canvas height in px.\n\t * @returns {*}\n\t */\n\tmy.height = function(_v) {\n\t\tif (!arguments.length) return height;\n\t\theight = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Dimensions Getter / Setter\n\t *\n\t * @param {{x: number, y: number, z: number}} _v - 3D object dimensions.\n\t * @returns {*}\n\t */\n\tmy.dimensions = function(_v) {\n\t\tif (!arguments.length) return dimensions;\n\t\tdimensions = _v;\n\t\treturn this;\n\t};\n\n\t/**\n\t * X Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.xScale = function(_v) {\n\t\tif (!arguments.length) return xScale;\n\t\txScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Y Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 scale.\n\t * @returns {*}\n\t */\n\tmy.yScale = function(_v) {\n\t\tif (!arguments.length) return yScale;\n\t\tyScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Color Scale Getter / Setter\n\t *\n\t * @param {d3.scale} _v - D3 color scale.\n\t * @returns {*}\n\t */\n\tmy.colorScale = function(_v) {\n\t\tif (!arguments.length) return colorScale;\n\t\tcolorScale = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Colors Getter / Setter\n\t *\n\t * @param {Array} _v - Array of colours used by color scale.\n\t * @returns {*}\n\t */\n\tmy.colors = function(_v) {\n\t\tif (!arguments.length) return colors;\n\t\tcolors = _v;\n\t\treturn my;\n\t};\n\n\t/**\n\t * Debug Getter / Setter\n\t *\n\t * @param {boolean} _v - Show debug log and stats. True/False.\n\t * @returns {*}\n\t */\n\tmy.debug = function(_v) {\n\t\tif (!arguments.length) return debug;\n\t\tdebug = _v;\n\t\treturn my;\n\t};\n\n\treturn my;\n}\n"]},"metadata":{},"sourceType":"module"}