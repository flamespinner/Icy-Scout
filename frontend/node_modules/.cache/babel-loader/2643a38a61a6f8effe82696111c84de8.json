{"ast":null,"code":"import * as d3 from \"d3\";\n/**\n * Custom Dispatch Events\n *\n * @type {d3.dispatch}\n */\n\nexport const dispatch = d3.dispatch(\"d3X3dClick\", \"d3X3dMouseOver\", \"d3X3dMouseOut\");\n/**\n * Attach Event Listeners to Shape\n *\n * Detect X3DOM events and convert them into D3 dispatch events.\n *\n * @param el\n */\n\nexport function attachEventListners(el) {\n  el.attr(\"onclick\", \"d3.x3d.events.forwardEvent(event);\").on(\"click\", function (e) {\n    dispatch.call(\"d3X3dClick\", this, e);\n  });\n  el.attr(\"onmouseover\", \"d3.x3d.events.forwardEvent(event);\").on(\"mouseover\", function (e) {\n    dispatch.call(\"d3X3dMouseOver\", this, e);\n  });\n  el.attr(\"onmouseout\", \"d3.x3d.events.forwardEvent(event);\").on(\"mouseout\", function (e) {\n    dispatch.call(\"d3X3dMouseOut\", this, e);\n  });\n}\n/**\n * Forward X3DOM Event to D3\n *\n * In X3DOM, it is the canvas which captures onclick events, therefore defining a D3 event handler\n * on an single X3DOM element does not work. A workaround is to define an onclick handler which then\n * forwards the call to the D3 \"click\" event handler with the event.\n * Note: X3DOM and D3 event members slightly differ, so d3.mouse() function does not work.\n *\n * @param {event} event\n * @see https://bl.ocks.org/hlvoorhees/5376764\n */\n\nexport function forwardEvent(event) {\n  let type = event.type;\n  let target = d3.select(event.target);\n  target.on(type)(event);\n}\n/**\n * Show Alert With Event Coordinate\n *\n * @param {event} event\n * @returns {{canvas: {x: (*|number), y: (*|number)}, world: {x: *, y: *, z: *}, page: {x: number, y: number}}}\n */\n\nexport function getEventCoordinates(event) {\n  let pagePoint = getEventPagePoint(event);\n  return {\n    world: {\n      x: event.hitPnt[0],\n      y: event.hitPnt[1],\n      z: event.hitPnt[2]\n    },\n    canvas: {\n      x: event.layerX,\n      y: event.layerY\n    },\n    page: {\n      x: pagePoint.x,\n      y: pagePoint.y\n    }\n  };\n}\n/**\n * Inverse of coordinate transform defined by function mousePosition(evt) in x3dom.js\n *\n * @param {event} event\n * @returns {{x: number, y: number}}\n */\n\nexport function getEventPagePoint(event) {\n  let pageX = -1;\n  let pageY = -1;\n  let convertPoint = window.webkitConvertPointFromPageToNode;\n\n  if (\"getBoundingClientRect\" in document.documentElement) {\n    let holder = getX3domHolder(event);\n    let computedStyle = document.defaultView.getComputedStyle(holder, null);\n    let paddingLeft = parseFloat(computedStyle.getPropertyValue(\"padding-left\"));\n    let borderLeftWidth = parseFloat(computedStyle.getPropertyValue(\"border-left-width\"));\n    let paddingTop = parseFloat(computedStyle.getPropertyValue(\"padding-top\"));\n    let borderTopWidth = parseFloat(computedStyle.getPropertyValue(\"border-top-width\"));\n    let box = holder.getBoundingClientRect();\n    let scrolLeft = window.pageXOffset || document.body.scrollLeft;\n    let scrollTop = window.pageYOffset || document.body.scrollTop;\n    pageX = Math.round(event.layerX + (box.left + paddingLeft + borderLeftWidth + scrolLeft));\n    pageY = Math.round(event.layerY + (box.top + paddingTop + borderTopWidth + scrollTop));\n  } else if (convertPoint) {\n    let pagePoint = convertPoint(event.target, new WebKitPoint(0, 0));\n    pageX = Math.round(pagePoint.x);\n    pageY = Math.round(pagePoint.y);\n  } else {\n    x3dom.debug.logError(\"Unable to find getBoundingClientRect or webkitConvertPointFromPageToNode\");\n  }\n\n  return {\n    x: pageX,\n    y: pageY\n  };\n}\n/**\n * Return the x3d Parent Holder\n *\n * Find clicked element, walk up DOM until we find the parent x3d.\n * Then return the x3d's parent.\n *\n * @param event\n * @returns {*}\n */\n\nexport function getX3domHolder(event) {\n  let target = d3.select(event.target);\n  let x3d = target.select(function () {\n    let el = this;\n\n    while (el.nodeName.toLowerCase() !== \"x3d\") {\n      el = el.parentElement;\n    }\n\n    return el;\n  });\n  return x3d.select(function () {\n    return this.parentNode;\n  }).node();\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/events.js"],"names":["d3","dispatch","attachEventListners","el","attr","on","e","call","forwardEvent","event","type","target","select","getEventCoordinates","pagePoint","getEventPagePoint","world","x","hitPnt","y","z","canvas","layerX","layerY","page","pageX","pageY","convertPoint","window","webkitConvertPointFromPageToNode","document","documentElement","holder","getX3domHolder","computedStyle","defaultView","getComputedStyle","paddingLeft","parseFloat","getPropertyValue","borderLeftWidth","paddingTop","borderTopWidth","box","getBoundingClientRect","scrolLeft","pageXOffset","body","scrollLeft","scrollTop","pageYOffset","Math","round","left","top","WebKitPoint","x3dom","debug","logError","x3d","nodeName","toLowerCase","parentElement","parentNode","node"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGD,EAAE,CAACC,QAAH,CAAY,YAAZ,EAA0B,gBAA1B,EAA4C,eAA5C,CAAjB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiC;AACvCA,EAAAA,EAAE,CAACC,IAAH,CAAQ,SAAR,EAAmB,oCAAnB,EACEC,EADF,CACK,OADL,EACc,UAASC,CAAT,EAAY;AAAEL,IAAAA,QAAQ,CAACM,IAAT,CAAc,YAAd,EAA4B,IAA5B,EAAkCD,CAAlC;AAAuC,GADnE;AAGAH,EAAAA,EAAE,CAACC,IAAH,CAAQ,aAAR,EAAuB,oCAAvB,EACEC,EADF,CACK,WADL,EACkB,UAASC,CAAT,EAAY;AAAEL,IAAAA,QAAQ,CAACM,IAAT,CAAc,gBAAd,EAAgC,IAAhC,EAAsCD,CAAtC;AAA2C,GAD3E;AAGAH,EAAAA,EAAE,CAACC,IAAH,CAAQ,YAAR,EAAsB,oCAAtB,EACEC,EADF,CACK,UADL,EACiB,UAASC,CAAT,EAAY;AAAEL,IAAAA,QAAQ,CAACM,IAAT,CAAc,eAAd,EAA+B,IAA/B,EAAqCD,CAArC;AAA0C,GADzE;AAEA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;AACnC,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACA,MAAIC,MAAM,GAAGX,EAAE,CAACY,MAAH,CAAUH,KAAK,CAACE,MAAhB,CAAb;AACAA,EAAAA,MAAM,CAACN,EAAP,CAAUK,IAAV,EAAgBD,KAAhB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,mBAAT,CAA6BJ,KAA7B,EAAoC;AAC1C,MAAIK,SAAS,GAAGC,iBAAiB,CAACN,KAAD,CAAjC;AAEA,SAAO;AACNO,IAAAA,KAAK,EAAE;AAAEC,MAAAA,CAAC,EAAER,KAAK,CAACS,MAAN,CAAa,CAAb,CAAL;AAAsBC,MAAAA,CAAC,EAAEV,KAAK,CAACS,MAAN,CAAa,CAAb,CAAzB;AAA0CE,MAAAA,CAAC,EAAEX,KAAK,CAACS,MAAN,CAAa,CAAb;AAA7C,KADD;AAENG,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,CAAC,EAAER,KAAK,CAACa,MAAX;AAAmBH,MAAAA,CAAC,EAAEV,KAAK,CAACc;AAA5B,KAFF;AAGNC,IAAAA,IAAI,EAAE;AAAEP,MAAAA,CAAC,EAAEH,SAAS,CAACG,CAAf;AAAkBE,MAAAA,CAAC,EAAEL,SAAS,CAACK;AAA/B;AAHA,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASJ,iBAAT,CAA2BN,KAA3B,EAAkC;AACxC,MAAIgB,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AAEA,MAAIC,YAAY,GAAGC,MAAM,CAACC,gCAA1B;;AAEA,MAAI,2BAA2BC,QAAQ,CAACC,eAAxC,EAAyD;AACxD,QAAIC,MAAM,GAAGC,cAAc,CAACxB,KAAD,CAA3B;AACA,QAAIyB,aAAa,GAAGJ,QAAQ,CAACK,WAAT,CAAqBC,gBAArB,CAAsCJ,MAAtC,EAA8C,IAA9C,CAApB;AACA,QAAIK,WAAW,GAAGC,UAAU,CAACJ,aAAa,CAACK,gBAAd,CAA+B,cAA/B,CAAD,CAA5B;AACA,QAAIC,eAAe,GAAGF,UAAU,CAACJ,aAAa,CAACK,gBAAd,CAA+B,mBAA/B,CAAD,CAAhC;AACA,QAAIE,UAAU,GAAGH,UAAU,CAACJ,aAAa,CAACK,gBAAd,CAA+B,aAA/B,CAAD,CAA3B;AACA,QAAIG,cAAc,GAAGJ,UAAU,CAACJ,aAAa,CAACK,gBAAd,CAA+B,kBAA/B,CAAD,CAA/B;AACA,QAAII,GAAG,GAAGX,MAAM,CAACY,qBAAP,EAAV;AACA,QAAIC,SAAS,GAAGjB,MAAM,CAACkB,WAAP,IAAsBhB,QAAQ,CAACiB,IAAT,CAAcC,UAApD;AACA,QAAIC,SAAS,GAAGrB,MAAM,CAACsB,WAAP,IAAsBpB,QAAQ,CAACiB,IAAT,CAAcE,SAApD;AACAxB,IAAAA,KAAK,GAAG0B,IAAI,CAACC,KAAL,CAAW3C,KAAK,CAACa,MAAN,IAAgBqB,GAAG,CAACU,IAAJ,GAAWhB,WAAX,GAAyBG,eAAzB,GAA2CK,SAA3D,CAAX,CAAR;AACAnB,IAAAA,KAAK,GAAGyB,IAAI,CAACC,KAAL,CAAW3C,KAAK,CAACc,MAAN,IAAgBoB,GAAG,CAACW,GAAJ,GAAUb,UAAV,GAAuBC,cAAvB,GAAwCO,SAAxD,CAAX,CAAR;AACA,GAZD,MAYO,IAAItB,YAAJ,EAAkB;AACxB,QAAIb,SAAS,GAAGa,YAAY,CAAClB,KAAK,CAACE,MAAP,EAAe,IAAI4C,WAAJ,CAAgB,CAAhB,EAAmB,CAAnB,CAAf,CAA5B;AACA9B,IAAAA,KAAK,GAAG0B,IAAI,CAACC,KAAL,CAAWtC,SAAS,CAACG,CAArB,CAAR;AACAS,IAAAA,KAAK,GAAGyB,IAAI,CAACC,KAAL,CAAWtC,SAAS,CAACK,CAArB,CAAR;AACA,GAJM,MAIA;AACNqC,IAAAA,KAAK,CAACC,KAAN,CAAYC,QAAZ,CAAqB,0EAArB;AACA;;AAED,SAAO;AAAEzC,IAAAA,CAAC,EAAEQ,KAAL;AAAYN,IAAAA,CAAC,EAAEO;AAAf,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,cAAT,CAAwBxB,KAAxB,EAA+B;AACrC,MAAIE,MAAM,GAAGX,EAAE,CAACY,MAAH,CAAUH,KAAK,CAACE,MAAhB,CAAb;AAEA,MAAIgD,GAAG,GAAGhD,MAAM,CAACC,MAAP,CAAc,YAAW;AAClC,QAAIT,EAAE,GAAG,IAAT;;AACA,WAAOA,EAAE,CAACyD,QAAH,CAAYC,WAAZ,OAA8B,KAArC,EAA4C;AAC3C1D,MAAAA,EAAE,GAAGA,EAAE,CAAC2D,aAAR;AACA;;AAED,WAAO3D,EAAP;AACA,GAPS,CAAV;AASA,SAAOwD,GAAG,CAAC/C,MAAJ,CAAW,YAAW;AAC5B,WAAO,KAAKmD,UAAZ;AACA,GAFM,EAEJC,IAFI,EAAP;AAGA","sourcesContent":["import * as d3 from \"d3\";\n\n/**\n * Custom Dispatch Events\n *\n * @type {d3.dispatch}\n */\nexport const dispatch = d3.dispatch(\"d3X3dClick\", \"d3X3dMouseOver\", \"d3X3dMouseOut\");\n\n/**\n * Attach Event Listeners to Shape\n *\n * Detect X3DOM events and convert them into D3 dispatch events.\n *\n * @param el\n */\nexport function attachEventListners(el) {\n\tel.attr(\"onclick\", \"d3.x3d.events.forwardEvent(event);\")\n\t\t.on(\"click\", function(e) { dispatch.call(\"d3X3dClick\", this, e); });\n\n\tel.attr(\"onmouseover\", \"d3.x3d.events.forwardEvent(event);\")\n\t\t.on(\"mouseover\", function(e) { dispatch.call(\"d3X3dMouseOver\", this, e); });\n\n\tel.attr(\"onmouseout\", \"d3.x3d.events.forwardEvent(event);\")\n\t\t.on(\"mouseout\", function(e) { dispatch.call(\"d3X3dMouseOut\", this, e); });\n}\n\n/**\n * Forward X3DOM Event to D3\n *\n * In X3DOM, it is the canvas which captures onclick events, therefore defining a D3 event handler\n * on an single X3DOM element does not work. A workaround is to define an onclick handler which then\n * forwards the call to the D3 \"click\" event handler with the event.\n * Note: X3DOM and D3 event members slightly differ, so d3.mouse() function does not work.\n *\n * @param {event} event\n * @see https://bl.ocks.org/hlvoorhees/5376764\n */\nexport function forwardEvent(event) {\n\tlet type = event.type;\n\tlet target = d3.select(event.target);\n\ttarget.on(type)(event);\n}\n\n/**\n * Show Alert With Event Coordinate\n *\n * @param {event} event\n * @returns {{canvas: {x: (*|number), y: (*|number)}, world: {x: *, y: *, z: *}, page: {x: number, y: number}}}\n */\nexport function getEventCoordinates(event) {\n\tlet pagePoint = getEventPagePoint(event);\n\n\treturn {\n\t\tworld: { x: event.hitPnt[0], y: event.hitPnt[1], z: event.hitPnt[2] },\n\t\tcanvas: { x: event.layerX, y: event.layerY },\n\t\tpage: { x: pagePoint.x, y: pagePoint.y }\n\t}\n}\n\n/**\n * Inverse of coordinate transform defined by function mousePosition(evt) in x3dom.js\n *\n * @param {event} event\n * @returns {{x: number, y: number}}\n */\nexport function getEventPagePoint(event) {\n\tlet pageX = -1;\n\tlet pageY = -1;\n\n\tlet convertPoint = window.webkitConvertPointFromPageToNode;\n\n\tif (\"getBoundingClientRect\" in document.documentElement) {\n\t\tlet holder = getX3domHolder(event);\n\t\tlet computedStyle = document.defaultView.getComputedStyle(holder, null);\n\t\tlet paddingLeft = parseFloat(computedStyle.getPropertyValue(\"padding-left\"));\n\t\tlet borderLeftWidth = parseFloat(computedStyle.getPropertyValue(\"border-left-width\"));\n\t\tlet paddingTop = parseFloat(computedStyle.getPropertyValue(\"padding-top\"));\n\t\tlet borderTopWidth = parseFloat(computedStyle.getPropertyValue(\"border-top-width\"));\n\t\tlet box = holder.getBoundingClientRect();\n\t\tlet scrolLeft = window.pageXOffset || document.body.scrollLeft;\n\t\tlet scrollTop = window.pageYOffset || document.body.scrollTop;\n\t\tpageX = Math.round(event.layerX + (box.left + paddingLeft + borderLeftWidth + scrolLeft));\n\t\tpageY = Math.round(event.layerY + (box.top + paddingTop + borderTopWidth + scrollTop));\n\t} else if (convertPoint) {\n\t\tlet pagePoint = convertPoint(event.target, new WebKitPoint(0, 0));\n\t\tpageX = Math.round(pagePoint.x);\n\t\tpageY = Math.round(pagePoint.y);\n\t} else {\n\t\tx3dom.debug.logError(\"Unable to find getBoundingClientRect or webkitConvertPointFromPageToNode\");\n\t}\n\n\treturn { x: pageX, y: pageY };\n}\n\n/**\n * Return the x3d Parent Holder\n *\n * Find clicked element, walk up DOM until we find the parent x3d.\n * Then return the x3d's parent.\n *\n * @param event\n * @returns {*}\n */\nexport function getX3domHolder(event) {\n\tlet target = d3.select(event.target);\n\n\tlet x3d = target.select(function() {\n\t\tlet el = this;\n\t\twhile (el.nodeName.toLowerCase() !== \"x3d\") {\n\t\t\tel = el.parentElement;\n\t\t}\n\n\t\treturn el;\n\t});\n\n\treturn x3d.select(function() {\n\t\treturn this.parentNode;\n\t}).node();\n}\n"]},"metadata":{},"sourceType":"module"}