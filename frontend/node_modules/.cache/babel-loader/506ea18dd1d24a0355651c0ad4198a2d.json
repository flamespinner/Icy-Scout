{"ast":null,"code":"// @formatter:off\n\n/**\n * Definition of CSS color names\n * @type {Array}\n */\nconst colorNames = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  feldspar: \"#d19275\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslateblue: \"#8470ff\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  violetred: \"#d02090\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n}; // @formatter:on\n\n/**\n * Color Name to Hex\n *\n * @param {string} colorName\n * @returns {boolean|*}\n */\n\nfunction colourNameToHex(colorName) {\n  if (typeof colorNames[colorName.toLowerCase()] !== \"undefined\") {\n    return colorNames[colorName.toLowerCase()];\n  }\n\n  return false;\n}\n/**\n * Color Component to Hex\n *\n * @param {number} c\n * @returns {string}\n */\n\n\nfunction componentToHex(c) {\n  const hex = c.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n/**\n * Color RGB to Hex\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns {string}\n */\n\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n/**\n * RGB Colour to Hex Converter\n *\n * @param {string} rgbStr - RGB colour string (e.g. \"rgb(155, 102, 102)\").\n * @returns {string} - Hex Color (e.g. \"#9b6666\").\n */\n\n\nfunction rgb2Hex(rgbStr) {\n  const [red, green, blue] = rgbStr.substring(4, rgbStr.length - 1).replace(/ /g, \"\").split(\",\");\n  let rgb = blue | green << 8 | red << 16; // eslint-disable-line no-bitwise\n\n  return \"#\" + (0x1000000 + rgb).toString(16).slice(1);\n}\n/**\n * Color Hex to RGB\n *\n * @param {string} hex\n * @returns {*}\n */\n\n\nfunction hexToRgb(hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n/**\n * Color Hex to X3D RGB\n *\n * @param {string} hex\n * @returns {string}\n */\n\n\nfunction hexToX3d(hex) {\n  const rgb = hexToRgb(hex);\n  return `${rgb.r / 255} ${rgb.g / 255} ${rgb.b / 255}`;\n}\n/**\n * Color Name to X3D RGB\n *\n * @param {string} colorName\n * @returns {string}\n */\n\n\nfunction colourNameToX3d(colorName) {\n  const rgb = hexToRgb(colourNameToHex(colorName));\n  return `${rgb.r / 255} ${rgb.g / 255} ${rgb.b / 255}`;\n}\n/**\n * X3D Color Parser\n *\n * @param {Rgb|Hsl|null} color\n * @returns {string}\n */\n\n\nexport function colorParse(color) {\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n  let alpha = 0; // Already matches X3D RGB\n\n  const x3dMatch = /^(0+\\.?\\d*|1\\.?0*)\\s+(0+\\.?\\d*|1\\.?0*)\\s+(0+\\.?\\d*|1\\.?0*)$/.exec(color);\n\n  if (x3dMatch !== null) {\n    red = +x3dMatch[1];\n    green = +x3dMatch[2];\n    blue = +x3dMatch[3];\n  } // Matches CSS rgb() function\n\n\n  const rgbMatch = /^rgb\\((\\d{1,3}),\\s{0,1}(\\d{1,3}),\\s{0,1}(\\d{1,3})\\)$/.exec(color);\n\n  if (rgbMatch !== null) {\n    red = rgbMatch[1] / 255.0;\n    green = rgbMatch[2] / 255.0;\n    blue = rgbMatch[3] / 255.0;\n  } // Matches CSS color name\n\n\n  if (colorNames[color]) {\n    color = colorNames[color];\n  } // Hexadecimal color codes\n\n\n  if (color.substr && color.substr(0, 1) === \"#\") {\n    const hex = color.substr(1);\n    const len = hex.length;\n\n    if (len === 8) {\n      red = parseInt(\"0x\" + hex.substr(0, 2), 16) / 255.0;\n      green = parseInt(\"0x\" + hex.substr(2, 2), 16) / 255.0;\n      blue = parseInt(\"0x\" + hex.substr(4, 2), 16) / 255.0;\n      alpha = parseInt(\"0x\" + hex.substr(6, 2), 16) / 255.0;\n    } else if (len === 6) {\n      red = parseInt(\"0x\" + hex.substr(0, 2), 16) / 255.0;\n      green = parseInt(\"0x\" + hex.substr(2, 2), 16) / 255.0;\n      blue = parseInt(\"0x\" + hex.substr(4, 2), 16) / 255.0;\n      alpha = 1.0;\n    } else if (len === 4) {\n      red = parseInt(\"0x\" + hex.substr(0, 1), 16) / 15.0;\n      green = parseInt(\"0x\" + hex.substr(1, 1), 16) / 15.0;\n      blue = parseInt(\"0x\" + hex.substr(2, 1), 16) / 15.0;\n      alpha = parseInt(\"0x\" + hex.substr(3, 1), 16) / 15.0;\n    } else if (len === 3) {\n      red = parseInt(\"0x\" + hex.substr(0, 1), 16) / 15.0;\n      green = parseInt(\"0x\" + hex.substr(1, 1), 16) / 15.0;\n      blue = parseInt(\"0x\" + hex.substr(2, 1), 16) / 15.0;\n      alpha = 1.0;\n    }\n  }\n\n  red = red.toFixed(4);\n  green = green.toFixed(4);\n  blue = blue.toFixed(4);\n  return `${red} ${green} ${blue}`;\n}","map":{"version":3,"sources":["C:/Users/Michael Wilke/Desktop/Scout/frontend/node_modules/d3-x3d/src/colorHelper.js"],"names":["colorNames","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","colourNameToHex","colorName","toLowerCase","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","rgb2Hex","rgbStr","substring","replace","split","rgb","slice","hexToRgb","result","exec","parseInt","hexToX3d","colourNameToX3d","colorParse","color","alpha","x3dMatch","rgbMatch","substr","len","toFixed"],"mappings":"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","sourcesContent":["// @formatter:off\n/**\n * Definition of CSS color names\n * @type {Array}\n */\nconst colorNames = {\n\t\taliceblue: \"#f0f8ff\",          antiquewhite: \"#faebd7\",         aqua: \"#00ffff\",\n\t\taquamarine: \"#7fffd4\",         azure: \"#f0ffff\",                beige: \"#f5f5dc\",\n\t\tbisque: \"#ffe4c4\",             black: \"#000000\",                blanchedalmond: \"#ffebcd\",\n\t\tblue: \"#0000ff\",               blueviolet: \"#8a2be2\",           brown: \"#a52a2a\",\n\t\tburlywood: \"#deb887\",          cadetblue: \"#5f9ea0\",            chartreuse: \"#7fff00\",\n\t\tchocolate: \"#d2691e\",          coral: \"#ff7f50\",                cornflowerblue: \"#6495ed\",\n\t\tcornsilk: \"#fff8dc\",           crimson: \"#dc143c\",              cyan: \"#00ffff\",\n\t\tdarkblue: \"#00008b\",           darkcyan: \"#008b8b\",             darkgoldenrod: \"#b8860b\",\n\t\tdarkgray: \"#a9a9a9\",           darkgreen: \"#006400\",            darkkhaki: \"#bdb76b\",\n\t\tdarkmagenta: \"#8b008b\",        darkolivegreen: \"#556b2f\",       darkorange: \"#ff8c00\",\n\t\tdarkorchid: \"#9932cc\",         darkred: \"#8b0000\",              darksalmon: \"#e9967a\",\n\t\tdarkseagreen: \"#8fbc8f\",       darkslateblue: \"#483d8b\",        darkslategray: \"#2f4f4f\",\n\t\tdarkturquoise: \"#00ced1\",      darkviolet: \"#9400d3\",           deeppink: \"#ff1493\",\n\t\tdeepskyblue: \"#00bfff\",        dimgray: \"#696969\",              dodgerblue: \"#1e90ff\",\n\t\tfeldspar: \"#d19275\",           firebrick: \"#b22222\",            floralwhite: \"#fffaf0\",\n\t\tforestgreen: \"#228b22\",        fuchsia: \"#ff00ff\",              gainsboro: \"#dcdcdc\",\n\t\tghostwhite: \"#f8f8ff\",         gold: \"#ffd700\",                 goldenrod: \"#daa520\",\n\t\tgray: \"#808080\",               green: \"#008000\",                greenyellow: \"#adff2f\",\n\t\thoneydew: \"#f0fff0\",           hotpink: \"#ff69b4\",              indianred : \"#cd5c5c\",\n\t\tindigo : \"#4b0082\",            ivory: \"#fffff0\",                khaki: \"#f0e68c\",\n\t\tlavender: \"#e6e6fa\",           lavenderblush: \"#fff0f5\",        lawngreen: \"#7cfc00\",\n\t\tlemonchiffon: \"#fffacd\",       lightblue: \"#add8e6\",            lightcoral: \"#f08080\",\n\t\tlightcyan: \"#e0ffff\",          lightgoldenrodyellow: \"#fafad2\", lightgrey: \"#d3d3d3\",\n\t\tlightgreen: \"#90ee90\",         lightpink: \"#ffb6c1\",            lightsalmon: \"#ffa07a\",\n\t\tlightseagreen: \"#20b2aa\",      lightskyblue: \"#87cefa\",         lightslateblue: \"#8470ff\",\n\t\tlightslategray: \"#778899\",     lightsteelblue: \"#b0c4de\",       lightyellow: \"#ffffe0\",\n\t\tlime: \"#00ff00\",               limegreen: \"#32cd32\",            linen: \"#faf0e6\",\n\t\tmagenta: \"#ff00ff\",            maroon: \"#800000\",               mediumaquamarine: \"#66cdaa\",\n\t\tmediumblue: \"#0000cd\",         mediumorchid: \"#ba55d3\",         mediumpurple: \"#9370d8\",\n\t\tmediumseagreen: \"#3cb371\",     mediumslateblue: \"#7b68ee\",      mediumspringgreen: \"#00fa9a\",\n\t\tmediumturquoise: \"#48d1cc\",    mediumvioletred: \"#c71585\",      midnightblue: \"#191970\",\n\t\tmintcream: \"#f5fffa\",          mistyrose: \"#ffe4e1\",            moccasin: \"#ffe4b5\",\n\t\tnavajowhite: \"#ffdead\",        navy: \"#000080\",                 oldlace: \"#fdf5e6\",\n\t\tolive: \"#808000\",              olivedrab: \"#6b8e23\",            orange: \"#ffa500\",\n\t\torangered: \"#ff4500\",          orchid: \"#da70d6\",               palegoldenrod: \"#eee8aa\",\n\t\tpalegreen: \"#98fb98\",          paleturquoise: \"#afeeee\",        palevioletred: \"#d87093\",\n\t\tpapayawhip: \"#ffefd5\",         peachpuff: \"#ffdab9\",            peru: \"#cd853f\",\n\t\tpink: \"#ffc0cb\",               plum: \"#dda0dd\",                 powderblue: \"#b0e0e6\",\n\t\tpurple: \"#800080\",             red: \"#ff0000\",                  rosybrown: \"#bc8f8f\",\n\t\troyalblue: \"#4169e1\",          saddlebrown: \"#8b4513\",          salmon: \"#fa8072\",\n\t\tsandybrown: \"#f4a460\",         seagreen: \"#2e8b57\",             seashell: \"#fff5ee\",\n\t\tsienna: \"#a0522d\",             silver: \"#c0c0c0\",               skyblue: \"#87ceeb\",\n\t\tslateblue: \"#6a5acd\",          slategray: \"#708090\",            snow: \"#fffafa\",\n\t\tspringgreen: \"#00ff7f\",        steelblue: \"#4682b4\",            tan: \"#d2b48c\",\n\t\tteal: \"#008080\",               thistle: \"#d8bfd8\",              tomato: \"#ff6347\",\n\t\tturquoise: \"#40e0d0\",          violet: \"#ee82ee\",               violetred: \"#d02090\",\n\t\twheat: \"#f5deb3\",              white: \"#ffffff\",                whitesmoke: \"#f5f5f5\",\n\t\tyellow: \"#ffff00\",             yellowgreen: \"#9acd32\"\n\t};\n// @formatter:on\n\n/**\n * Color Name to Hex\n *\n * @param {string} colorName\n * @returns {boolean|*}\n */\nfunction colourNameToHex(colorName) {\n\tif (typeof colorNames[colorName.toLowerCase()] !== \"undefined\") {\n\t\treturn colorNames[colorName.toLowerCase()];\n\t}\n\treturn false;\n}\n\n/**\n * Color Component to Hex\n *\n * @param {number} c\n * @returns {string}\n */\nfunction componentToHex(c) {\n\tconst hex = c.toString(16);\n\treturn hex.length === 1 ? \"0\" + hex : hex;\n}\n\n/**\n * Color RGB to Hex\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns {string}\n */\nfunction rgbToHex(r, g, b) {\n\treturn \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\n/**\n * RGB Colour to Hex Converter\n *\n * @param {string} rgbStr - RGB colour string (e.g. \"rgb(155, 102, 102)\").\n * @returns {string} - Hex Color (e.g. \"#9b6666\").\n */\nfunction rgb2Hex(rgbStr) {\n\tconst [red, green, blue] = rgbStr.substring(4, rgbStr.length - 1).replace(/ /g, \"\").split(\",\");\n\tlet rgb = blue | (green << 8) | (red << 16); // eslint-disable-line no-bitwise\n\treturn \"#\" + (0x1000000 + rgb).toString(16).slice(1);\n}\n\n/**\n * Color Hex to RGB\n *\n * @param {string} hex\n * @returns {*}\n */\nfunction hexToRgb(hex) {\n\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\treturn result ? {\n\t\tr: parseInt(result[1], 16),\n\t\tg: parseInt(result[2], 16),\n\t\tb: parseInt(result[3], 16)\n\t} : null;\n}\n\n/**\n * Color Hex to X3D RGB\n *\n * @param {string} hex\n * @returns {string}\n */\nfunction hexToX3d(hex) {\n\tconst rgb = hexToRgb(hex);\n\treturn `${rgb.r / 255} ${rgb.g / 255} ${rgb.b / 255}`;\n}\n\n/**\n * Color Name to X3D RGB\n *\n * @param {string} colorName\n * @returns {string}\n */\nfunction colourNameToX3d(colorName) {\n\tconst rgb = hexToRgb(colourNameToHex(colorName));\n\treturn `${rgb.r / 255} ${rgb.g / 255} ${rgb.b / 255}`;\n}\n\n/**\n * X3D Color Parser\n *\n * @param {Rgb|Hsl|null} color\n * @returns {string}\n */\nexport function colorParse(color) {\n\tlet red = 0;\n\tlet green = 0;\n\tlet blue = 0;\n\tlet alpha = 0;\n\n\t// Already matches X3D RGB\n\tconst x3dMatch = /^(0+\\.?\\d*|1\\.?0*)\\s+(0+\\.?\\d*|1\\.?0*)\\s+(0+\\.?\\d*|1\\.?0*)$/.exec(color);\n\tif (x3dMatch !== null) {\n\t\tred = +x3dMatch[1];\n\t\tgreen = +x3dMatch[2];\n\t\tblue = +x3dMatch[3];\n\t}\n\n\t// Matches CSS rgb() function\n\tconst rgbMatch = /^rgb\\((\\d{1,3}),\\s{0,1}(\\d{1,3}),\\s{0,1}(\\d{1,3})\\)$/.exec(color);\n\tif (rgbMatch !== null) {\n\t\tred = rgbMatch[1] / 255.0;\n\t\tgreen = rgbMatch[2] / 255.0;\n\t\tblue = rgbMatch[3] / 255.0;\n\t}\n\n\t// Matches CSS color name\n\tif (colorNames[color]) {\n\t\tcolor = colorNames[color];\n\t}\n\n\t// Hexadecimal color codes\n\tif (color.substr && color.substr(0, 1) === \"#\") {\n\t\tconst hex = color.substr(1);\n\t\tconst len = hex.length;\n\n\t\tif (len === 8) {\n\t\t\tred = parseInt(\"0x\" + hex.substr(0, 2), 16) / 255.0;\n\t\t\tgreen = parseInt(\"0x\" + hex.substr(2, 2), 16) / 255.0;\n\t\t\tblue = parseInt(\"0x\" + hex.substr(4, 2), 16) / 255.0;\n\t\t\talpha = parseInt(\"0x\" + hex.substr(6, 2), 16) / 255.0;\n\t\t} else if (len === 6) {\n\t\t\tred = parseInt(\"0x\" + hex.substr(0, 2), 16) / 255.0;\n\t\t\tgreen = parseInt(\"0x\" + hex.substr(2, 2), 16) / 255.0;\n\t\t\tblue = parseInt(\"0x\" + hex.substr(4, 2), 16) / 255.0;\n\t\t\talpha = 1.0;\n\t\t} else if (len === 4) {\n\t\t\tred = parseInt(\"0x\" + hex.substr(0, 1), 16) / 15.0;\n\t\t\tgreen = parseInt(\"0x\" + hex.substr(1, 1), 16) / 15.0;\n\t\t\tblue = parseInt(\"0x\" + hex.substr(2, 1), 16) / 15.0;\n\t\t\talpha = parseInt(\"0x\" + hex.substr(3, 1), 16) / 15.0;\n\t\t} else if (len === 3) {\n\t\t\tred = parseInt(\"0x\" + hex.substr(0, 1), 16) / 15.0;\n\t\t\tgreen = parseInt(\"0x\" + hex.substr(1, 1), 16) / 15.0;\n\t\t\tblue = parseInt(\"0x\" + hex.substr(2, 1), 16) / 15.0;\n\t\t\talpha = 1.0;\n\t\t}\n\t}\n\n\tred = red.toFixed(4);\n\tgreen = green.toFixed(4);\n\tblue = blue.toFixed(4);\n\n\treturn `${red} ${green} ${blue}`;\n}\n"]},"metadata":{},"sourceType":"module"}